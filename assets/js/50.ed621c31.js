(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{510:function(e,t,v){"use strict";v.r(t);var _=v(27),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"第-15-章-dom-扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第-15-章-dom-扩展"}},[e._v("#")]),e._v(" 第 15 章　 DOM 扩展")]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("本章内容")])]),e._v(" "),v("ul",[v("li",[e._v("理解 Selectors API")]),e._v(" "),v("li",[e._v("使用 HTML5 DOM 扩展")])])]),e._v(" "),v("p",[e._v("尽管 DOM API 已经相当不错，但仍然不断有标准或专有的扩展出现，以支持更多功能。2008 年以前，大部分浏览器对 DOM 的扩展是专有的。此后，W3C 开始着手将这些已成为事实标准的专有扩展编制成正式规范。")]),e._v(" "),v("p",[e._v("基于以上背景，诞生了描述 DOM 扩展的两个标准：Selectors API 与 HTML5。这两个标准体现了社区需求和标准化某些手段及 API 的愿景。另外还有较小的 Element Traversal 规范，增加了一些 DOM 属性。专有扩展虽然还有，但这两个规范（特别是 HTML5）已经涵盖其中大部分。本章也会讨论专有扩展。")]),e._v(" "),v("p",[e._v("本章所有内容已经得到市场占有率名列前茅的所有主流浏览器支持，除非特别说明。")]),e._v(" "),v("h2",{attrs:{id:"_15-1-selectors-api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-selectors-api"}},[e._v("#")]),e._v(" 15.1 　 Selectors API")]),e._v(" "),v("p",[e._v("JavaScript 库中最流行的一种能力就是根据 CSS 选择符的模式匹配 DOM 元素。比如，jQuery 就完全以 CSS 选择符查询 DOM 获取元素引用，而不是使用"),v("code",[e._v("getElementById()")]),e._v("和"),v("code",[e._v("getElementsByTagName()")]),e._v("。")]),e._v(" "),v("p",[e._v("Selectors API（参见 W3C 网站上的 Selectors API Level 1）是 W3C 推荐标准，规定了浏览器原生支持的 CSS 查询 API。支持这一特性的所有 JavaScript 库都会实现一个基本的 CSS 解析器，然后使用已有的 DOM 方法搜索文档并匹配目标节点。虽然库开发者在不断改进其性能，但 JavaScript 代码能做到的毕竟有限。通过浏览器原生支持这个 API，解析和遍历 DOM 树可以通过底层编译语言实现，性能也有了数量级的提升。")]),e._v(" "),v("p",[e._v("Selectors API Level 1 的核心是两个方法："),v("code",[e._v("querySelector()")]),e._v("和"),v("code",[e._v("querySelectorAll()")]),e._v("。在兼容浏览器中，"),v("code",[e._v("Document")]),e._v("类型和"),v("code",[e._v("Element")]),e._v("类型的实例上都会暴露这两个方法。")]),e._v(" "),v("p",[e._v("Selectors API Level 2 规范在"),v("code",[e._v("Element")]),e._v("类型上新增了更多方法，比如"),v("code",[e._v("matches()")]),e._v("、"),v("code",[e._v("find()")]),e._v("和"),v("code",[e._v("findAll()")]),e._v("。不过，目前还没有浏览器实现或宣称实现"),v("code",[e._v("find()")]),e._v("和"),v("code",[e._v("findAll()")]),e._v("。")]),e._v(" "),v("h3",{attrs:{id:"_15-1-1-queryselector"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-1-queryselector"}},[e._v("#")]),e._v(" 15.1.1 　"),v("code",[e._v("querySelector()")])]),e._v(" "),v("p",[v("code",[e._v("querySelector()")]),e._v("方法接收 CSS 选择符参数，返回匹配该模式的第一个后代元素，如果没有匹配项则返回"),v("code",[e._v("null")]),e._v("。下面是一些例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 取得<body>元素\nlet body = document.querySelector("body");\n\n// 取得ID为"myDiv"的元素\nlet myDiv = document.querySelector("#myDiv");\n\n// 取得类名为"selected"的第一个元素\nlet selected = document.querySelector(".selected");\n\n// 取得类名为"button"的图片\nlet img = document.body.querySelector("img.button");\n')])])]),v("p",[e._v("在"),v("code",[e._v("Document")]),e._v("上使用"),v("code",[e._v("querySelector()")]),e._v("方法时，会从文档元素开始搜索；在"),v("code",[e._v("Element")]),e._v("上使用"),v("code",[e._v("querySelector()")]),e._v("方法时，则只会从当前元素的后代中查询。")]),e._v(" "),v("p",[e._v("用于查询模式的 CSS 选择符可繁可简，依需求而定。如果选择符有语法错误或碰到不支持的选择符，则"),v("code",[e._v("querySelector()")]),e._v("方法会抛出错误。")]),e._v(" "),v("h3",{attrs:{id:"_15-1-2-queryselectorall"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-2-queryselectorall"}},[e._v("#")]),e._v(" 15.1.2 　"),v("code",[e._v("querySelectorAll()")])]),e._v(" "),v("p",[v("code",[e._v("querySelectorAll()")]),e._v("方法跟"),v("code",[e._v("querySelector()")]),e._v("一样，也接收一个用于查询的参数，但它会返回所有匹配的节点，而不止一个。这个方法返回的是一个"),v("code",[e._v("NodeList")]),e._v("的静态实例。")]),e._v(" "),v("p",[e._v("再强调一次，"),v("code",[e._v("querySelectorAll()")]),e._v("返回的"),v("code",[e._v("NodeList")]),e._v("实例一个属性和方法都不缺，但它是一个静态的“快照”，而非“实时”的查询。这样的底层实现避免了使用"),v("code",[e._v("NodeList")]),e._v("对象可能造成的性能问题。")]),e._v(" "),v("p",[e._v("以有效 CSS 选择符调用"),v("code",[e._v("querySelectorAll()")]),e._v("都会返回"),v("code",[e._v("NodeList")]),e._v("，无论匹配多少个元素都可以。如果没有匹配项，则返回空的"),v("code",[e._v("NodeList")]),e._v("实例。")]),e._v(" "),v("p",[e._v("与"),v("code",[e._v("querySelector()")]),e._v("一样，"),v("code",[e._v("querySelectorAll()")]),e._v("也可以在"),v("code",[e._v("Document")]),e._v("、"),v("code",[e._v("DocumentFragment")]),e._v("和"),v("code",[e._v("Element")]),e._v("类型上使用。下面是几个例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 取得ID为"myDiv"的<div>元素中的所有<em>元素\nlet ems = document.getElementById("myDiv").querySelectorAll("em");\n\n// 取得所有类名中包含"selected"的元素\nlet selecteds = document.querySelectorAll(".selected");\n\n// 取得所有是<p>元素子元素的<strong>元素\nlet strongs = document.querySelectorAll("p strong");\n')])])]),v("p",[e._v("返回的"),v("code",[e._v("NodeList")]),e._v("对象可以通过"),v("code",[e._v("for-of")]),e._v("循环、"),v("code",[e._v("item()")]),e._v("方法或中括号语法取得个别元素。比如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('let strongElements = document.querySelectorAll("p strong");\n\n// 以下3个循环的效果一样\n\nfor (let strong of strongElements) {\n  strong.className = "important";\n}\n\nfor (let i = 0; i < strongElements.length; ++i) {\n  strongElements.item(i).className = "important";\n}\n\nfor (let i = 0; i < strongElements.length; ++i) {\n  strongElements [i].className = "important";\n}\n')])])]),v("p",[e._v("与"),v("code",[e._v("querySelector()")]),e._v("方法一样，如果选择符有语法错误或碰到不支持的选择符，则"),v("code",[e._v("querySelectorAll()")]),e._v("方法会抛出错误。")]),e._v(" "),v("h3",{attrs:{id:"_15-1-3-matches"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-3-matches"}},[e._v("#")]),e._v(" 15.1.3 　"),v("code",[e._v("matches()")])]),e._v(" "),v("p",[v("code",[e._v("matches()")]),e._v("方法（在规范草案中称为"),v("code",[e._v("matchesSelector()")]),e._v("）接收一个 CSS 选择符参数，如果元素匹配则该选择符返回"),v("code",[e._v("true")]),e._v("，否则返回"),v("code",[e._v("false")]),e._v("。例如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('if (document.body.matches ("body.page1")){\n  // true\n}\n')])])]),v("p",[e._v("使用这个方法可以方便地检测某个元素会不会被"),v("code",[e._v("querySelector()")]),e._v("或"),v("code",[e._v("querySelectorAll()")]),e._v("方法返回。")]),e._v(" "),v("p",[e._v("所有主流浏览器都支持"),v("code",[e._v("matches()")]),e._v("。Edge、Chrome、Firefox、Safari 和 Opera 完全支持，IE9~11 及一些移动浏览器支持带前缀的方法。")]),e._v(" "),v("h2",{attrs:{id:"_15-2-元素遍历"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-元素遍历"}},[e._v("#")]),e._v(" 15.2 　元素遍历")]),e._v(" "),v("p",[e._v("IE9 之前的版本不会把元素间的空格当成空白节点，而其他浏览器则会。这样就导致了"),v("code",[e._v("childNodes")]),e._v("和"),v("code",[e._v("firstChild")]),e._v("等属性上的差异。为了弥补这个差异，同时不影响 DOM 规范，W3C 通过新的 Element Traversal 规范定义了一组新属性。")]),e._v(" "),v("p",[e._v("Element Traversal API 为 DOM 元素添加了 5 个属性：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("childElementCount")]),e._v("，返回子元素数量（不包含文本节点和注释）；")]),e._v(" "),v("li",[v("code",[e._v("firstElementChild")]),e._v("，指向第一个"),v("code",[e._v("Element")]),e._v("类型的子元素（"),v("code",[e._v("Element")]),e._v("版"),v("code",[e._v("firstChild")]),e._v("）；")]),e._v(" "),v("li",[v("code",[e._v("lastElementChild")]),e._v("，指向最后一个"),v("code",[e._v("Element")]),e._v("类型的子元素（"),v("code",[e._v("Element")]),e._v("版"),v("code",[e._v("lastChild")]),e._v("）；")]),e._v(" "),v("li",[v("code",[e._v("previousElementSibling")]),e._v("，指向前一个"),v("code",[e._v("Element")]),e._v("类型的同胞元素（"),v("code",[e._v("Element")]),e._v("版"),v("code",[e._v("previousSibling")]),e._v("）；")]),e._v(" "),v("li",[v("code",[e._v("nextElementSibling")]),e._v("，指向后一个"),v("code",[e._v("Element")]),e._v("类型的同胞元素（"),v("code",[e._v("Element")]),e._v("版"),v("code",[e._v("nextSibling")]),e._v("）。")])]),e._v(" "),v("p",[e._v("在支持的浏览器中，所有 DOM 元素都会有这些属性，为遍历 DOM 元素提供便利。这样开发者就不用担心空白文本节点的问题了。")]),e._v(" "),v("p",[e._v("举个例子，过去要以跨浏览器方式遍历特定元素的所有子元素，代码大致是这样写的：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let parentElement = document.getElementById('parent');\nlet currentChildNode = parentElement.firstChild;\n\n// 没有子元素，firstChild返回null，跳过循环\nwhile (currentChildNode) {\n  if (currentChildNode.nodeType === 1) {\n    // 如果有元素节点，则做相应处理\n    processChild(currentChildNode);\n  }\n  if (currentChildNode === parentElement.lastChild) {\n    break;\n  }\n  currentChildNode = currentChildNode.nextSibling;\n}\n")])])]),v("p",[e._v("使用 Element Traversal 属性之后，以上代码可以简化如下：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let parentElement = document.getElementById('parent');\nlet currentChildElement = parentElement.firstElementChild;\n\n// 没有子元素，firstElementChild返回null，跳过循环\nwhile (currentChildElement) {\n  // 这就是元素节点，做相应处理\n  processChild(currentChildElement);\n  if (currentChildElement === parentElement.lastElementChild) {\n    break;\n  }\n  currentChildElement = currentChildElement.nextElementSibling;\n}\n")])])]),v("p",[e._v("IE9 及以上版本，以及所有现代浏览器都支持 Element Traversal 属性。")]),e._v(" "),v("h2",{attrs:{id:"_15-3-html5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-html5"}},[e._v("#")]),e._v(" 15.3 　 HTML5")]),e._v(" "),v("p",[e._v("HTML5 代表着与以前的 HTML 截然不同的方向。在所有以前的 HTML 规范中，从未出现过描述 JavaScript 接口的情形，HTML 就是一个纯标记语言。JavaScript 绑定的事，一概交给 DOM 规范去定义。")]),e._v(" "),v("p",[e._v("然而，HTML5 规范却包含了与标记相关的大量 JavaScript API 定义。其中有的 API 与 DOM 重合，定义了浏览器应该提供的 DOM 扩展。")]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("注意")]),e._v("　因为 HTML5 覆盖的范围极其广泛，所以本节主要讨论其影响所有 DOM 节点的部分。HTML5 的其他部分将在本书后面的相关章节中再讨论。")])]),e._v(" "),v("h3",{attrs:{id:"_15-3-1-css-类扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-1-css-类扩展"}},[e._v("#")]),e._v(" 15.3.1 　 CSS 类扩展")]),e._v(" "),v("p",[e._v("自 HTML4 被广泛采用以来，Web 开发中一个主要的变化是"),v("code",[e._v("class")]),e._v("属性用得越来越多，其用处是为元素添加样式以及语义信息。自然地，JavaScript 与 CSS 类的交互就增多了，包括动态修改类名，以及根据给定的一个或一组类名查询元素，等等。为了适应开发者和他们对"),v("code",[e._v("class")]),e._v("属性的认可，HTML5 增加了一些特性以方便使用 CSS 类。")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("getElementsByClassName()")])]),e._v(" "),v("p",[v("code",[e._v("getElementsByClassName()")]),e._v("是 HTML5 新增的最受欢迎的一个方法，暴露在"),v("code",[e._v("document")]),e._v("对象和所有 HTML 元素上。 这个方法脱胎于基于原有 DOM 特性实现该功能的 JavaScript 库，提供了性能高好的原生实现。")]),e._v(" "),v("p",[v("code",[e._v("getElementsByClassName()")]),e._v("方法接收一个参数，即包含一个或多个类名的字符串，返回类名中包含相应类的元素的"),v("code",[e._v("NodeList")]),e._v("。如果提供了多个类名，则顺序无关紧要。下面是几个示例：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 取得所有类名中包含"username"和"current"元素\n// 这两个类名的顺序无关紧要\nlet allCurrentUsernames = document.getElementsByClassName("username current");\n// 取得ID为"myDiv"的元素子树中所有包含"selected"类的元素\nlet selected = document.getElementById("myDiv").getElementsByClassName("selected");\n')])])]),v("p",[e._v("这个方法只会返回以调用它的对象为根元素的子树中所有匹配的元素。在"),v("code",[e._v("document")]),e._v("上调用"),v("code",[e._v("getElementsByClassName()")]),e._v("返回文档中所有匹配的元素，而在特定元素上调用"),v("code",[e._v("getElementsByClassName()")]),e._v("则返回该元素后代中匹配的元素。")]),e._v(" "),v("p",[e._v("如果要给包含特定类（而不是特定 ID 或标签）的元素添加事件处理程序，使用这个方法会很方便。不过要记住，因为返回值是"),v("code",[e._v("NodeList")]),e._v("，所以使用这个方法会遇到跟使用"),v("code",[e._v("getElementsByTagName()")]),e._v("和其他返回"),v("code",[e._v("NodeList")]),e._v("对象的 DOM 方法同样的问题。")]),e._v(" "),v("p",[e._v("IE9 及以上版本，以及所有现代浏览器都支持"),v("code",[e._v("getElementsByClassName()")]),e._v("方法。")])])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[v("strong",[e._v("classList 属性")])]),e._v(" "),v("p",[e._v("要操作类名，可以通过"),v("code",[e._v("className")]),e._v("属性实现添加、删除和替换。但"),v("code",[e._v("className")]),e._v("是一个字符串，所以每次操作之后都需要重新设置这个值才能生效，即使只改动了部分字符串也一样。以下面的 HTML 代码为例：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div class="bd user disabled">...</div>\n')])])]),v("p",[e._v("这个"),v("code",[e._v("<div>")]),e._v("元素有 3 个类名。要想删除其中一个，就得先把"),v("code",[e._v("className")]),e._v("拆开，删除不想要的那个，再把包含剩余类的字符串设置回去。比如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 要删除"user"类\nlet targetClass = "user";\n\n// 把类名拆成数组\nlet classNames = div.className.split(/\\s+/);\n\n// 找到要删除类名的索引\nlet idx = classNames.indexOf(targetClass);\n\n// 如果有则删除\nif (idx > -1) {\n  classNames.splice(i,1);\n}\n\n// 重新设置类名\ndiv.className = classNames.join(" ");\n')])])]),v("p",[e._v("这就是从"),v("code",[e._v("<div>")]),e._v("元素的类名中删除"),v("code",[e._v('"user"')]),e._v("类要写的代码。替换类名和检测类名也要涉及同样的算法。添加类名只涉及字符串拼接，但必须先检查一下以确保不会重复添加相同的类名。很多 JavaScript 库为这些操作实现了便利方法。")]),e._v(" "),v("p",[e._v("HTML5 通过给所有元素增加"),v("code",[e._v("classList")]),e._v("属性为这些操作提供了更简单也更安全的实现方式。"),v("code",[e._v("classList")]),e._v("是一个新的集合类型"),v("code",[e._v("DOMTokenList")]),e._v("的实例。与其他 DOM 集合类型一样，"),v("code",[e._v("DOMTokenList")]),e._v("也有"),v("code",[e._v("length")]),e._v("属性表示自己包含多少项，也可以通过"),v("code",[e._v("item()")]),e._v("或中括号取得个别的元素。此外，"),v("code",[e._v("DOMTokenList")]),e._v("还增加了以下方法。")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("add(*value*)")]),e._v("，向类名列表中添加指定的字符串值"),v("code",[e._v("value")]),e._v("。如果这个值已经存在，则什么也不做。")]),e._v(" "),v("li",[v("code",[e._v("contains(*value*)")]),e._v("，返回布尔值，表示给定的"),v("code",[e._v("value")]),e._v("是否存在。")]),e._v(" "),v("li",[v("code",[e._v("remove(*value*)")]),e._v("，从类名列表中删除指定的字符串值"),v("code",[e._v("value")]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("toggle(*value*)")]),e._v("，如果类名列表中已经存在指定的"),v("code",[e._v("value")]),e._v("，则删除；如果不存在，则添加。")])]),e._v(" "),v("p",[e._v("这样一来，前面的例子中那么多行代码就可以简化成下面的一行：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.classList.remove("user");\n')])])]),v("p",[e._v("这行代码可以在不影响其他类名的情况下完成删除。其他方法同样极大地简化了操作类名的复杂性，如下面的例子所示：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 删除"disabled"类\ndiv.classList.remove("disabled");\n\n// 添加"current"类\ndiv.classList.add("current");\n\n// 切换"user"类\ndiv.classList.toggle("user");\n\n// 检测类名\nif (div.classList.contains("bd") && !div.classList.contains("disabled")){\n  // 执行操作\n)\n\n// 迭代类名\nfor (let class of div.classList){\n  doStuff(class);\n}\n')])])]),v("p",[e._v("添加了"),v("code",[e._v("classList")]),e._v("属性之后，除非是完全删除或完全重写元素的"),v("code",[e._v("class")]),e._v("属性，否则"),v("code",[e._v("className")]),e._v("属性就用不到了。IE10 及以上版本（部分）和其他主流浏览器（完全）实现了"),v("code",[e._v("classList")]),e._v("属性。")])])]),e._v(" "),v("h3",{attrs:{id:"_15-3-2-焦点管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-2-焦点管理"}},[e._v("#")]),e._v(" 15.3.2 　焦点管理")]),e._v(" "),v("p",[e._v("HTML5 增加了辅助 DOM 焦点管理的功能。首先是"),v("code",[e._v("document.activeElement")]),e._v("，始终包含当前拥有焦点的 DOM 元素。页面加载时，可以通过用户输入（按 Tab 键或代码中使用"),v("code",[e._v("focus()")]),e._v("方法）让某个元素自动获得焦点。例如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('let button = document.getElementById("myButton");\nbutton.focus();\nconsole.log(document.activeElement === button); // true\n')])])]),v("p",[e._v("默认情况下，"),v("code",[e._v("document.activeElement")]),e._v("在页面刚加载完之后会设置为"),v("code",[e._v("document.body")]),e._v("。而在页面完全加载之前，"),v("code",[e._v("document.activeElement")]),e._v("的值为"),v("code",[e._v("null")]),e._v("。")]),e._v(" "),v("p",[e._v("其次是"),v("code",[e._v("document.hasFocus()")]),e._v("方法，该方法返回布尔值，表示文档是否拥有焦点：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('let button = document.getElementById("myButton");\nbutton.focus();\nconsole.log(document.hasFocus()); // true\n')])])]),v("p",[e._v("确定文档是否获得了焦点，就可以帮助确定用户是否在操作页面。")]),e._v(" "),v("p",[e._v("第一个方法可以用来查询文档，确定哪个元素拥有焦点，第二个方法可以查询文档是否获得了焦点，而这对于保证 Web 应用程序的无障碍使用是非常重要的。无障碍 Web 应用程序的一个重要方面就是焦点管理，而能够确定哪个元素当前拥有焦点（相比于之前的猜测）是一个很大的进步。")]),e._v(" "),v("h3",{attrs:{id:"_15-3-3-htmldocument扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-3-htmldocument扩展"}},[e._v("#")]),e._v(" 15.3.3 　"),v("code",[e._v("HTMLDocument")]),e._v("扩展")]),e._v(" "),v("p",[e._v("HTML5 扩展了"),v("code",[e._v("HTMLDocument")]),e._v("类型，增加了更多功能。与其他 HTML5 定义的 DOM 扩展一样，这些变化同样基于所有浏览器事实上都已经支持的专有扩展。为此，即使这些扩展的标准化相对较晚，很多浏览器也早就实现了相应的功能。")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("readyState 属性")])]),e._v(" "),v("p",[v("code",[e._v("readyState")]),e._v("是 IE4 最早添加到"),v("code",[e._v("document")]),e._v("对象上的属性，后来其他浏览器也都依葫芦画瓢地支持这个属性。最终，HTML5 将这个属性写进了标准。"),v("code",[e._v("document.readyState")]),e._v("属性有两个可能的值：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("loading")]),e._v("，表示文档正在加载；")]),e._v(" "),v("li",[v("code",[e._v("complete")]),e._v("，表示文档加载完成。")])]),e._v(" "),v("p",[e._v("实际开发中，最好是把"),v("code",[e._v("document.readState")]),e._v("当成一个指示器，以判断文档是否加载完毕。在这个属性得到广泛支持以前，通常要依赖"),v("code",[e._v("onload")]),e._v("事件处理程序设置一个标记，表示文档加载完了。这个属性的基本用法如下：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('if (document.readyState == "complete"){\n  // 执行操作\n}\n')])])])])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[v("strong",[e._v("compatMode 属性")])]),e._v(" "),v("p",[e._v("自从 IE6 提供了以标准或混杂模式渲染页面的能力之后，检测页面渲染模式成为一个必要的需求。IE 为"),v("code",[e._v("document")]),e._v("添加了"),v("code",[e._v("compatMode")]),e._v("属性，这个属性唯一的任务是指示浏览器当前处于什么渲染模式。如下面的例子所示，标准模式下"),v("code",[e._v("document.compatMode")]),e._v("的值是"),v("code",[e._v('"CSS1Compat"')]),e._v("，而在混杂模式下，"),v("code",[e._v("document.compatMode")]),e._v("的值是"),v("code",[e._v('"BackCompat"')]),e._v("：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('if (document.compatMode == "CSS1Compat"){\n  console.log("Standards mode");\n} else {\n  console.log("Quirks mode");\n}\n')])])]),v("p",[e._v("HTML5 最终也把"),v("code",[e._v("compatMode")]),e._v("属性的实现标准化了。")])])]),e._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("p",[v("strong",[e._v("head 属性")])]),e._v(" "),v("p",[e._v("作为对"),v("code",[e._v("document.body")]),e._v("（指向文档的"),v("code",[e._v("<body>")]),e._v("元素）的补充，HTML5 增加了"),v("code",[e._v("document.head")]),e._v("属性，指向文档的"),v("code",[e._v("<head>")]),e._v("元素。可以像下面这样直接取得"),v("code",[e._v("<head>")]),e._v("元素：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let head = document.head;\n")])])])])]),e._v(" "),v("h3",{attrs:{id:"_15-3-4-字符集属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-4-字符集属性"}},[e._v("#")]),e._v(" 15.3.4 　字符集属性")]),e._v(" "),v("p",[e._v("HTML5 增加了几个与文档字符集有关的新属性。其中，"),v("code",[e._v("characterSet")]),e._v("属性表示文档实际使用的字符集，也可以用来指定新字符集。这个属性的默认值是"),v("code",[e._v('"UTF-16"')]),e._v("，但可以通过"),v("code",[e._v("<meta>")]),e._v("元素或响应头，以及新增的"),v("code",[e._v("characterSeet")]),e._v("属性来修改。下面是一个例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('console.log(document.characterSet); // "UTF-16"\ndocument.characterSet = "UTF-8";\n')])])]),v("h3",{attrs:{id:"_15-3-5-自定义数据属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-5-自定义数据属性"}},[e._v("#")]),e._v(" 15.3.5 　自定义数据属性")]),e._v(" "),v("p",[e._v("HTML5 允许给元素指定非标准的属性，但要使用前缀"),v("code",[e._v("data-")]),e._v("以便告诉浏览器，这些属性既不包含与渲染有关的信息，也不包含元素的语义信息。除了前缀，自定义属性对命名是没有限制的，"),v("code",[e._v("data-")]),e._v("后面跟什么都可以。下面是一个例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div id="myDiv" data-appId="12345" data-myname="Nicholas"></div>\n')])])]),v("p",[e._v("定义了自定义数据属性后，可以通过元素的"),v("code",[e._v("dataset")]),e._v("属性来访问。"),v("code",[e._v("dataset")]),e._v("属性是一个"),v("code",[e._v("DOMStringMap")]),e._v("的实例，包含一组键/值对映射。元素的每个"),v("code",[e._v("data-name")]),e._v("属性在"),v("code",[e._v("dataset")]),e._v("中都可以通过"),v("code",[e._v("data-")]),e._v("后面的字符串作为键来访问（例如，属性"),v("code",[e._v("data-myname")]),e._v("、"),v("code",[e._v("data-myName")]),e._v("可以通过"),v("code",[e._v("myname")]),e._v("访问，但要注意"),v("code",[e._v("data-my-name")]),e._v("、"),v("code",[e._v("data-My-Name")]),e._v("要通过"),v("code",[e._v("myName")]),e._v("来访问）。下面是一个使用自定义数据属性的例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 本例中使用的方法仅用于示范\n\nlet div = document.getElementById("myDiv");\n\n// 取得自定义数据属性的值\nlet appId = div.dataset.appId;\nlet myName = div.dataset.myname;\n\n// 设置自定义数据属性的值\ndiv.dataset.appId = 23456;\ndiv.dataset.myname = "Michael";\n\n// 有"myname"吗？\nif (div.dataset.myname){\n  console.log(\'Hello, ${div.dataset.myname}\');\n}\n')])])]),v("p",[e._v("自定义数据属性非常适合需要给元素附加某些数据的场景，比如链接追踪和在聚合应用程序中标识页面的不同部分。另外，单页应用程序框架也非常多地使用了自定义数据属性。")]),e._v(" "),v("h3",{attrs:{id:"_15-3-6-插入标记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-6-插入标记"}},[e._v("#")]),e._v(" 15.3.6 　插入标记")]),e._v(" "),v("p",[e._v("DOM 虽然已经为操纵节点提供了很多 API，但向文档中一次性插入大量 HTML 时还是比较麻烦。相比先创建一堆节点，再把它们以正确的顺序连接起来，直接插入一个 HTML 字符串要简单（快速）得多。HTML5 已经通过以下 DOM 扩展将这种能力标准化了。")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("innerHTML 属性")])]),e._v(" "),v("p",[e._v("在读取"),v("code",[e._v("innerHTML")]),e._v("属性时，会返回元素所有后代的 HTML 字符串，包括元素、注释和文本节点。而在写入"),v("code",[e._v("innerHTML")]),e._v("时，则会根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点。比如下面的 HTML 代码：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div id="content">\n  <p>This is a <strong>paragraph</strong> with a list following it.</p>\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n</div>\n')])])]),v("p",[e._v("对于这里的"),v("code",[e._v("<div>")]),e._v("元素而言，其"),v("code",[e._v("innerHTML")]),e._v("属性会返回以下字符串：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("<p>This is a <strong>paragraph</strong> with a list following it.</p>\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>\n")])])]),v("p",[e._v("实际返回的文本内容会因浏览器而不同。IE 和 Opera 会把所有元素标签转换为大写，而 Safari、Chrome 和 Firefox 则会按照文档源代码的格式返回，包含空格和缩进。因此不要指望不同浏览器的"),v("code",[e._v("innerHTML")]),e._v("会返回完全一样的值。")]),e._v(" "),v("p",[e._v("在写入模式下，赋给"),v("code",[e._v("innerHTML")]),e._v("属性的值会被解析为 DOM 子树，并替代元素之前的所有节点。因为所赋的值默认为 HTML，所以其中的所有标签都会以浏览器处理 HTML 的方式转换为元素（同样，转换结果也会因浏览器不同而不同）。如果赋值中不包含任何 HTML 标签，则直接生成一个文本节点，如下所示：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.innerHTML = "Hello world!";\n')])])]),v("p",[e._v("因为浏览器会解析设置的值，所以给"),v("code",[e._v("innerHTML")]),e._v("设置包含 HTML 的字符串时，结果会大不一样。来看下面的例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.innerHTML = "Hello & welcome, <b>\\"reader\\"!</b>";\n')])])]),v("p",[e._v("这个操作的结果相当于：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div id="content">Hello &amp; welcome, <b>&quot;reader&quot;!</b></div>\n')])])]),v("p",[e._v("设置完"),v("code",[e._v("innerHTML")]),e._v("，马上就可以像访问其他节点一样访问这些新节点。")]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("注意")]),e._v("　设置"),v("code",[e._v("innerHTML")]),e._v("会导致浏览器将 HTML 字符串解析为相应的 DOM 树。这意味着设置"),v("code",[e._v("innerHTML")]),e._v("属性后马上再读出来会得到不同的字符串。这是因为返回的字符串是将原始字符串对应的 DOM 子树序列化之后的结果。")])])])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[v("strong",[e._v("旧 IE 中的 innerHTML")])]),e._v(" "),v("p",[e._v("在所有现代浏览器中，通过"),v("code",[e._v("innerHTML")]),e._v("插入的"),v("code",[e._v("<script>")]),e._v("标签是不会执行的。而在 IE8 及之前的版本中，只要这样插入的"),v("code",[e._v("<script>")]),e._v("元素指定了"),v("code",[e._v("defer")]),e._v("属性，且"),v("code",[e._v("<script>")]),e._v("之前是“受控元素”（scoped element），那就是可以执行的。"),v("code",[e._v("<script>")]),e._v("元素与"),v("code",[e._v("<style>")]),e._v("或注释一样，都是“非受控元素”（NoScope element），也就是在页面上看不到它们。IE 会把"),v("code",[e._v("innerHTML")]),e._v("中从非受控元素开始的内容都删掉，也就是说下面的例子是行不通的：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("// 行不通\ndiv.innerHTML = \"<script defer>console.log('hi');<\\/script>\";\n")])])]),v("p",[e._v("在这个例子中，"),v("code",[e._v("innerHTML")]),e._v("字符串以一个非受控元素开始，因此整个字符串都会被清空。为了达到目的，必须在"),v("code",[e._v("<script>")]),e._v("前面加上一个受控元素，例如文本节点或没有结束标签的元素（如"),v("code",[e._v("<input>")]),e._v("）。因此，下面的代码就是可行的：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 以下都可行\ndiv.innerHTML = "_<script defer>console.log(\'hi\');<\\/script>";\ndiv.innerHTML = "<div>&nbsp;</div><script defer>console.log(\'hi\');<\\/script>";\ndiv.innerHTML = "<input type=\\"hidden\\"><script defer>console.\nlog(\'hi\');<\\/script>";\n')])])]),v("p",[e._v("第一行会在"),v("code",[e._v("<script>")]),e._v("元素前面插入一个文本节点。为了不影响页面排版，可能稍后需要删掉这个文本节点。第二行与之类似，使用了包含空格的"),v("code",[e._v("<div>")]),e._v("元素。空"),v("code",[e._v("<div>")]),e._v("是不行的，必须包含一点内容，以强制创建一个文本节点。同样，这个"),v("code",[e._v("<div>")]),e._v("元素可能也需要事后删除，以免影响页面外观。第三行使用了一个隐藏的"),v("code",[e._v("<input>")]),e._v("字段来达成同样的目的。因为这个字段不影响页面布局，所以应该是最理想的方案。")]),e._v(" "),v("p",[e._v("在 IE 中，通过"),v("code",[e._v("innerHTML")]),e._v("插入"),v("code",[e._v("<style>")]),e._v("也会有类似的问题。多数浏览器支持使用"),v("code",[e._v("innerHTML")]),e._v("插入"),v("code",[e._v("<style>")]),e._v("元素：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.innerHTML = "<style type=\\"text/css\\">body {background-color: red; }</style>";\n')])])]),v("p",[e._v("但在 IE8 及之前的版本中，"),v("code",[e._v("<style>")]),e._v("也被认为是非受控元素，所以必须前置一个受控元素：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.innerHTML = "_<style type=\\"text/css\\">body {background-color: red; }</style>";\ndiv.removeChild(div.firstChild);\n')])])]),v("blockquote",[v("p",[v("strong",[e._v("注意")]),e._v("　 Firefox 在内容类型为"),v("code",[e._v("application")]),e._v("/"),v("code",[e._v("xhtml+xml")]),e._v("的 XHTML 文档中对"),v("code",[e._v("innerHTML")]),e._v("更加严格。在 XHTML 文档中使用"),v("code",[e._v("innerHTML")]),e._v("，必须使用格式良好的 XHTML 代码。否则，在 Firefox 中会静默失败。")])])])]),e._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("p",[v("strong",[e._v("outerHTML 属性")])]),e._v(" "),v("p",[e._v("读取"),v("code",[e._v("outerHTML")]),e._v("属性时，会返回调用它的元素（及所有后代元素）的 HTML 字符串。在写入"),v("code",[e._v("outerHTML")]),e._v("属性时，调用它的元素会被传入的 HTML 字符串经解释之后生成的 DOM 子树取代。比如下面的 HTML 代码：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div id="content">\n  <p>This is a <strong>paragraph</strong> with a list following it.</p>\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n</div>\n')])])]),v("p",[e._v("在这个"),v("code",[e._v("<div>")]),e._v("元素上调用"),v("code",[e._v("outerHTML")]),e._v("会返回相同的字符串，包括"),v("code",[e._v("<div>")]),e._v("本身。注意，浏览器因解析和解释 HTML 代码的机制不同，返回的字符串也可能不同。（跟"),v("code",[e._v("innerHTML")]),e._v("的情况是一样的。）")]),e._v(" "),v("p",[e._v("如果使用"),v("code",[e._v("outerHTML")]),e._v("设置 HTML，比如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.outerHTML = "<p>This is a paragraph.</p>";\n')])])]),v("p",[e._v("则会得到与执行以下脚本相同的结果：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('let p = document.createElement("p");\np.appendChild(document.createTextNode("This is a paragraph."));\ndiv.parentNode.replaceChild(p, div);\n')])])]),v("p",[e._v("新的"),v("code",[e._v("<p>")]),e._v("元素会取代 DOM 树中原来的"),v("code",[e._v("<div>")]),e._v("元素。")])])]),e._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[v("p",[v("strong",[e._v("insertAdjacentHTML()与 insertAdjacentText()")])]),e._v(" "),v("p",[e._v("关于插入标签的最后两个新增方法是"),v("code",[e._v("insertAdjacentHTML()")]),e._v("和"),v("code",[e._v("insertAdjacentText()")]),e._v("。这两个方法最早源自 IE，它们都接收两个参数：要插入标记的位置和要插入的 HTML 或文本。第一个参数必须是下列值中的一个：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v('"beforebegin"')]),e._v("，插入当前元素前面，作为前一个同胞节点；")]),e._v(" "),v("li",[v("code",[e._v('"afterbegin"')]),e._v("，插入当前元素内部，作为新的子节点或放在第一个子节点前面；")]),e._v(" "),v("li",[v("code",[e._v('"beforeend"')]),e._v("，插入当前元素内部，作为新的子节点或放在最后一个子节点前面；")]),e._v(" "),v("li",[v("code",[e._v('"afterend"')]),e._v("，插入当前元素后面，作为下一个同胞节点。")])]),e._v(" "),v("p",[e._v("注意这几个值是不区分大小写的。第二个参数会作为 HTML 字符串解析（与"),v("code",[e._v("innerHTML")]),e._v("和"),v("code",[e._v("outerHTML")]),e._v("相同）或者作为纯文本解析（与"),v("code",[e._v("innerText")]),e._v("和"),v("code",[e._v("outerText")]),e._v("相同）。如果是 HTML，则会在解析出错时抛出错误。下面展示了基本用法"),v("strong",[e._v("1")]),e._v("：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 作为前一个同胞节点插入\nelement.insertAdjacentHTML("beforebegin", "<p>Hello world!</p>");\nelement.insertAdjacentText("beforebegin", "Hello world!");\n\n// 作为第一个子节点插入\nelement.insertAdjacentHTML("afterbegin", "<p>Hello world!</p>");\nelement.insertAdjacentText("afterbegin", "Hello world!");\n\n// 作为最后一个子节点插入\nelement.insertAdjacentHTML("beforeend", "<p>Hello world!</p>");\nelement.insertAdjacentText("beforeend", "Hello world!");\n\n// 作为下一个同胞节点插入\nelement.insertAdjacentHTML("afterend", "<p>Hello world!</p>"); element.\ninsertAdjacentText("afterend", "Hello world!");\n')])])])])]),e._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[v("p",[v("strong",[e._v("内存与性能问题")])]),e._v(" "),v("p",[e._v("使用本节介绍的方法替换子节点可能在浏览器（特别是 IE）中导致内存问题。比如，如果被移除的子树元素中之前有关联的事件处理程序或其他 JavaScript 对象（作为元素的属性），那它们之间的绑定关系会滞留在内存中。如果这种替换操作频繁发生，页面的内存占用就会持续攀升。在使用"),v("code",[e._v("innerHTML")]),e._v("、"),v("code",[e._v("outerHTML")]),e._v("和"),v("code",[e._v("insertAdjacentHTML()")]),e._v("之前，最好手动删除要被替换的元素上关联的事件处理程序和 JavaScript 对象。")]),e._v(" "),v("p",[e._v("使用这些属性当然有其方便之处，特别是"),v("code",[e._v("innerHTML")]),e._v("。一般来讲，插入大量的新 HTML 使用"),v("code",[e._v("innerHTML")]),e._v("比使用多次 DOM 操作创建节点再插入来得更便捷。这是因为 HTML 解析器会解析设置给"),v("code",[e._v("innerHTML")]),e._v("（或"),v("code",[e._v("outerHTML")]),e._v("）的值。解析器在浏览器中是底层代码（通常是 C++代码），比 JavaScript 快得多。不过，HTML 解析器的构建与解构也不是没有代价，因此最好限制使用"),v("code",[e._v("innerHTML")]),e._v("和"),v("code",[e._v("outerHTML")]),e._v("的次数。比如，下面的代码使用"),v("code",[e._v("innerHTML")]),e._v("创建了一些列表项：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("for (let value of values){\n  ul.innerHTML += '<li>${value}</li>';  // 别这样做！\n}\n")])])]),v("p",[e._v("这段代码效率低，因为每次迭代都要设置一次"),v("code",[e._v("innerHTML")]),e._v("。不仅如此，每次循环还要先读取"),v("code",[e._v("innerHTML")]),e._v("，也就是说循环一次要访问两次"),v("code",[e._v("innerHTML")]),e._v("。为此，最好通过循环先构建一个独立的字符串，最后再一次性把生成的字符串赋值给"),v("code",[e._v("innerHTML")]),e._v("，比如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let itemsHtml = \"\";\nfor (let value of values){\n  itemsHtml += '<li>${value}</li>';\n}\nul.innerHTML = itemsHtml;\n")])])]),v("p",[e._v("这样修改之后效率就高多了，因为只有对"),v("code",[e._v("innerHTML")]),e._v("的一次赋值。当然，像下面这样一行代码也可以搞定：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("ul.innerHTML = values.map(value => '<li>${value}</li>').join('');\n")])])])])]),e._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[v("p",[v("strong",[e._v("跨站点脚本")])]),e._v(" "),v("p",[e._v("尽管"),v("code",[e._v("innerHTML")]),e._v("不会执行自己创建的"),v("code",[e._v("<script>")]),e._v("标签，但仍然向恶意用户暴露了很大的攻击面，因为通过它可以毫不费力地创建元素并执行"),v("code",[e._v("onclick")]),e._v("之类的属性。")]),e._v(" "),v("p",[e._v("如果页面中要使用用户提供的信息，则不建议使用"),v("code",[e._v("innerHTML")]),e._v("。与使用"),v("code",[e._v("innerHTML")]),e._v("获得的方便相比，防止 XSS 攻击更让人头疼。此时一定要隔离要插入的数据，在插入页面前必须毫不犹豫地使用相关的库对它们进行转义。")])])]),e._v(" "),v("p",[v("strong",[e._v("1")]),e._v("假设当前元素是"),v("code",[e._v("<p>Hello world!</p>")]),e._v("，则"),v("code",[e._v('"beforebegin"')]),e._v("和"),v("code",[e._v('"afterbegin"')]),e._v("中的"),v("code",[e._v('"begin"')]),e._v("指开始标签"),v("code",[e._v("<p>")]),e._v("；而"),v("code",[e._v('"afterend"')]),e._v("和"),v("code",[e._v('"beforeend"')]),e._v("中的"),v("code",[e._v('"end"')]),e._v("指结束标签"),v("code",[e._v("</p>")]),e._v("。——译者注")]),e._v(" "),v("h3",{attrs:{id:"_15-3-7-scrollintoview"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-7-scrollintoview"}},[e._v("#")]),e._v(" 15.3.7 　"),v("code",[e._v("scrollIntoView()")])]),e._v(" "),v("p",[e._v("DOM 规范中没有涉及的一个问题是如何滚动页面中的某个区域。为填充这方面的缺失，不同浏览器实现了不同的控制滚动的方式。在所有这些专有方法中，HTML5 选择了标准化"),v("code",[e._v("scrollIntoView()")]),e._v("。")]),e._v(" "),v("p",[v("code",[e._v("scrollIntoView()")]),e._v("方法存在于所有 HTML 元素上，可以滚动浏览器窗口或容器元素以便包含元素进入视口。这个方法的参数如下：")]),e._v(" "),v("ul",[v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("alignToTop\n")])])]),v("p",[e._v("是一个布尔值。")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("true")]),e._v("：窗口滚动后元素的顶部与视口顶部对齐。")]),e._v(" "),v("li",[v("code",[e._v("false")]),e._v("：窗口滚动后元素的底部与视口底部对齐。")])])]),e._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("scrollIntoViewOptions\n")])])]),v("p",[e._v("是一个选项对象。")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("behavior")]),e._v("：定义过渡动画，可取的值为"),v("code",[e._v('"smooth"')]),e._v("和"),v("code",[e._v('"auto"')]),e._v("，默认为"),v("code",[e._v('"auto"')]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("block")]),e._v("：定义垂直方向的对齐，可取的值为"),v("code",[e._v('"start"')]),e._v("、"),v("code",[e._v('"center"')]),e._v("、"),v("code",[e._v('"end"')]),e._v("和"),v("code",[e._v('"nearest"')]),e._v("，默认为 "),v("code",[e._v('"start"')]),e._v("。")]),e._v(" "),v("li",[v("code",[e._v("inline")]),e._v("：定义水平方向的对齐，可取的值为"),v("code",[e._v('"start"')]),e._v("、"),v("code",[e._v('"center"')]),e._v("、"),v("code",[e._v('"end"')]),e._v("和"),v("code",[e._v('"nearest"')]),e._v("，默认为 "),v("code",[e._v('"nearest"')]),e._v("。")])])]),e._v(" "),v("li",[v("p",[e._v("不传参数等同于"),v("code",[e._v("alignToTop")]),e._v("为"),v("code",[e._v("true")]),e._v("。")])])]),e._v(" "),v("p",[e._v("来看几个例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("// 确保元素可见\ndocument.forms[0].scrollIntoView();\n\n// 同上\ndocument.forms[0].scrollIntoView(true);\ndocument.forms[0].scrollIntoView({block: 'start'});\n\n// 尝试将元素平滑地滚入视口\ndocument.forms[0].scrollIntoView({behavior: 'smooth', block: 'start'});\n")])])]),v("p",[e._v("这个方法可以用来在页面上发生某个事件时引起用户关注。把焦点设置到一个元素上也会导致浏览器将元素滚动到可见位置。")]),e._v(" "),v("h2",{attrs:{id:"_15-4-专有扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-专有扩展"}},[e._v("#")]),e._v(" 15.4 　专有扩展")]),e._v(" "),v("p",[e._v("尽管所有浏览器厂商都理解遵循标准的重要性，但它们也都有为弥补功能缺失而为 DOM 添加专有扩展的历史。虽然这表面上看是一件坏事，但专有扩展也为开发者提供了很多重要功能，而这些功能后来则有可能被标准化，比如进入 HTML5。")]),e._v(" "),v("p",[e._v("除了已经标准化的，各家浏览器还有很多未被标准化的专有扩展。这并不意味着它们将来不会被纳入标准，只不过在本书编写时，它们还只是由部分浏览器专有和采用。")]),e._v(" "),v("h3",{attrs:{id:"_15-4-1-children属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-1-children属性"}},[e._v("#")]),e._v(" 15.4.1 　"),v("code",[e._v("children")]),e._v("属性")]),e._v(" "),v("p",[e._v("IE9 之前的版本与其他浏览器在处理空白文本节点上的差异导致了"),v("code",[e._v("children")]),e._v("属性的出现。"),v("code",[e._v("children")]),e._v("属性是一个"),v("code",[e._v("HTMLCollection")]),e._v("，只包含元素的"),v("code",[e._v("Element")]),e._v("类型的子节点。如果元素的子节点类型全部是元素类型，那"),v("code",[e._v("children")]),e._v("和"),v("code",[e._v("childNodes")]),e._v("中包含的节点应该是一样的。可以像下面这样使用"),v("code",[e._v("children")]),e._v("属性：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let childCount = element.children.length;\nlet firstChild = element.children[0];\n")])])]),v("h3",{attrs:{id:"_15-4-2-contains-方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-2-contains-方法"}},[e._v("#")]),e._v(" 15.4.2 　"),v("code",[e._v("contains()")]),e._v("方法")]),e._v(" "),v("p",[e._v("DOM 编程中经常需要确定一个元素是不是另一个元素的后代。IE 首先引入了"),v("code",[e._v("contains()")]),e._v("方法，让开发者可以在不遍历 DOM 的情况下获取这个信息。"),v("code",[e._v("contains()")]),e._v("方法应该在要搜索的祖先元素上调用，参数是待确定的目标节点。")]),e._v(" "),v("p",[e._v("如果目标节点是被搜索节点的后代，"),v("code",[e._v("contains()")]),e._v("返回"),v("code",[e._v("true")]),e._v("，否则返回"),v("code",[e._v("false")]),e._v("。下面看一个例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("console.log(document.documentElement.contains(document.body)); // true\n")])])]),v("p",[e._v("这个例子测试"),v("code",[e._v("<html>")]),e._v("元素中是否包含"),v("code",[e._v("<body>")]),e._v("元素，在格式正确的 HTML 中会返回"),v("code",[e._v("true")]),e._v("。")]),e._v(" "),v("p",[e._v("另外，使用 DOM Level 3 的"),v("code",[e._v("compareDocumentPosition()")]),e._v("方法也可以确定节点间的关系。这个方法会返回表示两个节点关系的位掩码。下表给出了这些位掩码的说明。")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[e._v("掩码")]),e._v(" "),v("th",{staticStyle:{"text-align":"left"}},[e._v("节点关系")])])]),e._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("0x1")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("断开（传入的节点不在文档中）")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("0x2")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("领先（传入的节点在 DOM 树中位于参考节点之前）")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("0x4")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("随后（传入的节点在 DOM 树中位于参考节点之后）")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("0x8")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("包含（传入的节点是参考节点的祖先）")])]),e._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[e._v("0x10")]),e._v(" "),v("td",{staticStyle:{"text-align":"left"}},[e._v("被包含（传入的节点是参考节点的后代）")])])])]),e._v(" "),v("p",[e._v("要模仿"),v("code",[e._v("contains()")]),e._v("方法，就需要用到掩码 16（0x10）。"),v("code",[e._v("compareDocumentPosition()")]),e._v("方法的结果可以通过按位与来确定参考节点是否包含传入的节点，比如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("let result = document.documentElement.compareDocumentPosition(document.body);\nconsole.log(!!(result & 0x10));\n")])])]),v("p",[e._v("以上代码执行后 result 的值为 20（或 0x14，其中 0x4 表示“随后”，加上 0x10“被包含”）。对"),v("code",[e._v("result")]),e._v("和 0x10 应用按位与会返回非零值，而两个叹号将这个值转换成对应的布尔值。")]),e._v(" "),v("p",[e._v("IE9 及之后的版本，以及所有现代浏览器都支持"),v("code",[e._v("contains()")]),e._v("和"),v("code",[e._v("compareDocumentPosition()")]),e._v("方法。")]),e._v(" "),v("h3",{attrs:{id:"_15-4-3-插入标记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-3-插入标记"}},[e._v("#")]),e._v(" 15.4.3 　插入标记")]),e._v(" "),v("p",[e._v("HTML5 将 IE 发明的"),v("code",[e._v("innerHTML")]),e._v("和"),v("code",[e._v("outerHTML")]),e._v("纳入了标准，但还有两个属性没有入选。这两个剩下的属性是"),v("code",[e._v("innerText")]),e._v("和"),v("code",[e._v("outerText")]),e._v("。")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("innerText 属性")])]),e._v(" "),v("p",[v("code",[e._v("innerText")]),e._v("属性对应元素中包含的所有文本内容，无论文本在子树中哪个层级。在用于读取值时，"),v("code",[e._v("innerText")]),e._v("会按照深度优先的顺序将子树中所有文本节点的值拼接起来。在用于写入值时，"),v("code",[e._v("innerText")]),e._v("会移除元素的所有后代并插入一个包含该值的文本节点。来看下面的 HTML 代码：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div id="content">\n  <p>This is a <strong>paragraph</strong> with a list following it.</p>\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n</div>\n')])])]),v("p",[e._v("对这个例子中的"),v("code",[e._v("<div>")]),e._v("而言，"),v("code",[e._v("innerText")]),e._v("属性会返回以下字符串：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("This is a paragraph with a list following it.\nItem 1\nItem 2\nItem 3\n")])])]),v("p",[e._v("注意不同浏览器对待空格的方式不同，因此格式化之后的字符串可能包含也可能不包含原始 HTML 代码中的缩进。")]),e._v(" "),v("p",[e._v("下面再看一个使用"),v("code",[e._v("innerText")]),e._v("设置"),v("code",[e._v("<div>")]),e._v("元素内容的例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.innerText = "Hello world!";\n')])])]),v("p",[e._v("执行这行代码后，HTML 页面中的这个"),v("code",[e._v("<div>")]),e._v("元素实际上会变成这个样子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div id="content">Hello world!</div>\n')])])]),v("p",[e._v("设置"),v("code",[e._v("innerText")]),e._v("会移除元素之前所有的后代节点，完全改变 DOM 子树。此外，设置"),v("code",[e._v("innerText")]),e._v("也会编码出现在字符串中的 HTML 语法字符（小于号、大于号、引号及和号）。下面是一个例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.innerText = "Hello & welcome, <b>\\"reader\\"!</b>";\n')])])]),v("p",[e._v("执行之后的结果如下：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<div id="content">Hello &amp; welcome, &lt;b&gt;&quot;reader&quot;!&lt;/b&gt;</div>\n')])])]),v("p",[e._v("因为设置"),v("code",[e._v("innerText")]),e._v("只能在容器元素中生成一个文本节点，所以为了保证一定是文本节点，就必须进行 HTML 编码。"),v("code",[e._v("innerText")]),e._v("属性可以用于去除 HTML 标签。通过将"),v("code",[e._v("innerText")]),e._v("设置为等于"),v("code",[e._v("innerText")]),e._v("，可以去除所有 HTML 标签而只剩文本，如下所示：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("div.innerText = div.innerText;\n")])])]),v("p",[e._v("执行以上代码后，容器元素的内容只会包含原先的文本内容。")]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("注意")]),e._v("　 Firefox 45（2016 年 3 月发布）以前的版本中只支持"),v("code",[e._v("textContent")]),e._v("属性，与"),v("code",[e._v("innerText")]),e._v("的区别是返回的文本中也会返回行内样式或脚本代码。"),v("code",[e._v("innerText")]),e._v("目前已经得到所有浏览器支持，应该作为取得和设置文本内容的首选方法使用。")])])])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[v("strong",[e._v("outerText 属性")])]),e._v(" "),v("p",[v("code",[e._v("outerText")]),e._v("与"),v("code",[e._v("innerText")]),e._v("是类似的，只不过作用范围包含调用它的节点。要读取文本值时，"),v("code",[e._v("outerText")]),e._v("与"),v("code",[e._v("innerText")]),e._v("实际上会返回同样的内容。但在写入文本值时，"),v("code",[e._v("outerText")]),e._v("就大不相同了。写入文本值时，"),v("code",[e._v("outerText")]),e._v("不止会移除所有后代节点，而是会替换整个元素。比如：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('div.outerText = "Hello world!";\n')])])]),v("p",[e._v("这行代码的执行效果就相当于以下两行代码：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('let text = document.createTextNode("Hello world!");\ndiv.parentNode.replaceChild(text, div);\n')])])]),v("p",[e._v("本质上，这相当于用新的文本节点替代"),v("code",[e._v("outerText")]),e._v("所在的元素。此时，原来的元素会与文档脱离关系，因此也无法访问。")]),e._v(" "),v("p",[v("code",[e._v("outerText")]),e._v("是一个非标准的属性，而且也没有被标准化的前景。因此，不推荐依赖这个属性实现重要的操作。除 Firefox 之外所有主流浏览器都支持"),v("code",[e._v("outerText")]),e._v("。")])])]),e._v(" "),v("h3",{attrs:{id:"_15-4-4-滚动"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-4-滚动"}},[e._v("#")]),e._v(" 15.4.4 　滚动")]),e._v(" "),v("p",[e._v("如前所述，滚动是 HTML5 之前 DOM 标准没有涉及的领域。虽然 HTML5 把"),v("code",[e._v("scrollIntoView()")]),e._v("标准化了，但不同浏览器中仍然有其他专有方法。比如，"),v("code",[e._v("scrollIntoViewIfNeeded()")]),e._v("作为"),v("code",[e._v("HTMLElement")]),e._v("类型的扩展可以在所有元素上调用。"),v("code",[e._v("scrollIntoViewIfNeeded(alingCenter)")]),e._v("会在元素不可见的情况下，将其滚动到窗口或包含窗口中，使其可见；如果已经在视口中可见，则这个方法什么也不做。如果将可选的参数"),v("code",[e._v("alingCenter")]),e._v("设置为"),v("code",[e._v("true")]),e._v("，则浏览器会尝试将其放在视口中央。Safari、Chrome 和 Opera 实现了这个方法。")]),e._v(" "),v("p",[e._v("下面使用"),v("code",[e._v("scrollIntoViewIfNeeded()")]),e._v("方法的一个例子：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("// 如果不可见，则将元素可见\ndocument.images[0].scrollIntoViewIfNeeded();\n")])])]),v("p",[e._v("考虑到"),v("code",[e._v("scrollIntoView()")]),e._v("是唯一一个所有浏览器都支持的方法，所以只用它就可以了。")]),e._v(" "),v("h2",{attrs:{id:"_15-5-小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-5-小结"}},[e._v("#")]),e._v(" 15.5 　小结")]),e._v(" "),v("p",[e._v("虽然 DOM 规定了与 XML 和 HTML 文档交互的核心 API，但其他几个规范也定义了对 DOM 的扩展。很多扩展都基于之前的已成为事实标准的专有特性标准化而来。本章主要介绍了以下 3 个规范。")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Selectors API")]),e._v("为基于 CSS 选择符获取 DOM 元素定义了几个方法："),v("code",[e._v("querySelector()")]),e._v("、"),v("code",[e._v("querySelectorAll()")]),e._v("和"),v("code",[e._v("matches()")]),e._v("。")]),e._v(" "),v("li",[v("strong",[e._v("Element Traversal")]),e._v("在 DOM 元素上定义了额外的属性，以方便对 DOM 元素进行遍历。这个需求是因浏览器处理元素间空格的差异而产生的。")]),e._v(" "),v("li",[v("strong",[e._v("HTML5")]),e._v("为标准 DOM 提供了大量扩展。其中包括对"),v("code",[e._v("innerHTML")]),e._v("属性等事实标准进行了标准化，还有焦点管理、字符集、滚动等特性。")])]),e._v(" "),v("p",[e._v("DOM 扩展的数量总体还不大，但随着 Web 技术的发展一定会越来越多。浏览器仍然没有停止对专有扩展的探索，如果出现成功的扩展，那么就可能成为事实标准，或者最终被整合到未来的标准中。")])])}),[],!1,null,null,null);t.default=a.exports}}]);