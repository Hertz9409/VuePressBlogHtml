(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{434:function(t,s,e){t.exports=e.p+"assets/img/1.47d529ca.png"},435:function(t,s,e){t.exports=e.p+"assets/img/2.9c746bdf.png"},436:function(t,s,e){t.exports=e.p+"assets/img/3.a92c18b9.png"},437:function(t,s,e){t.exports=e.p+"assets/img/4.93f6761b.png"},438:function(t,s,e){t.exports=e.p+"assets/img/5.125fd916.png"},439:function(t,s,e){t.exports=e.p+"assets/img/6.2d326a82.png"},440:function(t,s,e){t.exports=e.p+"assets/img/7.192eeadb.png"},441:function(t,s,e){t.exports=e.p+"assets/img/8.c1d9694d.png"},529:function(t,s,e){"use strict";e.r(s);var a=e(27),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"vuepress博客部署和travis-ci持续集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress博客部署和travis-ci持续集成"}},[t._v("#")]),t._v(" VuePress博客部署和Travis CI持续集成")]),t._v(" "),a("h2",{attrs:{id:"vuepress介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuepress介绍"}},[t._v("#")]),t._v(" VuePress介绍")]),t._v(" "),a("p",[t._v("VuePress是由Vue框架团队开发的一款静态网页生成器,它诞生的初衷是为了支持Vue及其子项目的文档需求.类似于Hexo.")]),t._v(" "),a("h3",{attrs:{id:"快速开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速开始"}},[t._v("#")]),t._v(" 快速开始")]),t._v(" "),a("ol",[a("li",[t._v("环境安装")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("# 安装\nyarn global add vuepress 或者 npm install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("g vuepress\n# 新建一个md文件\necho "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'# hello vuepress'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("README")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("md\n# 开始写作\nvuepress dev "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n# 构建静态文件\nvuepress build "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n# 在"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json中添加开发和编译命令\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docs:dev"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vuepress dev docs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docs:build"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vuepress build docs"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("目录结构")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".\n├── docs\n│   ├── .vuepress (可选的) // 存放全局的配置,组件,静态资源等\n│   │   ├── components (可选的) // 该目录的Vue组件会被注册为全局组件\n│   │   ├── theme (可选的) // 存放本地主题\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的) // 静态资源目录\n│   │   ├── styles (可选的) // 存放样式相关文件\n│   │   │   ├── index.styl // 自动应用的全局样式文件,具有比默认样式更高优先级\n│   │   │   └── palette.styl // 重写默认颜色常量或设置新的颜色常量\n│   │   ├── templates (可选的, 谨慎配置) // 存储HTML模板文件\n│   │   │   ├── dev.html // 开发环境HTML模板文件\n│   │   │   └── ssr.html // 基于Vue SSR的HTML模板文件\n│   │   ├── config.js (可选的) // 配置文件入口文件\n│   │   └── enhanceApp.js (可选的) // 客户端应用的增强\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n")])])]),a("p",[t._v("默认页面路由")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("文件相对路径")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("页面路由地址")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("/README.md")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("/")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("/guide/README.md")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("/guide/")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("/config.md")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("/config.html")])])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("基本配置")])]),t._v(" "),a("p",[t._v("一个VuePress网站必要的配置文件为"),a("code",[t._v(".vuepress/config.js")]),t._v(",它应该导出一个JavaScript对象.目前我的个人Blog网站就只进行了该文件的配置,其他的自定义样式和主题都是使用的VuePress默认的.")]),t._v(" "),a("p",[a("img",{attrs:{src:e(434),alt:"config.js配置信息"}})]),t._v(" "),a("ul",[a("li",[t._v("title: 网站标题")]),t._v(" "),a("li",[t._v("description: 网站描述,以<meta>标签渲染在当前页面的HTML中")]),t._v(" "),a("li",[t._v("base: 部署站点的基础路径,如果将网站部署在"),a("code",[t._v("https://foo.github.io/bar/")]),t._v(",那么base应设置为"),a("code",[t._v('"/bar/"')]),t._v(",值应当总是以斜杠开始,斜杠结束.")]),t._v(" "),a("li",[t._v("themeConfig: 为主题提供一些配置.目前使用的是默认主题.\n"),a("ul",[a("li",[t._v("logo: 配置导航栏logo")]),t._v(" "),a("li",[t._v("nav: 导航栏配置,可配置路由,跳转链接等,具体配置规则可查看"),a("a",{attrs:{href:"https://vuepress.vuejs.org/zh/theme/default-theme-config.html#%E5%AF%BC%E8%88%AA%E6%A0%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("sidebar: 侧边栏配置,这是一个比较复杂的配置,并且由于侧边栏直接和文章目录挂钩,所以最好使用node.js方法自动生成目录结构,这样就省去了每次添加修改文章要手动修改的问题(getCatalog方法)")]),t._v(" "),a("li",[t._v("其他相关配置都可以在官方文档中查看,如果没有深入的页面定制需求,可以不用配置,直接使用默认值.")])])]),t._v(" "),a("li",[t._v("plugins: 插件配置.官方提供了几个好用的"),a("a",{attrs:{href:"https://vuepress.vuejs.org/zh/plugin/using-a-plugin.html#%E4%BD%BF%E7%94%A8%E6%9D%A5%E8%87%AA%E4%BE%9D%E8%B5%96%E7%9A%84%E6%8F%92%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("插件"),a("OutboundLink")],1),t._v(",就不一一介绍了,根据自己需求使用.")])]),t._v(" "),a("p",[t._v("VuePress还有其他很多特性,由于在使用中还没用到,所以暂时不做介绍,待后续补充")]),t._v(" "),a("h2",{attrs:{id:"使用vuepress配合github-page搭建个人博客"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用vuepress配合github-page搭建个人博客"}},[t._v("#")]),t._v(" 使用VuePress配合Github Page搭建个人博客")]),t._v(" "),a("p",[t._v("在完成VuePress Blog的环境搭建以后,我们就可以开始编写自己的md文章了.")]),t._v(" "),a("p",[t._v("然后我们可以配合GIthub Page功能,将我们的个人blog部署到网上供其他人访问.")]),t._v(" "),a("p",[t._v("为方便后续的持续集成,我们需要在Github上建立两个仓库,一个为源码仓库,一个为page页面代码仓库\n"),a("img",{attrs:{src:e(435),alt:"github上的两个仓库"}})]),t._v(" "),a("p",[t._v("建库过程以及代码上传过程我就不再演示了.")]),t._v(" "),a("p",[t._v("开启Github Page功能也非常简单,在page页面仓库的Settings -> Options -> GitHub Pages选项下修改Source为master分支就行,这时就会生成一个链接地址,此地址就是我们以后访问在线blog的地址.\n"),a("img",{attrs:{src:e(436),alt:"github page配置"}})]),t._v(" "),a("p",[t._v("这时,环境就配置完成了.")]),t._v(" "),a("p",[t._v("每当编写完一篇文章后,可以先执行"),a("code",[t._v("npm run docs:build")]),t._v("命令,此时会执行VuePress编译过程,会在"),a("code",[t._v(".vuepress/dist/")]),t._v("文件夹下生成编译完成后的静态网页文件,我们将此文件夹下的文件都上传到page页面仓库后,就可以在线查看我们的文档了.")]),t._v(" "),a("h2",{attrs:{id:"travis-ci持续集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#travis-ci持续集成"}},[t._v("#")]),t._v(" Travis CI持续集成")]),t._v(" "),a("p",[t._v("由于每次编辑完文章,我们需要手动编译和上传静态文件,操作比较繁琐,于是决定使用Travis CI来配合github钩子实现自动构建和部署.")]),t._v(" "),a("h3",{attrs:{id:"travis-ci简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#travis-ci简介"}},[t._v("#")]),t._v(" Travis CI简介")]),t._v(" "),a("p",[t._v("持续集成指的是只要代码变更,就自动运行构建和测试,反馈运行结果,确保符合预期后,将代码合并到发布分支,并进行代码发布的过程.这个过程完全由脚本控制,可以节省大量人力时间和避免人为错误.")]),t._v(" "),a("p",[t._v("Travis CI是最受欢迎的和GitHub配合使用的持续集成服务")]),t._v(" "),a("h3",{attrs:{id:"如何使用travis-ci"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用travis-ci"}},[t._v("#")]),t._v(" 如何使用Travis CI")]),t._v(" "),a("ol",[a("li",[t._v("首先登陆"),a("a",{attrs:{href:"https://travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis CI网站"),a("OutboundLink")],1),t._v(",然后使用自己的GitHub账号登陆网站,此时个人主页下会列出所有的仓库,打开博客源码仓库的监听按钮,此时Travis CI会监听这个仓库的变化,一旦代码有所变更,就行执行后续方法.\n"),a("img",{attrs:{src:e(437),alt:"个人主页下的仓库"}})]),t._v(" "),a("li",[t._v("配置.travis.yml,实现持续集成\nTravis要求项目根目录下必须有一个.travis.yml文件.这是一个配置文件,指定了Travis监听到仓库变化后的行为,一旦代码变化,Travis就会去找到仓库下的这个文件,执行其中的命令.\n"),a("img",{attrs:{src:e(438),alt:"我的.travis.yml配置"}})])]),t._v(" "),a("p",[t._v("上图是一个很简单的配置信息,Travis提供了很多的配置功能,同时也提供了很多控制脚本执行过程的关键字,目前我只使用了"),a("code",[t._v("install")]),t._v(","),a("code",[t._v("script")]),t._v(","),a("code",[t._v("after_script")]),t._v(".")]),t._v(" "),a("p",[t._v("travis支持多种语言,所以先要定义脚本执行语言.上图可以看出,我定义了脚本在nodejs 12版本的环境下运行,此时travis是支持yarn命令的.所以直接在install阶段执行"),a("code",[t._v("yarn")]),t._v("命令来安装各种依赖.")]),t._v(" "),a("p",[t._v("在install阶段执行完成后,会执行script阶段,此时可以执行编译命令,最终在script阶段执行完成后,我们进行dist发布文件夹下,执行git上传命令将编译后的网页文件上传到github page仓库下,这时整个过程就完成了.")]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("travis提供了deploy阶段,但是为了方便编写脚本,我这边就没有使用deploy钩子")])])]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("仔细看脚本最后一行的上传代码,其中我们使用了"),a("code",[t._v("${GITHUB_TOKEN}")]),t._v("这个模板插值,这其实就涉及到github personal access tokens的配置.\n"),a("img",{attrs:{src:e(439),alt:"travis环境变量配置"}}),t._v("\n那么,上图的加密token来自哪里呢\n"),a("img",{attrs:{src:e(440),alt:"生成github token"}}),t._v("\n在gihub个人中心 --\x3e Settings -> Developer Settings --\x3e Personal access tokens --\x3e Generate new token中\n"),a("img",{attrs:{src:e(441),alt:"生成github token"}}),t._v("\n设置token名称,赋予权限,点击生成token,此时将生成的一串字符串配置到travis的环境变量中,就可以实现不需要账户密码就可以向仓库中提交代码了.")])])]),t._v(" "),a("p",[t._v("至此,我们就完成了VuePress环境的搭建,Github Page在线查看Blog以及利用Travis CI实现Blog项目的持续集成.\n我们编写完文档后,只需要将代码上传到源码仓库,Travis CI就会自动构建并更新Page页面仓库.")])])}),[],!1,null,null,null);s.default=r.exports}}]);