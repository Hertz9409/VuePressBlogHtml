(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{514:function(e,t,a){"use strict";a.r(t);var v=a(27),o=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"第-5-章-基本引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-基本引用类型"}},[e._v("#")]),e._v(" 第 5 章　基本引用类型")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("本章内容")])]),e._v(" "),a("ul",[a("li",[e._v("理解对象")]),e._v(" "),a("li",[e._v("基本 JavaScript 数据类型")]),e._v(" "),a("li",[e._v("原始值与原始值包装类型")])])]),e._v(" "),a("p",[e._v("引用值（或者对象）是某个特定"),a("strong",[e._v("引用类型")]),e._v("的实例。在 ECMAScript 中，引用类型是把数据和功能组织到一起的结构，经常被人错误地称作“类”。虽然从技术上讲 JavaScript 是一门面向对象语言，但 ECMAScript 缺少传统的面向对象编程语言所具备的某些基本结构，包括类和接口。引用类型有时候也被称为"),a("strong",[e._v("对象定义")]),e._v("，因为它们描述了自己的对象应有的属性和方法。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　引用类型虽然有点像类，但跟类并不是一个概念。为避免混淆，本章后面不会使用术语“类”。")])]),e._v(" "),a("p",[e._v("对象被认为是某个特定引用类型的"),a("strong",[e._v("实例")]),e._v("。新对象通过使用"),a("code",[e._v("new")]),e._v("操作符后跟一个"),a("strong",[e._v("构造函数")]),e._v("（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let now = new Date();\n")])])]),a("p",[e._v("这行代码创建了引用类型"),a("code",[e._v("Date")]),e._v("的一个新实例，并将它保存在变量"),a("code",[e._v("now")]),e._v("中。"),a("code",[e._v("Date()")]),e._v("在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。ECMAScript 提供了很多像"),a("code",[e._v("Date")]),e._v("这样的原生引用类型，帮助开发者实现常见的任务。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　函数也是一种引用类型，但有关函数的内容太多了，一章放不下，所以本书专门用第 10 章来介绍函数。")])]),e._v(" "),a("h2",{attrs:{id:"_5-1-date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-date"}},[e._v("#")]),e._v(" 5.1 　 Date")]),e._v(" "),a("p",[e._v("ECMAScript 的"),a("code",[e._v("Date")]),e._v("类型参考了 Java 早期版本中的"),a("code",[e._v("java.util.Date")]),e._v("。为此，"),a("code",[e._v("Date")]),e._v("类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。使用这种存储格式，"),a("code",[e._v("Date")]),e._v("类型可以精确表示 1970 年 1 月 1 日之前及之后 285 616 年的日期。")]),e._v(" "),a("p",[e._v("要创建日期对象，就使用"),a("code",[e._v("new")]),e._v("操作符来调用"),a("code",[e._v("Date")]),e._v("构造函数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let now = new Date();\n")])])]),a("p",[e._v("在不给"),a("code",[e._v("Date")]),e._v("构造函数传参数的情况下，创建的对象将保存当前日期和时间。要基于其他日期和时间创建日期对象，必须传入其毫秒表示（UNIX 纪元 1970 年 1 月 1 日午夜之后的毫秒数）。ECMAScript 为此提供了两个辅助方法："),a("code",[e._v("Date.parse()")]),e._v("和"),a("code",[e._v("Date.UTC()")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("Date.parse()")]),e._v("方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数。ECMA-262 第 5 版定义了"),a("code",[e._v("Date.parse()")]),e._v("应该支持的日期格式，填充了第 3 版遗留的空白。所有实现都必须支持下列日期格式：")]),e._v(" "),a("ul",[a("li",[e._v("“月/日/年”，如"),a("code",[e._v('"5/23/2019"')]),e._v("；")]),e._v(" "),a("li",[e._v("“月名 日, 年”，如"),a("code",[e._v('"May 23, 2019"')]),e._v("；")]),e._v(" "),a("li",[e._v("“周几 月名 日 年 时:分:秒 时区”，如"),a("code",[e._v('"Tue May 23 2019 00:00:00 GMT-0700"')]),e._v("；")]),e._v(" "),a("li",[e._v("ISO 8601 扩展格式“YYYY-MM-DDTHH:mm:ss.sssZ”，如"),a("code",[e._v("2019-05-23T00:00:00")]),e._v("（只适用于兼容 ES5 的实现）。")])]),e._v(" "),a("p",[e._v("比如，要创建一个表示“2019 年 5 月 23 日”的日期对象，可以使用以下代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let someDate = new Date(Date.parse("May 23, 2019"));\n')])])]),a("p",[e._v("如果传给"),a("code",[e._v("Date.parse()")]),e._v("的字符串并不表示日期，则该方法会返回"),a("code",[e._v("NaN")]),e._v("。如果直接把表示日期的字符串传给"),a("code",[e._v("Date")]),e._v("构造函数，那么"),a("code",[e._v("Date")]),e._v("会在后台调用"),a("code",[e._v("Date.parse()")]),e._v("。换句话说，下面这行代码跟前面那行代码是等价的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let someDate = new Date("May 23, 2019");\n')])])]),a("p",[e._v("这两行代码得到的日期对象相同。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　不同的浏览器对"),a("code",[e._v("Date")]),e._v("类型的实现有很多问题。比如，很多浏览器会选择用当前日期替代越界的日期，因此有些浏览器会将"),a("code",[e._v('"January 32, 2019"')]),e._v("解释为"),a("code",[e._v('"February 1, 2019"')]),e._v("。Opera 则会插入当前月的当前日，返回"),a("code",[e._v('"January 当前日, 2019"')]),e._v("。就是说，如果是在 9 月 21 日运行代码，会返回"),a("code",[e._v('"January 21, 2019"')]),e._v("。")])]),e._v(" "),a("p",[a("code",[e._v("Date.UTC()")]),e._v("方法也返回日期的毫秒表示，但使用的是跟"),a("code",[e._v("Date.parse()")]),e._v("不同的信息来生成这个值。传给"),a("code",[e._v("Date.UTC()")]),e._v("的参数是年、零起点月数（1 月是 0，2 月是 1，以此类推）、日（1~31）、时（0~23）、分、秒和毫秒。这些参数中，只有前两个（年和月）是必需的。如果不提供日，那么默认为 1 日。其他参数的默认值都是 0。下面是使用"),a("code",[e._v("Date.UTC()")]),e._v("的两个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// GMT时间2000年1月1日零点\nlet y2k = new Date(Date.UTC(2000, 0));\n\n// GMT时间2005年5月5日下午5点55分55秒\nlet allFives = new Date(Date.UTC(2005, 4, 5, 17, 55, 55));\n")])])]),a("p",[e._v("这个例子创建了两个日期 。第一个日期是 2000 年 1 月 1 日零点（GMT），"),a("code",[e._v("2000")]),e._v("代表年，"),a("code",[e._v("0")]),e._v("代表月（1 月）。因为没有其他参数（日取"),a("code",[e._v("1")]),e._v("，其他取"),a("code",[e._v("0")]),e._v("），所以结果就是该月第 1 天零点。第二个日期表示 2005 年 5 月 5 日下午 5 点 55 分 55 秒（GMT）。虽然日期里面涉及的都是 5，但月数必须用"),a("code",[e._v("4")]),e._v("，因为月数是零起点的。小时也必须是 17，因为这里采用的是 24 小时制，即取值范围是 0~23。其他参数就都很直观了。")]),e._v(" "),a("p",[e._v("与"),a("code",[e._v("Date.parse()")]),e._v("一样，"),a("code",[e._v("Date.UTC()")]),e._v("也会被"),a("code",[e._v("Date")]),e._v("构造函数隐式调用，但有一个区别：这种情况下创建的是本地日期，不是 GMT 日期。不过"),a("code",[e._v("Date")]),e._v("构造函数跟"),a("code",[e._v("Date.UTC()")]),e._v("接收的参数是一样的。因此，如果第一个参数是数值，则构造函数假设它是日期中的年，第二个参数就是月，以此类推。前面的例子也可以这样来写：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 本地时间2000年1月1日零点\nlet y2k = new Date(2000, 0);\n\n// 本地时间2005年5月5日下午5点55分55秒\nlet allFives = new Date(2005, 4, 5, 17, 55, 55);\n")])])]),a("p",[e._v("以上代码创建了与前面例子中相同的两个日期，但这次的两个日期是（由于系统设置决定的）本地时区的日期。")]),e._v(" "),a("p",[e._v("ECMAScript 还提供了"),a("code",[e._v("Date.now()")]),e._v("方法，返回表示方法执行时日期和时间的毫秒数。这个方法可以方便地用在代码分析中：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 起始时间\nlet start = Date.now();\n\n// 调用函数\ndoSomething();\n\n// 结束时间\nlet stop = Date.now(),\n  result = stop - start;\n")])])]),a("h3",{attrs:{id:"_5-1-1-继承的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-继承的方法"}},[e._v("#")]),e._v(" 5.1.1 　继承的方法")]),e._v(" "),a("p",[e._v("与其他类型一样，"),a("code",[e._v("Date")]),e._v("类型重写了"),a("code",[e._v("toLocaleString()")]),e._v("、"),a("code",[e._v("toString()")]),e._v("和"),a("code",[e._v("valueOf()")]),e._v("方法。但与其他类型不同，重写后这些方法的返回值不一样。"),a("code",[e._v("Date")]),e._v("类型的"),a("code",[e._v("toLocaleString()")]),e._v("方法返回与浏览器运行的本地环境一致的日期和时间。这通常意味着格式中包含针对时间的 AM（上午）或 PM（下午），但不包含时区信息（具体格式可能因浏览器而不同）。"),a("code",[e._v("toString()")]),e._v("方法通常返回带时区信息的日期和时间，而时间也是以 24 小时制（0~23）表示的。下面给出了"),a("code",[e._v("toLocaleString()")]),e._v("和"),a("code",[e._v("toString()")]),e._v("返回的 2019 年 2 月 1 日零点的示例（地区为"),a("code",[e._v('"en-US"')]),e._v("的 PST，即 Pacific Standard Time，太平洋标准时间）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("toLocaleString() - 2/1/2019 12:00:00 AM\n\ntoString() - Thu Feb 1 2019 00:00:00 GMT-0800 (Pacific Standard Time)\n")])])]),a("p",[e._v("现代浏览器在这两个方法的输出上已经趋于一致。在比较老的浏览器上，每个方法返回的结果可能在每个浏览器上都是不同的。这些差异意味着"),a("code",[e._v("toLocaleString()")]),e._v("和"),a("code",[e._v("toString()")]),e._v("可能只对调试有用，不能用于显示。")]),e._v(" "),a("p",[a("code",[e._v("Date")]),e._v("类型的"),a("code",[e._v("valueOf()")]),e._v("方法根本就不返回字符串，这个方法被重写后返回的是日期的毫秒表示。因此，操作符（如小于号和大于号）可以直接使用它返回的值。比如下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let date1 = new Date(2019, 0, 1);    // 2019年1月1日\nlet date2 = new Date(2019, 1, 1);    // 2019年2月1日\n\nconsole.log(date1 < date2); // true\nconsole.log(date1 > date2); // false\n")])])]),a("p",[e._v("日期 2019 年 1 月 1 日在 2019 年 2 月 1 日之前，所以说前者小于后者没问题。因为 2019 年 1 月 1 日的毫秒表示小于 2019 年 2 月 1 日的毫秒表示，所以用小于号比较这两个日期时会返回"),a("code",[e._v("true")]),e._v("。这也是确保日期先后的一个简单方式。")]),e._v(" "),a("h3",{attrs:{id:"_5-1-2-日期格式化方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-日期格式化方法"}},[e._v("#")]),e._v(" 5.1.2 　日期格式化方法")]),e._v(" "),a("p",[a("code",[e._v("Date")]),e._v("类型有几个专门用于格式化日期的方法，它们都会返回字符串：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("toDateString()")]),e._v("显示日期中的周几、月、日、年（格式特定于实现）；")]),e._v(" "),a("li",[a("code",[e._v("toTimeString()")]),e._v("显示日期中的时、分、秒和时区（格式特定于实现）；")]),e._v(" "),a("li",[a("code",[e._v("toLocaleDateString()")]),e._v("显示日期中的周几、月、日、年（格式特定于实现和地区）；")]),e._v(" "),a("li",[a("code",[e._v("toLocaleTimeString()")]),e._v("显示日期中的时、分、秒（格式特定于实现）；")]),e._v(" "),a("li",[a("code",[e._v("toUTCString()")]),e._v("显示完整的 UTC 日期（格式特定于实现）。")])]),e._v(" "),a("p",[e._v("这些方法的输出与"),a("code",[e._v("toLocaleString()")]),e._v("和"),a("code",[e._v("toString()")]),e._v("一样，会因浏览器而异。因此不能用于在用户界面上一致地显示日期。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　还有一个方法叫"),a("code",[e._v("toGMTString()")]),e._v("，这个方法跟"),a("code",[e._v("toUTCString()")]),e._v("是一样的，目的是为了向后兼容。不过，规范建议新代码使用"),a("code",[e._v("toUTCString()")]),e._v("。")])]),e._v(" "),a("h3",{attrs:{id:"_5-1-3-日期-时间组件方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-3-日期-时间组件方法"}},[e._v("#")]),e._v(" 5.1.3 　日期/时间组件方法")]),e._v(" "),a("p",[a("code",[e._v("Date")]),e._v("类型剩下的方法（见下表）直接涉及取得或设置日期值的特定部分。注意表中“UTC 日期”，指的是没有时区偏移（将日期转换为 GMT）时的日期。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("方法")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getTime()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期的毫秒表示；与"),a("code",[e._v("valueOf()")]),e._v("相同")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setTime(*milliseconds*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期的毫秒表示，从而修改整个日期")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getFullYear()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 4 位数年（即 2019 而不是 19）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCFullYear()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期的 4 位数年")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setFullYear(*year*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期的年（"),a("code",[e._v("*year*")]),e._v("必须是 4 位数）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setUTCFullYear(*year*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置 UTC 日期的年（"),a("code",[e._v("*year*")]),e._v("必须是 4 位数）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getMonth()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期的月（0 表示 1 月，11 表示 12 月）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCMonth()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期的月（0 表示 1 月，11 表示 12 月）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setMonth(*month*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期的月（"),a("code",[e._v("*month*")]),e._v("为大于 0 的数值，大于 11 加年）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setUTCMonth(*month*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置 UTC 日期的月（"),a("code",[e._v("*month*")]),e._v("为大于 0 的数值，大于 11 加年）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getDate()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期中的日（1~31）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCDate()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期中的日（1~31）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setDate(*date*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期中的日（如果"),a("code",[e._v("*date*")]),e._v("大于该月天数，则加月）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setUTCDate(*date*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置 UTC 日期中的日（如果"),a("code",[e._v("*date*")]),e._v("大于该月天数，则加月）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getDay()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期中表示周几的数值（0 表示周日，6 表示周六）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCDay()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期中表示周几的数值（0 表示周日，6 表示周六）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getHours()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期中的时（0~23）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCHours()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期中的时（0~23）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setHours(*hours*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期中的时（如果"),a("code",[e._v("*hours*")]),e._v("大于 23，则加日）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setUTCHours(*hours*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置 UTC 日期中的时（如果"),a("code",[e._v("*hours*")]),e._v("大于 23，则加日）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getMinutes()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期中的分（0~59）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCMinutes()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期中的分（0~59）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setMinutes(*minutes*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期中的分（如果"),a("code",[e._v("*minutes*")]),e._v("大于 59，则加时）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setUTCMinutes(*minutes*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置 UTC 日期中的分（如果"),a("code",[e._v("*minutes*")]),e._v("大于 59，则加时）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getSeconds()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期中的秒（0~59）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCSeconds()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期中的秒（0~59）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setSeconds(*seconds*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期中的秒（如果"),a("code",[e._v("*seconds*")]),e._v("大于 59，则加分）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setUTCSeconds(*seconds*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置 UTC 日期中的秒（如果"),a("code",[e._v("*seconds*")]),e._v("大于 59，则加分）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getMilliseconds()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回日期中的毫秒")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getUTCMilliseconds()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 UTC 日期中的毫秒")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setMilliseconds(*milliseconds*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置日期中的毫秒")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("setUTCMilliseconds(*milliseconds*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("设置 UTC 日期中的毫秒")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("getTimezoneOffset()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回以分钟计的 UTC 与本地时区的偏移量（如美国 EST 即“东部标准时间”返回 300，进入夏令时的地区可能有所差异）")])])])]),e._v(" "),a("h2",{attrs:{id:"_5-2-regexp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-regexp"}},[e._v("#")]),e._v(" 5.2 　 RegExp")]),e._v(" "),a("p",[e._v("ECMAScript 通过"),a("code",[e._v("RegExp")]),e._v("类型支持正则表达式。正则表达式使用类似 Perl 的简洁语法来创建：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let expression = /pattern/flags;\n")])])]),a("p",[e._v("这个正则表达式的"),a("code",[e._v("pattern")]),e._v("（模式）可以是任何简单或复杂的正则表达式，包括字符类、限定符、分组、向前查找和反向引用。每个正则表达式可以带零个或多个"),a("code",[e._v("flags")]),e._v("（标记），用于控制正则表达式的行为。下面给出了表示匹配模式的标记。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("g")]),e._v("：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。")]),e._v(" "),a("li",[a("code",[e._v("i")]),e._v("：不区分大小写，表示在查找匹配时忽略"),a("code",[e._v("pattern")]),e._v("和字符串的大小写。")]),e._v(" "),a("li",[a("code",[e._v("m")]),e._v("：多行模式，表示查找到一行文本末尾时会继续查找。")]),e._v(" "),a("li",[a("code",[e._v("y")]),e._v("：粘附模式，表示只查找从"),a("code",[e._v("lastIndex")]),e._v("开始及之后的字符串。")]),e._v(" "),a("li",[a("code",[e._v("u")]),e._v("：Unicode 模式，启用 Unicode 匹配。")]),e._v(" "),a("li",[a("code",[e._v("s")]),e._v("："),a("code",[e._v("dotAll")]),e._v("模式，表示元字符"),a("code",[e._v(".")]),e._v("匹配任何字符（包括"),a("code",[e._v("\\n")]),e._v("或"),a("code",[e._v("\\r")]),e._v("）。")])]),e._v(" "),a("p",[e._v("使用不同模式和标记可以创建出各种正则表达式，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 匹配字符串中的所有"at"\nlet pattern1 = /at/g;\n\n// 匹配第一个"bat"或"cat"，忽略大小写\nlet pattern2 = /[bc]at/i;\n\n// 匹配所有以"at"结尾的三字符组合，忽略大小写\nlet pattern3 = /.at/gi;\n')])])]),a("p",[e._v("与其他语言中的正则表达式类似，所有"),a("strong",[e._v("元字符")]),e._v("在模式中也必须转义，包括：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("( [ { \\ ^ $ | ) ] } ? * + .\n")])])]),a("p",[e._v("元字符在正则表达式中都有一种或多种特殊功能，所以要匹配上面这些字符本身，就必须使用反斜杠来转义。下面是几个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 匹配第一个"bat"或"cat"，忽略大小写\nlet pattern1 = /[bc]at/i;\n\n// 匹配第一个"[bc]at"，忽略大小写\nlet pattern2 = /\\[bc\\]at/i;\n\n// 匹配所有以"at"结尾的三字符组合，忽略大小写\nlet pattern3 = /.at/gi;\n\n// 匹配所有".at"，忽略大小写\nlet pattern4 = /\\.at/gi;\n')])])]),a("p",[e._v("这里的"),a("code",[e._v("pattern1")]),e._v("匹配"),a("code",[e._v('"bat"')]),e._v("或"),a("code",[e._v('"cat"')]),e._v("，不区分大小写。要直接匹配"),a("code",[e._v('"[bc]at"')]),e._v("，左右中括号都必须像"),a("code",[e._v("pattern2")]),e._v("中那样使用反斜杠转义。在"),a("code",[e._v("pattern3")]),e._v("中，点号表示"),a("code",[e._v('"at"')]),e._v("前面的任意字符都可以匹配。如果想匹配"),a("code",[e._v('".at"')]),e._v("，那么要像"),a("code",[e._v("pattern4")]),e._v("中那样对点号进行转义。")]),e._v(" "),a("p",[e._v("前面例子中的正则表达式都是使用字面量形式定义的。正则表达式也可以使用"),a("code",[e._v("RegExp")]),e._v("构造函数来创建，它接收两个参数：模式字符串和（可选的）标记字符串。任何使用字面量定义的正则表达式也可以通过构造函数来创建，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 匹配第一个"bat"或"cat"，忽略大小写\nlet pattern1 = /[bc]at/i;\n\n// 跟pattern1一样，只不过是用构造函数创建的\nlet pattern2 = new RegExp("[bc]at", "i");\n')])])]),a("p",[e._v("这里的"),a("code",[e._v("pattern1")]),e._v("和"),a("code",[e._v("pattern2")]),e._v("是等效的正则表达式。注意，"),a("code",[e._v("RegExp")]),e._v("构造函数的两个参数都是字符串。因为"),a("code",[e._v("RegExp")]),e._v("的模式参数是字符串，所以在某些情况下需要二次转义。所有元字符都必须二次转义，包括转义字符序列，如"),a("code",[e._v("\\n")]),e._v("（"),a("code",[e._v("\\")]),e._v("转义后的字符串是"),a("code",[e._v("\\\\")]),e._v("，在正则表达式字符串中则要写成"),a("code",[e._v("\\\\\\\\")]),e._v("）。下表展示了几个正则表达式的字面量形式，以及使用"),a("code",[e._v("RegExp")]),e._v("构造函数创建时对应的模式字符串。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("字面量模式")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("对应的字符串")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("/\\[bc\\]at/")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('"\\\\[bc\\\\]at"')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("/\\.at/")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('"\\\\.at"')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("/name\\/age/")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('"name\\\\/age"')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("/\\d.\\d{1,2}/")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('"\\\\d.\\\\d{1,2}"')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("/\\w\\\\hello\\\\123/")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('"\\\\w\\\\\\\\hello\\\\\\\\123"')])])])])]),e._v(" "),a("p",[e._v("此外，使用"),a("code",[e._v("RegExp")]),e._v("也可以基于已有的正则表达式实例，并可选择性地修改它们的标记：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('const re1 = /cat/g;\nconsole.log(re1);  // "/cat/g"\n\nconst re2 = new RegExp(re1);\nconsole.log(re2);  // "/cat/g"\n\nconst re3 = new RegExp(re1, "i");\nconsole.log(re3);  // "/cat/i"\n')])])]),a("h3",{attrs:{id:"_5-2-1-regexp实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-regexp实例属性"}},[e._v("#")]),e._v(" 5.2.1 　"),a("code",[e._v("RegExp")]),e._v("实例属性")]),e._v(" "),a("p",[e._v("每个"),a("code",[e._v("RegExp")]),e._v("实例都有下列属性，提供有关模式的各方面信息。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("global")]),e._v("：布尔值，表示是否设置了"),a("code",[e._v("g")]),e._v("标记。")]),e._v(" "),a("li",[a("code",[e._v("ignoreCase")]),e._v("：布尔值，表示是否设置了"),a("code",[e._v("i")]),e._v("标记。")]),e._v(" "),a("li",[a("code",[e._v("unicode")]),e._v("：布尔值，表示是否设置了"),a("code",[e._v("u")]),e._v("标记。")]),e._v(" "),a("li",[a("code",[e._v("sticky")]),e._v("：布尔值，表示是否设置了"),a("code",[e._v("y")]),e._v("标记。")]),e._v(" "),a("li",[a("code",[e._v("lastIndex")]),e._v("：整数，表示在源字符串中下一次搜索的开始位置，始终从 0 开始。")]),e._v(" "),a("li",[a("code",[e._v("multiline")]),e._v("：布尔值，表示是否设置了"),a("code",[e._v("m")]),e._v("标记。")]),e._v(" "),a("li",[a("code",[e._v("dotAll")]),e._v("：布尔值，表示是否设置了"),a("code",[e._v("s")]),e._v("标记。")]),e._v(" "),a("li",[a("code",[e._v("source")]),e._v("：正则表达式的字面量字符串（不是传给构造函数的模式字符串），没有开头和结尾的斜杠。")]),e._v(" "),a("li",[a("code",[e._v("flags")]),e._v("：正则表达式的标记字符串。始终以字面量而非传入构造函数的字符串模式形式返回（没有前后斜杠）。")])]),e._v(" "),a("p",[e._v("通过这些属性可以全面了解正则表达式的信息，不过实际开发中用得并不多，因为模式声明中包含这些信息。下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let pattern1 = /\\[bc\\]at/i;\n\nconsole.log(pattern1.global);      // false\nconsole.log(pattern1.ignoreCase);  // true\nconsole.log(pattern1.multiline);   // false\nconsole.log(pattern1.lastIndex);   // 0\nconsole.log(pattern1.source);      // "\\[bc\\]at"\nconsole.log(pattern1.flags);       // "i"\n\nlet pattern2 = new RegExp("\\\\[bc\\\\]at", "i");\n\nconsole.log(pattern2.global);      // false\nconsole.log(pattern2.ignoreCase);  // true\nconsole.log(pattern2.multiline);   // false\nconsole.log(pattern2.lastIndex);   // 0\nconsole.log(pattern2.source);      // "\\[bc\\]at"\nconsole.log(pattern2.flags);       // "i"\n')])])]),a("p",[e._v("注意，虽然第一个模式是通过字面量创建的，第二个模式是通过"),a("code",[e._v("RegExp")]),e._v("构造函数创建的，但两个模式的"),a("code",[e._v("source")]),e._v("和"),a("code",[e._v("flags")]),e._v("属性是相同的。"),a("code",[e._v("source")]),e._v("和"),a("code",[e._v("flags")]),e._v("属性返回的是规范化之后可以在字面量中使用的形式。")]),e._v(" "),a("h3",{attrs:{id:"_5-2-2-regexp实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-regexp实例方法"}},[e._v("#")]),e._v(" 5.2.2 　"),a("code",[e._v("RegExp")]),e._v("实例方法")]),e._v(" "),a("p",[a("code",[e._v("RegExp")]),e._v("实例的主要方法是"),a("code",[e._v("exec()")]),e._v("，主要用于配合捕获组使用。这个方法只接收一个参数，即要应用模式的字符串。如果找到了匹配项，则返回包含第一个匹配信息的数组；如果没找到匹配项，则返回"),a("code",[e._v("null")]),e._v("。返回的数组虽然是"),a("code",[e._v("Array")]),e._v("的实例，但包含两个额外的属性："),a("code",[e._v("index")]),e._v("和"),a("code",[e._v("input")]),e._v("。"),a("code",[e._v("index")]),e._v("是字符串中匹配模式的起始位置，"),a("code",[e._v("input")]),e._v("是要查找的字符串。这个数组的第一个元素是匹配整个模式的字符串，其他元素是与表达式中的捕获组匹配的字符串。如果模式中没有捕获组，则数组只包含一个元素。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "mom and dad and baby";\nlet pattern = /mom( and dad( and baby)?)?/gi;\n\nlet matches = pattern.exec(text);\nconsole.log(matches.index);   // 0\nconsole.log(matches.input);   // "mom and dad and baby"\nconsole.log(matches[0]);      // "mom and dad and baby"\nconsole.log(matches[1]);      // " and dad and baby"\nconsole.log(matches[2]);      // " and baby"\n')])])]),a("p",[e._v("在这个例子中，模式包含两个捕获组：最内部的匹配项"),a("code",[e._v('" and baby"')]),e._v("，以及外部的匹配项"),a("code",[e._v('" and dad"')]),e._v("或"),a("code",[e._v('" and dad and baby"')]),e._v("。调用"),a("code",[e._v("exec()")]),e._v("后找到了一个匹配项。因为整个字符串匹配模式，所以"),a("code",[e._v("matchs")]),e._v("数组的"),a("code",[e._v("index")]),e._v("属性就是 0。数组的第一个元素是匹配的整个字符串，第二个元素是匹配第一个捕获组的字符串，第三个元素是匹配第二个捕获组的字符串。")]),e._v(" "),a("p",[e._v("如果模式设置了全局标记，则每次调用"),a("code",[e._v("exec()")]),e._v("方法会返回一个匹配的信息。如果没有设置全局标记，则无论对同一个字符串调用多少次"),a("code",[e._v("exec()")]),e._v("，也只会返回第一个匹配的信息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "cat, bat, sat, fat";\nlet pattern = /.at/;\n\nlet matches = pattern.exec(text);\nconsole.log(matches.index);      // 0\nconsole.log(matches[0]);         // cat\nconsole.log(pattern.lastIndex);  // 0\n\nmatches = pattern.exec(text);\nconsole.log(matches.index);      // 0\nconsole.log(matches[0]);         // cat\nconsole.log(pattern.lastIndex);  // 0\n')])])]),a("p",[e._v("上面例子中的模式没有设置全局标记，因此调用"),a("code",[e._v("exec()")]),e._v("只返回第一个匹配项（"),a("code",[e._v('"cat"')]),e._v("）。"),a("code",[e._v("lastIndex")]),e._v("在非全局模式下始终不变。")]),e._v(" "),a("p",[e._v("如果在这个模式上设置了"),a("code",[e._v("g")]),e._v("标记，则每次调用"),a("code",[e._v("exec()")]),e._v("都会在字符串中向前搜索下一个匹配项，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "cat, bat, sat, fat";\nlet pattern = /.at/g;\nlet matches = pattern.exec(text);\nconsole.log(matches.index);      // 0\nconsole.log(matches[0]);         // cat\nconsole.log(pattern.lastIndex);  // 3\n\nmatches = pattern.exec(text);\nconsole.log(matches.index);      // 5\nconsole.log(matches[0]);         // bat\nconsole.log(pattern.lastIndex);  // 8\n\nmatches = pattern.exec(text);\nconsole.log(matches.index);      // 10\nconsole.log(matches[0]);         // sat\nconsole.log(pattern.lastIndex);  // 13\n')])])]),a("p",[e._v("这次模式设置了全局标记，因此每次调用"),a("code",[e._v("exec()")]),e._v("都会返回字符串中的下一个匹配项，直到搜索到字符串末尾。注意模式的"),a("code",[e._v("lastIndex")]),e._v("属性每次都会变化。在全局匹配模式下，每次调用"),a("code",[e._v("exec()")]),e._v("都会更新"),a("code",[e._v("lastIndex")]),e._v("值，以反映上次匹配的最后一个字符的索引。")]),e._v(" "),a("p",[e._v("如果模式设置了粘附标记"),a("code",[e._v("y")]),e._v("，则每次调用"),a("code",[e._v("exec()")]),e._v("就只会在"),a("code",[e._v("lastIndex")]),e._v("的位置上寻找匹配项。粘附标记覆盖全局标记。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "cat, bat, sat, fat";\nlet pattern = /.at/y;\n\nlet matches = pattern.exec(text);\nconsole.log(matches.index);       // 0\nconsole.log(matches[0]);          // cat\nconsole.log(pattern.lastIndex);   // 3\n\n// 以索引3对应的字符开头找不到匹配项，因此exec()返回null\n// exec()没找到匹配项，于是将lastIndex设置为0\nmatches = pattern.exec(text);\nconsole.log(matches);             // null\nconsole.log(pattern.lastIndex);   // 0\n\n// 向前设置lastIndex可以让粘附的模式通过exec()找到下一个匹配项：\npattern.lastIndex = 5;\nmatches = pattern.exec(text);\nconsole.log(matches.index);       // 5\nconsole.log(matches[0]);          // bat\nconsole.log(pattern.lastIndex);   // 8\n')])])]),a("p",[e._v("正则表达式的另一个方法是"),a("code",[e._v("test()")]),e._v("，接收一个字符串参数。如果输入的文本与模式匹配，则参数返回"),a("code",[e._v("true")]),e._v("，否则返回"),a("code",[e._v("false")]),e._v("。这个方法适用于只想测试模式是否匹配，而不需要实际匹配内容的情况。"),a("code",[e._v("test()")]),e._v("经常用在"),a("code",[e._v("if")]),e._v("语句中：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "000-00-0000";\nlet pattern = /\\d{3}-\\d{2}-\\d{4}/;\n\nif (pattern.test(text)) {\n  console.log("The pattern was matched.");\n}\n')])])]),a("p",[e._v("在这个例子中，正则表达式用于测试特定的数值序列。如果输入的文本与模式匹配，则显示匹配成功的消息。这个用法常用于验证用户输入，此时我们只在乎输入是否有效，不关心为什么无效。")]),e._v(" "),a("p",[e._v("无论正则表达式是怎么创建的，继承的方法"),a("code",[e._v("toLocaleString()")]),e._v("和"),a("code",[e._v("toString()")]),e._v("都返回正则表达式的字面量表示。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let pattern = new RegExp("\\\\[bc\\\\]at", "gi");\nconsole.log(pattern.toString());       // /\\[bc\\]at/gi\nconsole.log(pattern.toLocaleString()); // /\\[bc\\]at/gi\n')])])]),a("p",[e._v("这里的模式是通过"),a("code",[e._v("RegExp")]),e._v("构造函数创建的，但"),a("code",[e._v("toLocaleString()")]),e._v("和"),a("code",[e._v("toString()")]),e._v("返回的都是其字面量的形式。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　正则表达式的"),a("code",[e._v("valueOf()")]),e._v("方法返回正则表达式本身。")])]),e._v(" "),a("h3",{attrs:{id:"_5-2-3-regexp构造函数属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-3-regexp构造函数属性"}},[e._v("#")]),e._v(" 5.2.3 　"),a("code",[e._v("RegExp")]),e._v("构造函数属性")]),e._v(" "),a("p",[a("code",[e._v("RegExp")]),e._v("构造函数本身也有几个属性。（在其他语言中，这种属性被称为静态属性。）这些属性适用于作用域中的所有正则表达式，而且会根据最后执行的正则表达式操作而变化。这些属性还有一个特点，就是可以通过两种不同的方式访问它们。换句话说，每个属性都有一个全名和一个简写。下表列出了"),a("code",[e._v("RegExp")]),e._v("构造函数的属性。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("全名")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("简写")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("input")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$_")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("最后搜索的字符串")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("lastMatch")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$&")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("最后匹配的文本")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("lastParen")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$+")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("最后匹配的捕获组")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("leftContext")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\$`` |")]),e._v("input"),a("code",[e._v("字符串中出现在")]),e._v("lastMatch`前面的文本")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("rightContext")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$'")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("input")]),e._v("字符串中出现在"),a("code",[e._v("lastMatch")]),e._v("后面的文本")])])])]),e._v(" "),a("p",[e._v("通过这些属性可以提取出与"),a("code",[e._v("exec()")]),e._v("和"),a("code",[e._v("test()")]),e._v("执行的操作相关的信息。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "this has been a short summer";\nlet pattern = /(.)hort/g;\n\nif (pattern.test(text)) {\n  console.log(RegExp.input);        // this has been a short summer\n  console.log(RegExp.leftContext);  // this has been a\n  console.log(RegExp.rightContext); // summer\n  console.log(RegExp.lastMatch);    // short\n  console.log(RegExp.lastParen);    // s\n}\n')])])]),a("p",[e._v("以上代码创建了一个模式，用于搜索任何后跟"),a("code",[e._v('"hort"')]),e._v("的字符，并把第一个字符放在了捕获组中。不同属性包含的内容如下。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input")]),e._v("属性中包含原始的字符串。")]),e._v(" "),a("li",[a("code",[e._v("leftConext")]),e._v("属性包含原始字符串中"),a("code",[e._v('"short"')]),e._v("之前的内容，"),a("code",[e._v("rightContext")]),e._v("属性包含"),a("code",[e._v('"short"')]),e._v("之后的内容。")]),e._v(" "),a("li",[a("code",[e._v("lastMatch")]),e._v("属性包含匹配整个正则表达式的上一个字符串，即"),a("code",[e._v('"short"')]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("lastParen")]),e._v("属性包含捕获组的上一次匹配，即"),a("code",[e._v('"s"')]),e._v("。")])]),e._v(" "),a("p",[e._v("这些属性名也可以替换成简写形式，只不过要使用中括号语法来访问，如下面的例子所示，因为大多数简写形式都不是合法的 ECMAScript 标识符：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "this has been a short summer";\nlet pattern = /(.)hort/g;\n\n/*\n * 注意：Opera不支持简写属性名\n * IE不支持多行匹配\n */\nif (pattern.test(text)) {\n  console.log(RegExp.$_);       // this has been a short summer\n  console.log(RegExp["$`"]);    // this has been a\n  console.log(RegExp["$\'"]);    // summer\n  console.log(RegExp["$&"]);    // short\n  console.log(RegExp["$+"]);    // s\n  console.log(RegExp["$*"]);    // false\n}\n')])])]),a("p",[a("code",[e._v("RegExp")]),e._v("还有其他几个构造函数属性，可以存储最多 9 个捕获组的匹配项。这些属性通过"),a("code",[e._v("RegExp.$1~RegExp.$9")]),e._v("来访问，分别包含第 1~9 个捕获组的匹配项。在调用"),a("code",[e._v("exec()")]),e._v("或"),a("code",[e._v("test()")]),e._v("时，这些属性就会被填充，然后就可以像下面这样使用它们：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "this has been a short summer";\nlet pattern = /(..)or(.)/g;\n\nif (pattern.test(text)) {\n  console.log(RegExp.$1);  // sh\n  console.log(RegExp.$2);  // t\n}\n')])])]),a("p",[e._v("在这个例子中，模式包含两个捕获组。调用"),a("code",[e._v("test()")]),e._v("搜索字符串之后，因为找到了匹配项所以返回"),a("code",[e._v("true")]),e._v("，而且可以打印出通过"),a("code",[e._v("RegExp")]),e._v("构造函数的"),a("code",[e._v("$1")]),e._v("和"),a("code",[e._v("$2")]),e._v("属性取得的两个捕获组匹配的内容。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("RegExp")]),e._v("构造函数的所有属性都没有任何 Web 标准出处，因此不要在生产环境中使用它们。")])]),e._v(" "),a("h3",{attrs:{id:"_5-2-4-模式局限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-4-模式局限"}},[e._v("#")]),e._v(" 5.2.4 　模式局限")]),e._v(" "),a("p",[e._v("虽然 ECMAScript 对正则表达式的支持有了长足的进步，但仍然缺少 Perl 语言中的一些高级特性。下列特性目前还没有得到 ECMAScript 的支持（想要了解更多信息，可以参考 Regular-Expressions.info 网站）：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("\\A")]),e._v("和"),a("code",[e._v("\\Z")]),e._v("锚（分别匹配字符串的开始和末尾）")]),e._v(" "),a("li",[e._v("联合及交叉类")]),e._v(" "),a("li",[e._v("原子组")]),e._v(" "),a("li",[a("code",[e._v("x")]),e._v("（忽略空格）匹配模式")]),e._v(" "),a("li",[e._v("条件式匹配")]),e._v(" "),a("li",[e._v("正则表达式注释")])]),e._v(" "),a("p",[e._v("虽然还有这些局限，但 ECMAScript 的正则表达式已经非常强大，可以用于大多数模式匹配任务。")]),e._v(" "),a("h2",{attrs:{id:"_5-3-原始值包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-原始值包装类型"}},[e._v("#")]),e._v(" 5.3 　原始值包装类型")]),e._v(" "),a("p",[e._v("为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型："),a("code",[e._v("Boolean")]),e._v("、"),a("code",[e._v("Number")]),e._v("和"),a("code",[e._v("String")]),e._v("。这些类型具有本章介绍的其他引用类型一样的特点，但也具有与各自原始类型对应的特殊行为。每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let s1 = "some text";\nlet s2 = s1.substring(2);\n')])])]),a("p",[e._v("在这里，"),a("code",[e._v("s1")]),e._v("是一个包含字符串的变量，它是一个原始值。第二行紧接着在"),a("code",[e._v("s1")]),e._v("上调用了"),a("code",[e._v("substring()")]),e._v("方法，并把结果保存在"),a("code",[e._v("s2")]),e._v("中。我们知道，原始值本身不是对象，因此逻辑上不应该有方法。而实际上这个例子又确实按照预期运行了。这是因为后台进行了很多处理，从而实现了上述操作。具体来说，当第二行访问"),a("code",[e._v("s1")]),e._v("时，是以读模式访问的，也就是要从内存中读取变量保存的值。在以读模式访问字符串值的任何时候，后台都会执行以下 3 步：")]),e._v(" "),a("p",[e._v("(1) 创建一个"),a("code",[e._v("String")]),e._v("类型的实例；")]),e._v(" "),a("p",[e._v("(2) 调用实例上的特定方法；")]),e._v(" "),a("p",[e._v("(3) 销毁实例。")]),e._v(" "),a("p",[e._v("可以把这 3 步想象成执行了如下 3 行 ECMAScript 代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let s1 = new String("some text");\nlet s2 = s1.substring(2);\ns1 = null;\n')])])]),a("p",[e._v("这种行为可以让原始值拥有对象的行为。对布尔值和数值而言，以上 3 步也会在后台发生，只不过使用的是"),a("code",[e._v("Boolean")]),e._v("和"),a("code",[e._v("Number")]),e._v("包装类型而已。")]),e._v(" "),a("p",[e._v("引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过"),a("code",[e._v("new")]),e._v("实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。这意味着不能在运行时给原始值添加属性和方法。比如下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let s1 = "some text";\ns1.color = "red";\nconsole.log(s1.color);  // undefined\n')])])]),a("p",[e._v("这里的第二行代码尝试给字符串"),a("code",[e._v("s1")]),e._v("添加了一个"),a("code",[e._v("color")]),e._v("属性。可是，第三行代码访问"),a("code",[e._v("color")]),e._v("属性时，它却不见了。原因就是第二行代码运行时会临时创建一个"),a("code",[e._v("String")]),e._v("对象，而当第三行代码执行时，这个对象已经被销毁了。实际上，第三行代码在这里创建了自己的"),a("code",[e._v("String")]),e._v("对象，但这个对象没有"),a("code",[e._v("color")]),e._v("属性。")]),e._v(" "),a("p",[e._v("可以显式地使用"),a("code",[e._v("Boolean")]),e._v("、"),a("code",[e._v("Number")]),e._v("和"),a("code",[e._v("String")]),e._v("构造函数创建原始值包装对象。不过应该在确实必要时再这么做，否则容易让开发者疑惑，分不清它们到底是原始值还是引用值。在原始值包装类型的实例上调用"),a("code",[e._v("typeof")]),e._v("会返回"),a("code",[e._v('"object"')]),e._v("，所有原始值包装对象都会转换为布尔值"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("另外，"),a("code",[e._v("Object")]),e._v("构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let obj = new Object("some text");\nconsole.log(obj instanceof String);  // true\n')])])]),a("p",[e._v("如果传给"),a("code",[e._v("Object")]),e._v("的是字符串，则会创建一个"),a("code",[e._v("String")]),e._v("的实例。如果是数值，则会创建"),a("code",[e._v("Number")]),e._v("的实例。布尔值则会得到"),a("code",[e._v("Boolean")]),e._v("的实例。")]),e._v(" "),a("p",[e._v("注意，使用"),a("code",[e._v("new")]),e._v("调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let value = "25";\nlet number = Number(value);    // 转型函数\nconsole.log(typeof number);    // "number"\nlet obj = new Number(value);   // 构造函数\nconsole.log(typeof obj);       // "object"\n')])])]),a("p",[e._v("在这个例子中，变量"),a("code",[e._v("number")]),e._v("中保存的是一个值为 25 的原始数值，而变量"),a("code",[e._v("obj")]),e._v("中保存的是一个"),a("code",[e._v("Number")]),e._v("的实例。")]),e._v(" "),a("p",[e._v("虽然不推荐显式创建原始值包装类型的实例，但它们对于操作原始值的功能是很重要的。每个原始值包装类型都有相应的一套方法来方便数据操作。")]),e._v(" "),a("h3",{attrs:{id:"_5-3-1-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-boolean"}},[e._v("#")]),e._v(" 5.3.1 　"),a("code",[e._v("Boolean")])]),e._v(" "),a("p",[a("code",[e._v("Boolean")]),e._v("是对应布尔值的引用类型。要创建一个"),a("code",[e._v("Boolean")]),e._v("对象，就使用"),a("code",[e._v("Boolean")]),e._v("构造函数并传入"),a("code",[e._v("true")]),e._v("或"),a("code",[e._v("false")]),e._v("，如下例所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let booleanObject = new Boolean(true);\n")])])]),a("p",[a("code",[e._v("Boolean")]),e._v("的实例会重写"),a("code",[e._v("valueOf()")]),e._v("方法，返回一个原始值"),a("code",[e._v("true")]),e._v("或"),a("code",[e._v("false")]),e._v("。"),a("code",[e._v("toString()")]),e._v("方法被调用时也会被覆盖，返回字符串"),a("code",[e._v('"true"')]),e._v("或"),a("code",[e._v('"false"')]),e._v("。不过，"),a("code",[e._v("Boolean")]),e._v("对象在 ECMAScript 中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用"),a("code",[e._v("Boolean")]),e._v("对象时，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let falseObject = new Boolean(false);\nlet result = falseObject && true;\nconsole.log(result); // true\n\nlet falseValue = false;\nresult = falseValue && true;\nconsole.log(result); // false\n")])])]),a("p",[e._v("在这段代码中，我们创建一个值为"),a("code",[e._v("false")]),e._v("的"),a("code",[e._v("Boolean")]),e._v("对象。然后，在一个布尔表达式中通过"),a("code",[e._v("&&")]),e._v("操作将这个对象与一个原始值"),a("code",[e._v("true")]),e._v("组合起来。在布尔算术中，"),a("code",[e._v("false && true")]),e._v("等于"),a("code",[e._v("false")]),e._v("。可是，这个表达式是对"),a("code",[e._v("falseObject")]),e._v("对象而不是对它表示的值（"),a("code",[e._v("false")]),e._v("）求值。前面刚刚说过，所有对象在布尔表达式中都会自动转换为"),a("code",[e._v("true")]),e._v("，因此"),a("code",[e._v("falseObject")]),e._v("在这个表达式里实际上表示一个"),a("code",[e._v("true")]),e._v("值。那么"),a("code",[e._v("true && true")]),e._v("当然是"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("除此之外，原始值和引用值（"),a("code",[e._v("Boolean")]),e._v("对象）还有几个区别。首先，"),a("code",[e._v("typeof")]),e._v("操作符对原始值返回"),a("code",[e._v('"boolean"')]),e._v("，但对引用值返回"),a("code",[e._v('"object"')]),e._v("。同样，"),a("code",[e._v("Boolean")]),e._v("对象是"),a("code",[e._v("Boolean")]),e._v("类型的实例，在使用"),a("code",[e._v("instaceof")]),e._v("操作符时返回"),a("code",[e._v("true")]),e._v("，但对原始值则返回"),a("code",[e._v("false")]),e._v("，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(typeof falseObject);             // object\nconsole.log(typeof falseValue);              // boolean\nconsole.log(falseObject instanceof Boolean); // true\nconsole.log(falseValue instanceof Boolean);  // false\n")])])]),a("p",[e._v("理解原始布尔值和"),a("code",[e._v("Boolean")]),e._v("对象之间的区别非常重要，强烈建议永远不要使用后者。")]),e._v(" "),a("h3",{attrs:{id:"_5-3-2-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-number"}},[e._v("#")]),e._v(" 5.3.2 　"),a("code",[e._v("Number")])]),e._v(" "),a("p",[a("code",[e._v("Number")]),e._v("是对应数值的引用类型。要创建一个"),a("code",[e._v("Number")]),e._v("对象，就使用"),a("code",[e._v("Number")]),e._v("构造函数并传入一个数值，如下例所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let numberObject = new Number(10);\n")])])]),a("p",[e._v("与"),a("code",[e._v("Boolean")]),e._v("类型一样，"),a("code",[e._v("Number")]),e._v("类型重写了"),a("code",[e._v("valueOf()")]),e._v("、"),a("code",[e._v("toLocaleString()")]),e._v("和"),a("code",[e._v("toString()")]),e._v("方法。"),a("code",[e._v("valueOf()")]),e._v("方法返回"),a("code",[e._v("Number")]),e._v("对象表示的原始数值，另外两个方法返回数值字符串。"),a("code",[e._v("toString()")]),e._v("方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = 10;\nconsole.log(num.toString());   // "10"\nconsole.log(num.toString(2));  // "1010"\nconsole.log(num.toString(8));  // "12"\nconsole.log(num.toString(10)); // "10"\nconsole.log(num.toString(16)); // "a"\n')])])]),a("p",[e._v("除了继承的方法，"),a("code",[e._v("Number")]),e._v("类型还提供了几个用于将数值格式化为字符串的方法。")]),e._v(" "),a("p",[a("code",[e._v("toFixed()")]),e._v("方法返回包含指定小数点位数的数值字符串，如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = 10;\nconsole.log(num.toFixed(2)); // "10.00"\n')])])]),a("p",[e._v("这里的"),a("code",[e._v("toFixed()")]),e._v("方法接收了参数"),a("code",[e._v("2")]),e._v("，表示返回的数值字符串要包含两位小数。结果返回值为"),a("code",[e._v('"10.00"')]),e._v("，小数位填充了 0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = 10.005;\nconsole.log(num.toFixed(2)); // "10.01"\n')])])]),a("p",[a("code",[e._v("toFixed()")]),e._v("自动舍入的特点可以用于处理货币。不过要注意的是，多个浮点数值的数学计算不一定得到精确的结果。比如，"),a("code",[e._v("0.1 + 0.2 = 0.30000000000000004")]),e._v("。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("toFixed()")]),e._v("方法可以表示有 0~20 个小数位的数值。某些浏览器可能支持更大的范围，但这是通常被支持的范围。")])]),e._v(" "),a("p",[e._v("另一个用于格式化数值的方法是"),a("code",[e._v("toExponential()")]),e._v("，返回以科学记数法（也称为指数记数法）表示的数值字符串。与"),a("code",[e._v("toFixed()")]),e._v("一样，"),a("code",[e._v("toExponential()")]),e._v("也接收一个参数，表示结果中小数的位数。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = 10;\nconsole.log(num.toExponential(1));  // "1.0e+1"\n')])])]),a("p",[e._v("这段代码的输出为"),a("code",[e._v('"1.0e+1"')]),e._v("。一般来说，这么小的数不用表示为科学记数法形式。如果想得到数值最适当的形式，那么可以使用"),a("code",[e._v("toPrecision()")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("toPrecision()")]),e._v("方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。来看几个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = 99;\nconsole.log(num.toPrecision(1)); // "1e+2"\nconsole.log(num.toPrecision(2)); // "99"\nconsole.log(num.toPrecision(3)); // "99.0"\n')])])]),a("p",[e._v("在这个例子中，首先要用 1 位数字表示数值 99，得到"),a("code",[e._v('"1e+2"')]),e._v("，也就是 100。因为 99 不能只用 1 位数字来精确表示，所以这个方法就将它舍入为 100，这样就可以只用 1 位数字（及其科学记数法形式）来表示了。用 2 位数字表示 99 得到"),a("code",[e._v('"99"')]),e._v("，用 3 位数字则是"),a("code",[e._v('"99.0"')]),e._v("。本质上，"),a("code",[e._v("toPrecision()")]),e._v("方法会根据数值和精度来决定调用"),a("code",[e._v("toFixed()")]),e._v("还是"),a("code",[e._v("toExponential()")]),e._v("。为了以正确的小数位精确表示数值，这 3 个方法都会向上或向下舍入。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("toPrecision()")]),e._v("方法可以表示带 1~21 个小数位的数值。某些浏览器可能支持更大的范围，但这是通常被支持的范围。")])]),e._v(" "),a("p",[e._v("与"),a("code",[e._v("Boolean")]),e._v("对象类似，"),a("code",[e._v("Number")]),e._v("对象也为数值提供了重要能力。但是，考虑到两者存在同样的潜在问题，因此并不建议直接实例化"),a("code",[e._v("Number")]),e._v("对象。在处理原始数值和引用数值时，"),a("code",[e._v("typeof")]),e._v("和"),a("code",[e._v("instacnceof")]),e._v("操作符会返回不同的结果，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let numberObject = new Number(10);\nlet numberValue = 10;\nconsole.log(typeof numberObject);             // "object"\nconsole.log(typeof numberValue);              // "number"\nconsole.log(numberObject instanceof Number);  // true\nconsole.log(numberValue instanceof Number);   // false\n')])])]),a("p",[e._v("原始数值在调用"),a("code",[e._v("typeof")]),e._v("时始终返回"),a("code",[e._v('"number"')]),e._v("，而"),a("code",[e._v("Number")]),e._v("对象则返回"),a("code",[e._v('"object"')]),e._v("。类似地，"),a("code",[e._v("Number")]),e._v("对象是"),a("code",[e._v("Number")]),e._v("类型的实例，而原始数值不是。")]),e._v(" "),a("p",[a("strong",[e._v("isInteger()方法与安全整数")])]),e._v(" "),a("p",[e._v("ES6 新增了"),a("code",[e._v("Number.isInteger()")]),e._v("方法，用于辨别一个数值是否保存为整数。有时候，小数位的 0 可能会让人误以为数值是一个浮点值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(Number.isInteger(1));    // true\nconsole.log(Number.isInteger(1.00)); // true\nconsole.log(Number.isInteger(1.01)); // false\n")])])]),a("p",[e._v("IEEE 754 数值格式有一个特殊的数值范围，在这个范围内二进制值可以表示一个整数值。这个数值范围从"),a("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v("（"),a("img",{attrs:{src:"https://private.codecogs.com/gif.latex?-2%5E%7B53%7D+1",alt:"-2^{53}+1"}}),e._v("）到"),a("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v("（"),a("img",{attrs:{src:"https://private.codecogs.com/gif.latex?2%5E%7B53%7D-1",alt:"2^{53}-1"}}),e._v("）。对超出这个范围的数值，即使尝试保存为整数，IEEE 754 编码格式也意味着二进制值可能会表示一个完全不同的数值。为了鉴别整数是否在这个范围内，可以使用"),a("code",[e._v("Number.isSafeInteger()")]),e._v("方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(Number.isSafeInteger(-1 * (2 ** 53)));      // false\nconsole.log(Number.isSafeInteger(-1 * (2 ** 53) + 1));  // true\n\nconsole.log(Number.isSafeInteger(2 ** 53));             // false\nconsole.log(Number.isSafeInteger((2 ** 53) - 1));       // true\n")])])]),a("h3",{attrs:{id:"_5-3-3-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-3-string"}},[e._v("#")]),e._v(" 5.3.3 　"),a("code",[e._v("String")])]),e._v(" "),a("p",[a("code",[e._v("String")]),e._v("是对应字符串的引用类型。要创建一个"),a("code",[e._v("String")]),e._v("对象，使用"),a("code",[e._v("String")]),e._v("构造函数并传入一个数值，如下例所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringObject = new String("hello world");\n')])])]),a("p",[a("code",[e._v("String")]),e._v("对象的方法可以在所有字符串原始值上调用。3 个继承的方法"),a("code",[e._v("valueOf()")]),e._v("、"),a("code",[e._v("toLcaleString()")]),e._v("和"),a("code",[e._v("toString()")]),e._v("都返回对象的原始字符串值。")]),e._v(" "),a("p",[e._v("每个"),a("code",[e._v("String")]),e._v("对象都有一个"),a("code",[e._v("length")]),e._v("属性，表示字符串中字符的数量。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello world";\nconsole.log(stringValue.length); // "11"\n')])])]),a("p",[e._v("这个例子输出了字符串"),a("code",[e._v('"hello world"')]),e._v("中包含的字符数量："),a("code",[e._v("11")]),e._v("。注意，即使字符串中包含双字节字符（而不是单字节的 ASCII 字符），也仍然会按单字符来计数。")]),e._v(" "),a("p",[a("code",[e._v("String")]),e._v("类型提供了很多方法来解析和操作字符串。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("JavaScript 字符")])]),e._v(" "),a("p",[e._v("JavaScript 字符串由 16 位码元（code unit）组成。对多数字符来说，每 16 位码元对应一个字符。换句话说，字符串的"),a("code",[e._v("length")]),e._v("属性表示字符串包含多少 16 位码元：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "abcde";\n\nconsole.log(message.length); // 5\n')])])]),a("p",[e._v("此外，"),a("code",[e._v("charAt()")]),e._v("方法返回给定索引位置的字符，由传给方法的整数参数指定。具体来说，这个方法查找指定索引位置的 16 位码元，并返回该码元对应的字符：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "abcde";\n\nconsole.log(message.charAt(2)); // "c"\n')])])]),a("p",[e._v("JavaScript 字符串使用了两种 Unicode 编码混合的策略：UCS-2 和 UTF-16。对于可以采用 16 位编码的字符（U+0000~U+FFFF），这两种编码实际上是一样的。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　要深入了解关于字符编码的内容，推荐 Joel Spolsky 写的博客文章：“The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)”。")]),e._v(" "),a("p",[e._v("另一个有用的资源是 Mathias Bynens 的博文：“JavaScript's Internal Character Encoding: UCS-2 or UTF-16?”。")])]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("charCodeAt()")]),e._v("方法可以查看指定码元的字符编码。这个方法返回指定索引位置的码元值，索引以整数指定。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "abcde";\n\n// Unicode "Latin small letter C"的编码是U+0063\nconsole.log(message.charCodeAt(2));  // 99\n\n// 十进制99等于十六进制63\nconsole.log(99 === 0x63);            // true\n')])])]),a("p",[a("code",[e._v("fromCharCode()")]),e._v("方法用于根据给定的 UTF-16 码元创建字符串中的字符。这个方法可以接受任意多个数值，并返回将所有数值对应的字符拼接起来的字符串：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Unicode "Latin small letter A"的编码是U+0061\n// Unicode "Latin small letter B"的编码是U+0062\n// Unicode "Latin small letter C"的编码是U+0063\n// Unicode "Latin small letter D"的编码是U+0064\n// Unicode "Latin small letter E"的编码是U+0065\n\nconsole.log(String.fromCharCode(0x61, 0x62, 0x63, 0x64, 0x65));  // "abcde"\n\n// 0x0061 === 97\n// 0x0062 === 98\n// 0x0063 === 99\n// 0x0064 === 100\n// 0x0065 === 101\n\nconsole.log(String.fromCharCode(97, 98, 99, 100, 101));          // "abcde"\n')])])]),a("p",[e._v("对于 U+0000~U+FFFF 范围内的字符，"),a("code",[e._v("length")]),e._v("、"),a("code",[e._v("charAt()")]),e._v("、"),a("code",[e._v("charCodeAt()")]),e._v("和"),a("code",[e._v("fromCharCode()")]),e._v("返回的结果都跟预期是一样的。这是因为在这个范围内，每个字符都是用 16 位表示的，而这几个方法也都基于 16 位码元完成操作。只要字符编码大小与码元大小一一对应，这些方法就能如期工作。")]),e._v(" "),a("p",[e._v("这个对应关系在扩展到 Unicode 增补字符平面时就不成立了。问题很简单，即 16 位只能唯一表示 65 536 个字符。这对于大多数语言字符集是足够了，在 Unicode 中称为"),a("strong",[e._v("基本多语言平面")]),e._v("（BMP）。为了表示更多的字符，Unicode 采用了一个策略，即每个字符使用另外 16 位去选择一个"),a("strong",[e._v("增补平面")]),e._v("。这种每个字符使用两个 16 位码元的策略称为"),a("strong",[e._v("代理对")]),e._v("。")]),e._v(" "),a("p",[e._v("在涉及增补平面的字符时，前面讨论的字符串方法就会出问题。比如，下面的例子中使用了一个笑脸表情符号，也就是一个使用代理对编码的字符：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// "smiling face with smiling eyes" 表情符号的编码是U+1F60A\n// 0x1F60A === 128522\nlet message = "ab☺de";\n\nconsole.log(message.length);          // 6\nconsole.log(message.charAt(1));       // b\nconsole.log(message.charAt(2));       // <?>\nconsole.log(message.charAt(3));       // <?>\nconsole.log(message.charAt(4));       // d\n\nconsole.log(message.charCodeAt(1));   // 98\nconsole.log(message.charCodeAt(2));   // 55357\nconsole.log(message.charCodeAt(3));   // 56842\nconsole.log(message.charCodeAt(4));   // 100\n\nconsole.log(String.fromCodePoint(0x1F60A)); // ☺\n\nconsole.log(String.fromCharCode(97, 98, 55357, 56842, 100, 101)); // ab☺de\n')])])]),a("p",[e._v("这些方法仍然将 16 位码元当作一个字符，事实上索引 2 和索引 3 对应的码元应该被看成一个代理对，只对应一个字符。"),a("code",[e._v("fromCharCode()")]),e._v("方法仍然返回正确的结果，因为它实际上是基于提供的二进制表示直接组合成字符串。浏览器可以正确解析代理对（由两个码元构成），并正确地将其识别为一个 Unicode 笑脸字符。")]),e._v(" "),a("p",[e._v("为正确解析既包含单码元字符又包含代理对字符的字符串，可以使用"),a("code",[e._v("codePointAt()")]),e._v("来代替"),a("code",[e._v("charCodeAt()")]),e._v("。跟使用"),a("code",[e._v("charCodeAt()")]),e._v("时类似，"),a("code",[e._v("codePointAt()")]),e._v("接收 16 位码元的索引并返回该索引位置上的码点（code point）。"),a("strong",[e._v("码点")]),e._v("是 Unicode 中一个字符的完整标识。比如，"),a("code",[e._v('"c"')]),e._v('的码点是 0x0063，而"☺"的码点是 0x1F60A。码点可能是 16 位，也可能是 32 位，而'),a("code",[e._v("codePointAt()")]),e._v("方法可以从指定码元位置识别完整的码点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "ab☺de";\n\nconsole.log(message.codePointAt(1)); // 98\nconsole.log(message.codePointAt(2)); // 128522\nconsole.log(message.codePointAt(3)); // 56842\nconsole.log(message.codePointAt(4)); // 100\n')])])]),a("p",[e._v("注意，如果传入的码元索引并非代理对的开头，就会返回错误的码点。这种错误只有检测单个字符的时候才会出现，可以通过从左到右按正确的码元数遍历字符串来规避。迭代字符串可以智能地识别代理对的码点：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('console.log([..."ab☺de"]); // ["a", "b", "☺", "d", "e"]\n')])])]),a("p",[e._v("与"),a("code",[e._v("charCodeAt()")]),e._v("有对应的"),a("code",[e._v("codePointAt()")]),e._v("一样，"),a("code",[e._v("fromCharCode()")]),e._v("也有一个对应的"),a("code",[e._v("fromCodePoint()")]),e._v("。这个方法接收任意数量的码点，返回对应字符拼接起来的字符串：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(String.fromCharCode(97, 98, 55357, 56842, 100, 101));  // ab☺de\nconsole.log(String.fromCodePoint(97, 98, 128522, 100, 101));       // ab☺de\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("normalize()方法")])]),e._v(" "),a("p",[e._v("某些 Unicode 字符可以有多种编码方式。有的字符既可以通过一个 BMP 字符表示，也可以通过一个代理对表示。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// U+00C5：上面带圆圈的大写拉丁字母A\nconsole.log(String.fromCharCode(0x00C5));          // Å\n\n// U+212B：长度单位“埃”\nconsole.log(String.fromCharCode(0x212B));          // Å\n\n// U+004：大写拉丁字母A\n// U+030A：上面加个圆圈\nconsole.log(String.fromCharCode(0x0041, 0x030A));  // Å\n")])])]),a("p",[e._v("比较操作符不在乎字符看起来是什么样的，因此这 3 个字符互不相等。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let a1 = String.fromCharCode(0x00C5),\n    a2 = String.fromCharCode(0x212B),\n    a3 = String.fromCharCode(0x0041, 0x030A);\n\nconsole.log(a1, a2, a3); // Å, Å, Å\n\nconsole.log(a1 === a2);  // false\nconsole.log(a1 === a3);  // false\nconsole.log(a2 === a3);  // false\n")])])]),a("p",[e._v("为解决这个问题，Unicode 提供了 4 种规范化形式，可以将类似上面的字符规范化为一致的格式，无论底层字符的代码是什么。这 4 种规范化形式是：NFD（Normalization Form D）、NFC（Normalization Form C）、NFKD（Normalization Form KD）和 NFKC（Normalization Form KC）。可以使用"),a("code",[e._v("normalize()")]),e._v("方法对字符串应用上述规范化形式，使用时需要传入表示哪种形式的字符串："),a("code",[e._v('"NFD"')]),e._v("、"),a("code",[e._v('"NFC"')]),e._v("、"),a("code",[e._v('"NFKD"')]),e._v("或"),a("code",[e._v('"NFKC"')]),e._v("。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　这 4 种规范化形式的具体细节超出了本书范围，有兴趣的读者可以自行参考"),a("em",[e._v("UAX 15#: Unicode Normalization Forms")]),e._v("中的 1.2 节“Normalization Forms”。")])]),e._v(" "),a("p",[e._v("通过比较字符串与其调用"),a("code",[e._v("normalize()")]),e._v("的返回值，就可以知道该字符串是否已经规范化了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let a1 = String.fromCharCode(0x00C5),\n    a2 = String.fromCharCode(0x212B),\n    a3 = String.fromCharCode(0x0041, 0x030A);\n\n// U+00C5是对0+212B进行NFC/NFKC规范化之后的结果\nconsole.log(a1 === a1.normalize("NFD"));  // false\nconsole.log(a1 === a1.normalize("NFC"));  // true\nconsole.log(a1 === a1.normalize("NFKD")); // false\nconsole.log(a1 === a1.normalize("NFKC")); // true\n\n// U+212B是未规范化的\nconsole.log(a2 === a2.normalize("NFD"));  // false\nconsole.log(a2 === a2.normalize("NFC"));  // false\nconsole.log(a2 === a2.normalize("NFKD")); // false\nconsole.log(a2 === a2.normalize("NFKC")); // false\n\n// U+0041/U+030A是对0+212B进行NFD/NFKD规范化之后的结果\nconsole.log(a3 === a3.normalize("NFD"));  // true\nconsole.log(a3 === a3.normalize("NFC"));  // false\nconsole.log(a3 === a3.normalize("NFKD")); // true\nconsole.log(a3 === a3.normalize("NFKC")); // false\n')])])]),a("p",[e._v("选择同一种规范化形式可以让比较操作符返回正确的结果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let a1 = String.fromCharCode(0x00C5),\n    a2 = String.fromCharCode(0x212B),\n    a3 = String.fromCharCode(0x0041, 0x030A);\n\nconsole.log(a1.normalize("NFD") === a2.normalize("NFD"));    // true\nconsole.log(a2.normalize("NFKC") === a3.normalize("NFKC"));  // true\nconsole.log(a1.normalize("NFC") === a3.normalize("NFC"));    // true\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("字符串操作方法")])]),e._v(" "),a("p",[e._v("本节介绍几个操作字符串值的方法。首先是"),a("code",[e._v("concat()")]),e._v("，用于将一个或多个字符串拼接成一个新字符串。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello ";\nlet result = stringValue.concat("world");\n\nconsole.log(result);      // "hello world"\nconsole.log(stringValue); // "hello"\n')])])]),a("p",[e._v("在这个例子中，对"),a("code",[e._v("stringValue")]),e._v("调用"),a("code",[e._v("concat()")]),e._v("方法的结果是得到"),a("code",[e._v('"hello world"')]),e._v("，但"),a("code",[e._v("stringValue")]),e._v("的值保持不变。"),a("code",[e._v("concat()")]),e._v("方法可以接收任意多个参数，因此可以一次性拼接多个字符串，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello ";\nlet result = stringValue.concat("world", "!");\n\nconsole.log(result);      // "hello world!"\nconsole.log(stringValue); // "hello"\n')])])]),a("p",[e._v("这个修改后的例子将字符串"),a("code",[e._v('"world"')]),e._v("和"),a("code",[e._v('"!"')]),e._v("追加到了"),a("code",[e._v('"hello "')]),e._v("后面。虽然"),a("code",[e._v("concat()")]),e._v("方法可以拼接字符串，但更常用的方式是使用加号操作符（"),a("code",[e._v("+")]),e._v("）。而且多数情况下，对于拼接多个字符串来说，使用加号更方便。")]),e._v(" "),a("p",[e._v("ECMAScript 提供了 3 个从字符串中提取子字符串的方法："),a("code",[e._v("slice()")]),e._v("、"),a("code",[e._v("substr()")]),e._v("和"),a("code",[e._v("substring()")]),e._v("。这 3 个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。对"),a("code",[e._v("slice()")]),e._v("和"),a("code",[e._v("substring()")]),e._v("而言，第二个参数是提取结束的位置（即该位置之前的字符会被提取出来）。对"),a("code",[e._v("substr()")]),e._v("而言，第二个参数表示返回的子字符串数量。任何情况下，省略第二个参数都意味着提取到字符串末尾。与"),a("code",[e._v("concat()")]),e._v("方法一样，"),a("code",[e._v("slice()")]),e._v("、"),a("code",[e._v("substr()")]),e._v("和"),a("code",[e._v("substring()")]),e._v("也不会修改调用它们的字符串，而只会返回提取到的原始新字符串值。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello world";\nconsole.log(stringValue.slice(3));       // "lo world"\nconsole.log(stringValue.substring(3));   // "lo world"\nconsole.log(stringValue.substr(3));      // "lo world"\nconsole.log(stringValue.slice(3, 7));    // "lo w"\nconsole.log(stringValue.substring(3,7)); // "lo w"\nconsole.log(stringValue.substr(3, 7));   // "lo worl"\n')])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("slice()")]),e._v("、"),a("code",[e._v("substr()")]),e._v("和"),a("code",[e._v("substring()")]),e._v("是以相同方式被调用的，而且多数情况下返回的值也相同。如果只传一个参数"),a("code",[e._v("3")]),e._v("，则所有方法都将返回"),a("code",[e._v('"lo world"')]),e._v("，因为"),a("code",[e._v('"hello"')]),e._v("中"),a("code",[e._v('"l"')]),e._v("位置为 3。如果传入两个参数"),a("code",[e._v("3")]),e._v("和"),a("code",[e._v("7")]),e._v("，则"),a("code",[e._v("slice()")]),e._v("和"),a("code",[e._v("substring()")]),e._v("返回"),a("code",[e._v('"lo w"')]),e._v("（因为"),a("code",[e._v('"world"')]),e._v("中"),a("code",[e._v('"o"')]),e._v("在位置 7，不包含），而"),a("code",[e._v("substr()")]),e._v("返回"),a("code",[e._v('"lo worl"')]),e._v("，因为第二个参数对它而言表示返回的字符数。")]),e._v(" "),a("p",[e._v("当某个参数是负值时，这 3 个方法的行为又有不同。比如，"),a("code",[e._v("slice()")]),e._v("方法将所有负值参数都当成字符串长度加上负参数值。")]),e._v(" "),a("p",[e._v("而"),a("code",[e._v("substr()")]),e._v("方法将第一个负参数值当成字符串长度加上该值，将第二个负参数值转换为 0。"),a("code",[e._v("substring()")]),e._v("方法会将所有负参数值都转换为 0。看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello world";\nconsole.log(stringValue.slice(-3));         // "rld"\nconsole.log(stringValue.substring(-3));     // "hello world"\nconsole.log(stringValue.substr(-3));        // "rld"\nconsole.log(stringValue.slice(3, -4));      // "lo w"\nconsole.log(stringValue.substring(3, -4));  // "hel"\nconsole.log(stringValue.substr(3, -4));     // "" (empty string)\n')])])]),a("p",[e._v("这个例子明确演示了 3 个方法的差异。在给"),a("code",[e._v("slice()")]),e._v("和"),a("code",[e._v("substr()")]),e._v("传入负参数时，它们的返回结果相同。这是因为"),a("code",[e._v("-3")]),e._v("会被转换为"),a("code",[e._v("8")]),e._v("（长度加上负参数），实际上调用的是"),a("code",[e._v("slice(8)")]),e._v("和"),a("code",[e._v("substr(8)")]),e._v("。而"),a("code",[e._v("substring()")]),e._v("方法返回整个字符串，因为"),a("code",[e._v("-3")]),e._v("会转换为"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("p",[e._v("在第二个参数是负值时，这 3 个方法各不相同。"),a("code",[e._v("slice()")]),e._v("方法将第二个参数转换为"),a("code",[e._v("7")]),e._v("，实际上相当于调用"),a("code",[e._v("slice(3, 7)")]),e._v("，因此返回"),a("code",[e._v('"lo w"')]),e._v("。而"),a("code",[e._v("substring()")]),e._v("方法会将第二个参数转换为"),a("code",[e._v("0")]),e._v("，相当于调用"),a("code",[e._v("substring(3, 0)")]),e._v("，等价于"),a("code",[e._v("substring(0, 3)")]),e._v("，这是因为这个方法会将较小的参数作为起点，将较大的参数作为终点。对"),a("code",[e._v("substr()")]),e._v("来说，第二个参数会被转换为"),a("code",[e._v("0")]),e._v("，意味着返回的字符串包含零个字符，因而会返回一个空字符串。")])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("字符串位置方法")])]),e._v(" "),a("p",[e._v("有两个方法用于在字符串中定位子字符串："),a("code",[e._v("indexOf()")]),e._v("和"),a("code",[e._v("lastIndexOf()")]),e._v("。这两个方法从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回"),a("code",[e._v("-1")]),e._v("）。两者的区别在于，"),a("code",[e._v("indexOf()")]),e._v("方法从字符串开头开始查找子字符串，而"),a("code",[e._v("lastIndexOf()")]),e._v("方法从字符串末尾开始查找子字符串。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello world";\nconsole.log(stringValue.indexOf("o"));     // 4\nconsole.log(stringValue.lastIndexOf("o")); // 7\n')])])]),a("p",[e._v("这里，字符串中第一个"),a("code",[e._v('"o"')]),e._v("的位置是 4，即"),a("code",[e._v('"hello"')]),e._v("中的"),a("code",[e._v('"o"')]),e._v("。最后一个"),a("code",[e._v('"o"')]),e._v("的位置是 7，即"),a("code",[e._v('"world"')]),e._v("中的"),a("code",[e._v('"o"')]),e._v("。如果字符串中只有一个"),a("code",[e._v('"o"')]),e._v("，则"),a("code",[e._v("indexOf()")]),e._v("和"),a("code",[e._v("lastIndexOf()")]),e._v("返回同一个位置。")]),e._v(" "),a("p",[e._v("这两个方法都可以接收可选的第二个参数，表示开始搜索的位置。这意味着，"),a("code",[e._v("indexOf()")]),e._v("会从这个参数指定的位置开始向字符串末尾搜索，忽略该位置之前的字符；"),a("code",[e._v("lastIndexOf()")]),e._v("则会从这个参数指定的位置开始向字符串开头搜索，忽略该位置之后直到字符串末尾的字符。下面看一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello world";\nconsole.log(stringValue.indexOf("o", 6));     // 7\nconsole.log(stringValue.lastIndexOf("o", 6)); // 4\n')])])]),a("p",[e._v("在传入第二个参数"),a("code",[e._v("6")]),e._v("以后，结果跟前面的例子恰好相反。这一次，"),a("code",[e._v("indexOf()")]),e._v("返回"),a("code",[e._v("7")]),e._v("，因为它从位置 6（字符"),a("code",[e._v('"w"')]),e._v("）开始向后搜索字符串，在位置 7 找到了"),a("code",[e._v('"o"')]),e._v("。而"),a("code",[e._v("lastIndexOf()")]),e._v("返回"),a("code",[e._v("4")]),e._v("，因为它从位置 6 开始反向搜索至字符串开头，因此找到了"),a("code",[e._v('"hello"')]),e._v("中的"),a("code",[e._v('"o"')]),e._v("。像这样使用第二个参数并循环调用"),a("code",[e._v("indexOf()")]),e._v("或"),a("code",[e._v("lastIndexOf()")]),e._v("，就可以在字符串中找到所有的目标子字符串，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "Lorem ipsum dolor sit amet, consectetur adipisicing elit";\nlet positions = new Array();\nlet pos = stringValue.indexOf("e");\n\nwhile(pos > -1) {\n  positions.push(pos);\n  pos = stringValue.indexOf("e", pos + 1);\n}\n\nconsole.log(positions); // [3,24,32,35,52]\n')])])]),a("p",[e._v("这个例子逐步增大开始搜索的位置，通过"),a("code",[e._v("indexOf()")]),e._v("遍历了整个字符串。首先取得第一个"),a("code",[e._v('"e"')]),e._v("的位置，然后进入循环，将上一次的位置加 1 再传给"),a("code",[e._v("indexOf()")]),e._v("，确保搜索到最后一个子字符串实例之后。每个位置都保存在"),a("code",[e._v("positions")]),e._v("数组中，可供以后使用。")])])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[a("strong",[e._v("字符串包含方法")])]),e._v(" "),a("p",[e._v("ECMAScript 6 增加了 3 个用于判断字符串中是否包含另一个字符串的方法："),a("code",[e._v("startsWith()")]),e._v("、"),a("code",[e._v("endsWith()")]),e._v("和"),a("code",[e._v("includes()")]),e._v("。这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。它们的区别在于，"),a("code",[e._v("startsWith()")]),e._v("检查开始于索引 0 的匹配项，"),a("code",[e._v("endsWith()")]),e._v("检查开始于索引"),a("code",[e._v("(string.length - substring.length)")]),e._v("的匹配项，而"),a("code",[e._v("includes()")]),e._v("检查整个字符串：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "foobarbaz";\n\nconsole.log(message.startsWith("foo"));  // true\nconsole.log(message.startsWith("bar"));  // false\n\nconsole.log(message.endsWith("baz"));    // true\nconsole.log(message.endsWith("bar"));    // false\n\nconsole.log(message.includes("bar"));    // true\nconsole.log(message.includes("qux"));    // false\n')])])]),a("p",[a("code",[e._v("startsWith()")]),e._v("和"),a("code",[e._v("includes()")]),e._v("方法接收可选的第二个参数，表示开始搜索的位置。如果传入第二个参数，则意味着这两个方法会从指定位置向着字符串末尾搜索，忽略该位置之前的所有字符。下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "foobarbaz";\n\nconsole.log(message.startsWith("foo"));     // true\nconsole.log(message.startsWith("foo", 1));  // false\n\nconsole.log(message.includes("bar"));       // true\nconsole.log(message.includes("bar", 4));    // false\n')])])]),a("p",[a("code",[e._v("endsWith()")]),e._v("方法接收可选的第二个参数，表示应该当作字符串末尾的位置。如果不提供这个参数，那么默认就是字符串长度。如果提供这个参数，那么就好像字符串只有那么多字符一样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "foobarbaz";\n\nconsole.log(message.endsWith("bar"));     // false\nconsole.log(message.endsWith("bar", 6));  // true\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[a("strong",[e._v("trim()方法")])]),e._v(" "),a("p",[e._v("ECMAScript 在所有字符串上都提供了"),a("code",[e._v("trim()")]),e._v("方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "  hello world  ";\nlet trimmedStringValue = stringValue.trim();\nconsole.log(stringValue);         // "  hello world "\nconsole.log(trimmedStringValue);  // "hello world"\n')])])]),a("p",[e._v("由于"),a("code",[e._v("trim()")]),e._v("返回的是字符串的副本，因此原始字符串不受影响，即原本的前、后空格符都会保留。")]),e._v(" "),a("p",[e._v("另外，"),a("code",[e._v("trimeLeft()")]),e._v("和"),a("code",[e._v("trimRight()")]),e._v("方法分别用于从字符串开始和末尾清理空格符。")])])]),e._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("p",[a("strong",[e._v("repeat()方法")])]),e._v(" "),a("p",[e._v("ECMAScript 在所有字符串上都提供了"),a("code",[e._v("repeat()")]),e._v("方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "na ";\nconsole.log(stringValue.repeat(16) + "batman");\n// na na na na na na na na na na na na na na na na batman\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[a("p",[a("strong",[e._v("padStart()和 padEnd()方法")])]),e._v(" "),a("p",[a("code",[e._v("padStart()")]),e._v("和"),a("code",[e._v("padEnd()")]),e._v("方法会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格（U+0020）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "foo";\n\nconsole.log(stringValue.padStart(6));       // "   foo"\nconsole.log(stringValue.padStart(9, "."));  // "......foo"\n\nconsole.log(stringValue.padEnd(6));         // "foo   "\nconsole.log(stringValue.padEnd(9, "."));    // "foo......"\n')])])]),a("p",[e._v("可选的第二个参数并不限于一个字符。如果提供了多个字符的字符串，则会将其拼接并截断以匹配指定长度。此外，如果长度小于或等于字符串长度，则会返回原始字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "foo";\n\nconsole.log(stringValue.padStart(8, "bar")); // "barbafoo"\nconsole.log(stringValue.padStart(2));        // "foo"\n\nconsole.log(stringValue.padEnd(8, "bar"));   // "foobarba"\nconsole.log(stringValue.padEnd(2));          // "foo"\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("p",[a("strong",[e._v("字符串迭代与解构")])]),e._v(" "),a("p",[e._v("字符串的原型上暴露了一个"),a("code",[e._v("@@iterator")]),e._v("方法，表示可以迭代字符串的每个字符。可以像下面这样手动使用迭代器：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "abc";\nlet stringIterator = message[Symbol.iterator]();\n\nconsole.log(stringIterator.next());  // {value: "a", done: false}\nconsole.log(stringIterator.next());  // {value: "b", done: false}\nconsole.log(stringIterator.next());  // {value: "c", done: false}\nconsole.log(stringIterator.next());  // {value: undefined, done: true}\n')])])]),a("p",[e._v("在"),a("code",[e._v("for-of")]),e._v("循环中可以通过这个迭代器按序访问每个字符：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('for (const c of "abcde") {\n  console.log(c);\n}\n\n// a\n// b\n// c\n// d\n// e\n')])])]),a("p",[e._v("有了这个迭代器之后，字符串就可以通过解构操作符来解构了。比如，可以更方便地把字符串分割为字符数组：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "abcde";\n\nconsole.log([...message]); // ["a", "b", "c", "d", "e"]\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[a("p",[a("strong",[e._v("字符串大小写转换")])]),e._v(" "),a("p",[e._v("下一组方法涉及大小写转换，包括 4 个方法："),a("code",[e._v("toLowerCase()")]),e._v("、"),a("code",[e._v("toLocaleLowerCase()")]),e._v("、"),a("code",[e._v("toUpperCase()")]),e._v("和"),a("code",[e._v("toLocaleUpperCase()")]),e._v("。"),a("code",[e._v("toLowerCase()")]),e._v("和"),a("code",[e._v("toUpperCase()")]),e._v("方法是原来就有的方法，与"),a("code",[e._v("java.lang.String")]),e._v("中的方法同名。"),a("code",[e._v("toLocaleLowerCase()")]),e._v("和"),a("code",[e._v("toLocaleUpperCase()")]),e._v("方法旨在基于特定地区实现。在很多地区，地区特定的方法与通用的方法是一样的。但在少数语言中（如土耳其语），Unicode 大小写转换需应用特殊规则，要使用地区特定的方法才能实现正确转换。下面是几个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "hello world";\nconsole.log(stringValue.toLocaleUpperCase());  // "HELLO WORLD"\nconsole.log(stringValue.toUpperCase());        // "HELLO WORLD"\nconsole.log(stringValue.toLocaleLowerCase());  // "hello world"\nconsole.log(stringValue.toLowerCase());        // "hello world"\n')])])]),a("p",[e._v("这里，"),a("code",[e._v("toLowerCase()")]),e._v("和"),a("code",[e._v("toLocaleLowerCase()")]),e._v("都返回"),a("code",[e._v("hello world")]),e._v("，而"),a("code",[e._v("toUpperCase()")]),e._v("和"),a("code",[e._v("toLocaleUpperCase()")]),e._v("都返回"),a("code",[e._v("HELLO WORLD")]),e._v("。通常，如果不知道代码涉及什么语言，则最好使用地区特定的转换方法。")])])]),e._v(" "),a("ol",{attrs:{start:"11"}},[a("li",[a("p",[a("strong",[e._v("字符串模式匹配方法")])]),e._v(" "),a("p",[a("code",[e._v("String")]),e._v("类型专门为在字符串中实现模式匹配设计了几个方法。第一个就是"),a("code",[e._v("match()")]),e._v("方法，这个方法本质上跟"),a("code",[e._v("RegExp")]),e._v("对象的"),a("code",[e._v("exec()")]),e._v("方法相同。"),a("code",[e._v("match()")]),e._v("方法接收一个参数，可以是一个正则表达式字符串，也可以是一个"),a("code",[e._v("RegExp")]),e._v("对象。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "cat, bat, sat, fat";\nlet pattern = /.at/;\n\n// 等价于pattern.exec(text)\nlet matches = text.match(pattern);\nconsole.log(matches.index);      // 0\nconsole.log(matches[0]);         // "cat"\nconsole.log(pattern.lastIndex);  // 0\n')])])]),a("p",[a("code",[e._v("match()")]),e._v("方法返回的数组与"),a("code",[e._v("RegExp")]),e._v("对象的"),a("code",[e._v("exec()")]),e._v("方法返回的数组是一样的：第一个元素是与整个模式匹配的字符串，其余元素则是与表达式中的捕获组匹配的字符串（如果有的话）。")]),e._v(" "),a("p",[e._v("另一个查找模式的字符串方法是"),a("code",[e._v("search()")]),e._v("。这个方法唯一的参数与"),a("code",[e._v("match()")]),e._v("方法一样：正则表达式字符串或"),a("code",[e._v("RegExp")]),e._v("对象。这个方法返回模式第一个匹配的位置索引，如果没找到则返回-1。"),a("code",[e._v("search()")]),e._v("始终从字符串开头向后匹配模式。看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "cat, bat, sat, fat";\nlet pos = text.search(/at/);\nconsole.log(pos);  // 1\n')])])]),a("p",[e._v("这里，"),a("code",[e._v("search(/at/)")]),e._v("返回"),a("code",[e._v("1")]),e._v("，即"),a("code",[e._v('"at"')]),e._v("的第一个字符在字符串中的位置。")]),e._v(" "),a("p",[e._v("为简化子字符串替换操作，ECMAScript 提供了"),a("code",[e._v("replace()")]),e._v("方法。这个方法接收两个参数，第一个参数可以是一个"),a("code",[e._v("RegExp")]),e._v("对象或一个字符串（这个字符串不会转换为正则表达式），第二个参数可以是一个字符串或一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串。要想替换所有子字符串，第一个参数必须为正则表达式并且带全局标记，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "cat, bat, sat, fat";\nlet result = text.replace("at", "ond");\nconsole.log(result);  // "cond, bat, sat, fat"\n\nresult = text.replace(/at/g, "ond");\nconsole.log(result);  // "cond, bond, sond, fond"\n')])])]),a("p",[e._v("在这个例子中，字符串"),a("code",[e._v('"at"')]),e._v("先传给"),a("code",[e._v("replace()")]),e._v("函数，而替换文本是"),a("code",[e._v('"ond"')]),e._v("。结果是"),a("code",[e._v('"cat"')]),e._v("被修改为"),a("code",[e._v('"cond"')]),e._v("，而字符串的剩余部分保持不变。通过将第一个参数改为带全局标记的正则表达式，字符串中的所有"),a("code",[e._v('"at"')]),e._v("都被替换成了"),a("code",[e._v('"ond"')]),e._v("。")]),e._v(" "),a("p",[e._v("第二个参数是字符串的情况下，有几个特殊的字符序列，可以用来插入正则表达式操作的值。ECMA-262 中规定了下表中的值。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("字符序列")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("替换文本")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$$")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$&")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("匹配整个模式的子字符串。与"),a("code",[e._v("RegExp.lastMatch")]),e._v("相同")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$'")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("匹配的子字符串之前的字符串。与"),a("code",[e._v("RegExp.rightContext")]),e._v("相同")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\$`` | 匹配的子字符串之后的字符串。与")]),e._v("RegExp.leftContext`相同")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$*n*")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("匹配第"),a("code",[e._v("*n*")]),e._v("个捕获组的字符串，其中"),a("code",[e._v("*n*")]),e._v("是 0~9。比如，"),a("code",[e._v("$1")]),e._v("是匹配第一个捕获组的字符串，"),a("code",[e._v("$2")]),e._v("是匹配第二个捕获组的字符串，以此类推。如果没有捕获组，则值为空字符串")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("$*nn*")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("匹配第"),a("code",[e._v("*nn*")]),e._v("个捕获组字符串，其中"),a("code",[e._v("*nn*")]),e._v("是 01~99。比如，"),a("code",[e._v("$01")]),e._v("是匹配第一个捕获组的字符串，"),a("code",[e._v("$02")]),e._v("是匹配第二个捕获组的字符串，以此类推。如果没有捕获组，则值为空字符串")])])])]),e._v(" "),a("p",[e._v("使用这些特殊的序列，可以在替换文本中使用之前匹配的内容，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "cat, bat, sat, fat";\nresult = text.replace(/(.at)/g, "word ($1)");\nconsole.log(result);  // word (cat), word (bat), word (sat), word (fat)\n')])])]),a("p",[e._v("这里，每个以"),a("code",[e._v('"at"')]),e._v("结尾的词都会被替换成"),a("code",[e._v('"word"')]),e._v("后跟一对小括号，其中包含捕获组匹配的内容"),a("code",[e._v("$1")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("replace()")]),e._v("的第二个参数可以是一个函数。在只有一个匹配项时，这个函数会收到 3 个参数：与整个模式匹配的字符串、匹配项在字符串中的开始位置，以及整个字符串。在有多个捕获组的情况下，每个匹配捕获组的字符串也会作为参数传给这个函数，但最后两个参数还是与整个模式匹配的开始位置和原始字符串。这个函数应该返回一个字符串，表示应该把匹配项替换成什么。使用函数作为第二个参数可以更细致地控制替换过程，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function htmlEscape(text) {\n  return text.replace(/[<>"&]/g, function(match, pos, originalText) {\n    switch(match) {\n      case "<":\n        return "&lt;";\n      case ">":\n        return "&gt;";\n      case "&":\n        return "&amp;";\n      case "\\"":\n        return "&quot;";\n    }\n  });\n}\n\nconsole.log(htmlEscape("<p class=\\"greeting\\">Hello world!</p>"));\n// "&lt;p class=&quot;greeting&quot;&gt;Hello world!</p>"\n')])])]),a("p",[e._v("这里，函数"),a("code",[e._v("htmlEscape()")]),e._v("用于将一段 HTML 中的 4 个字符替换成对应的实体：小于号、大于号、和号，还有双引号（都必须经过转义）。实现这个任务最简单的办法就是用一个正则表达式查找这些字符，然后定义一个函数，根据匹配的每个字符分别返回特定的 HTML 实体。")]),e._v(" "),a("p",[e._v("最后一个与模式匹配相关的字符串方法是"),a("code",[e._v("split()")]),e._v("。这个方法会根据传入的分隔符将字符串拆分成数组。作为分隔符的参数可以是字符串，也可以是"),a("code",[e._v("RegExp")]),e._v("对象。（字符串分隔符不会被这个方法当成正则表达式。）还可以传入第二个参数，即数组大小，确保返回的数组不会超过指定大小。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let colorText = "red,blue,green,yellow";\nlet colors1 = colorText.split(",");       // ["red", "blue", "green", "yellow"]\nlet colors2 = colorText.split(",", 2);    // ["red", "blue"]\nlet colors3 = colorText.split(/[^,]+/);   // ["", ",", ",", ",", ""]\n')])])]),a("p",[e._v("在这里，字符串"),a("code",[e._v("colorText")]),e._v("是一个逗号分隔的颜色名称符串。调用"),a("code",[e._v('split(",")')]),e._v("会得到包含这些颜色名的数组，基于逗号进行拆分。要把数组元素限制为 2 个，传入第二个参数 2 即可。最后，使用正则表达式可以得到一个包含逗号的数组。注意在最后一次调用"),a("code",[e._v("split()")]),e._v("时，返回的数组前后包含两个空字符串。这是因为正则表达式指定的分隔符出现在了字符串开头（"),a("code",[e._v('"red"')]),e._v("）和末尾（"),a("code",[e._v('"yellow"')]),e._v("）。")])])]),e._v(" "),a("ol",{attrs:{start:"12"}},[a("li",[a("p",[a("strong",[e._v("localeCompare()方法")])]),e._v(" "),a("p",[e._v("最后一个方法是"),a("code",[e._v("localeCompare()")]),e._v("，这个方法比较两个字符串，返回如下 3 个值中的一个。")]),e._v(" "),a("ul",[a("li",[e._v("如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值。（通常是"),a("code",[e._v("-1")]),e._v("，具体还要看与实际值相关的实现。）")]),e._v(" "),a("li",[e._v("如果字符串与字符串参数相等，则返回"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("li",[e._v("如果按照字母表顺序，字符串应该排在字符串参数后头，则返回正值。（通常是"),a("code",[e._v("1")]),e._v("，具体还要看与实际值相关的实现。）")])]),e._v(" "),a("p",[e._v("下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let stringValue = "yellow";\nconsole.log(stringValue.localeCompare("brick"));  // 1\nconsole.log(stringValue.localeCompare("yellow")); // 0\nconsole.log(stringValue.localeCompare("zoo"));    // -1\n')])])]),a("p",[e._v("在这里，字符串"),a("code",[e._v('"yellow"')]),e._v("与 3 个不同的值进行了比较："),a("code",[e._v('"brick"')]),e._v("、"),a("code",[e._v('"yellow"')]),e._v("和"),a("code",[e._v('"zoo"')]),e._v("。"),a("code",[e._v('"brick"')]),e._v("按字母表顺序应该排在"),a("code",[e._v('"yellow"')]),e._v("前头，因此"),a("code",[e._v("localeCompare()")]),e._v("返回 1。"),a("code",[e._v('"yellow"')]),e._v("等于"),a("code",[e._v('"yellow"')]),e._v("，因此"),a("code",[e._v('"localeCompare()"')]),e._v("返回"),a("code",[e._v("0")]),e._v("。最后，"),a("code",[e._v('"zoo"')]),e._v("在"),a("code",[e._v('"yellow"')]),e._v("后面，因此"),a("code",[e._v("localeCompare()")]),e._v("返回"),a("code",[e._v("-1")]),e._v("。强调一下，因为返回的具体值可能因具体实现而异，所以最好像下面的示例中一样使用"),a("code",[e._v("localeCompare()")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function determineOrder(value) {\n  let result = stringValue.localeCompare(value);\n  if (result < 0) {\n    console.log(`The string 'yellow' comes before the string '${value}'.`);\n  } else if (result > 0) {\n    console.log(`The string 'yellow' comes after the string '${value}'.`);\n  } else {\n    console.log(`The string 'yellow' is equal to the string '${value}'.`);\n  }\n}\n\ndetermineOrder(\"brick\");\ndetermineOrder(\"yellow\");\ndetermineOrder(\"zoo\");\n")])])]),a("p",[e._v("这样一来，就可以保证在所有实现中都能正确判断字符串的顺序了。")]),e._v(" "),a("p",[a("code",[e._v("localeCompare()")]),e._v("的独特之处在于，实现所在的地区（国家和语言）决定了这个方法如何比较字符串。在美国，英语是 ECMAScript 实现的标准语言，"),a("code",[e._v("localeCompare()")]),e._v("区分大小写，大写字母排在小写字母前面。但其他地区未必是这种情况。")])])]),e._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[a("p",[a("strong",[e._v("HTML 方法")])]),e._v(" "),a("p",[e._v("早期的浏览器开发商认为使用 JavaScript 动态生成 HTML 标签是一个需求。因此，早期浏览器扩展了规范，增加了辅助生成 HTML 标签的方法。下表总结了这些 HTML 方法。不过，这些方法基本上已经没有人使用了，因为结果通常不是语义化的标记。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("方法")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("输出")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("anchor(*name*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('<a name="*name*">*string*</a>')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("big()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<big>*string*</big>")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("bold()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<b>*string*</b>")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("fixed()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<tt>*string*</tt>")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("fontcolor(*color*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('<font color="*color*">*string*</font>')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("fontsize(*size*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('<font size="*size*">*string*</font>')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("italics()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<i>*string*</i>")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("link(url)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('<a href="*url*">*string*</a>')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("small()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<small>*string*</small>")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("strike()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<strike>*string*</strike>")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("sub()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<sub>*string*</sub>")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("sup()")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("<sup>*string*</sup>")])])])])])])]),e._v(" "),a("h2",{attrs:{id:"_5-4-单例内置对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-单例内置对象"}},[e._v("#")]),e._v(" 5.4 　单例内置对象")]),e._v(" "),a("p",[e._v("ECMA-262 对内置对象的定义是“任何由 ECMAScript 实现提供、与宿主环境无关，并在 ECMAScript 程序开始执行时就存在的对象”。这就意味着，开发者不用显式地实例化内置对象，因为它们已经实例化好了。前面我们已经接触了大部分内置对象，包括"),a("code",[e._v("Object")]),e._v("、"),a("code",[e._v("Array")]),e._v("和"),a("code",[e._v("String")]),e._v("。本节介绍 ECMA-262 定义的另外两个单例内置对象："),a("code",[e._v("Global")]),e._v("和"),a("code",[e._v("Math")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"_5-4-1-global"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-global"}},[e._v("#")]),e._v(" 5.4.1 　"),a("code",[e._v("Global")])]),e._v(" "),a("p",[a("code",[e._v("Global")]),e._v("对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它。ECMA-262 规定"),a("code",[e._v("Global")]),e._v("对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。在全局作用域中定义的变量和函数都会变成"),a("code",[e._v("Global")]),e._v("对象的属性 。本书前面介绍的函数，包括"),a("code",[e._v("isNaN()")]),e._v("、"),a("code",[e._v("isFinite()")]),e._v("、"),a("code",[e._v("parseInt()")]),e._v("和"),a("code",[e._v("parseFloat()")]),e._v("，实际上都是"),a("code",[e._v("Global")]),e._v("对象的方法。除了这些，"),a("code",[e._v("Global")]),e._v("对象上还有另外一些方法。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("URL 编码方法")])]),e._v(" "),a("p",[a("code",[e._v("encodeURI()")]),e._v("和"),a("code",[e._v("encodeURIComponent()")]),e._v("方法用于编码统一资源标识符（URI），以便传给浏览器。有效的 URI 不能包含某些字符，比如空格。使用 URI 编码方法来编码 URI 可以让浏览器能够理解它们，同时又以特殊的 UTF-8 编码替换掉所有无效字符。")]),e._v(" "),a("p",[a("code",[e._v("ecnodeURI()")]),e._v("方法用于对整个 URI 进行编码，比如"),a("code",[e._v('"www.wrox.com/illegal value.js"')]),e._v("。而"),a("code",[e._v("encodeURIComponent()")]),e._v("方法用于编码 URI 中单独的组件，比如前面 URL 中的"),a("code",[e._v('"illegal value.js"')]),e._v("。这两个方法的主要区别是，"),a("code",[e._v("encodeURI()")]),e._v("不会编码属于 URL 组件的特殊字符，比如冒号、斜杠、问号、井号，而"),a("code",[e._v("encodeURIComponent()")]),e._v("会编码它发现的所有非标准字符。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let uri = "http:// www.wrox.com/illegal value.js#start";\n\n// "http:// www.wrox.com/illegal%20value.js#start"\nconsole.log(encodeURI(uri));\n\n// "http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start"\nconsole.log(encodeURIComponent(uri));\n')])])]),a("p",[e._v("这里使用"),a("code",[e._v("encodeURI()")]),e._v("编码后，除空格被替换为"),a("code",[e._v("%20")]),e._v("之外，没有任何变化。而"),a("code",[e._v("ecnodeURIComponent()")]),e._v("方法将所有非字母字符都替换成了相应的编码形式。这就是使用"),a("code",[e._v("encodeURI()")]),e._v("编码整个 URI，但只使用"),a("code",[e._v("encodeURIComponent()")]),e._v("编码那些会追加到已有 URI 后面的字符串的原因。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　一般来说，使用"),a("code",[e._v("encodeURIComponent()")]),e._v("应该比使用"),a("code",[e._v("encodeURI()")]),e._v("的频率更高，这是因为编码查询字符串参数比编码基准 URI 的次数更多。")])]),e._v(" "),a("p",[e._v("与"),a("code",[e._v("encodeURI()")]),e._v("和"),a("code",[e._v("encodeURIComponent()")]),e._v("相对的是"),a("code",[e._v("decodeURI()")]),e._v("和"),a("code",[e._v("decodeURIComponent()")]),e._v("。"),a("code",[e._v("decodeURI()")]),e._v("只对使用"),a("code",[e._v("encodeURI()")]),e._v("编码过的字符解码。例如，"),a("code",[e._v("%20")]),e._v("会被替换为空格，但"),a("code",[e._v("%23")]),e._v("不会被替换为井号（"),a("code",[e._v("#")]),e._v("），因为井号不是由"),a("code",[e._v("encodeURI()")]),e._v("替换的。类似地，"),a("code",[e._v("decodeURIComponent()")]),e._v("解码所有被"),a("code",[e._v("encodeURIComponent()")]),e._v("编码的字符，基本上就是解码所有特殊值。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let uri = "http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start";\n\n// http%3A%2F%2Fwww.wrox.com%2Fillegal value.js%23start\nconsole.log(decodeURI(uri));\n\n// http:// www.wrox.com/illegal value.js#start\nconsole.log(decodeURIComponent(uri));\n')])])]),a("p",[e._v("这里，"),a("code",[e._v("uri")]),e._v("变量中包含一个使用"),a("code",[e._v("encodeURIComponent()")]),e._v("编码过的字符串。首先输出的是使用"),a("code",[e._v("decodeURI()")]),e._v("解码的结果，可以看到只用空格替换了"),a("code",[e._v("%20")]),e._v("。然后是使用"),a("code",[e._v("decodeURIComponent()")]),e._v("解码的结果，其中替换了所有特殊字符，并输出了没有包含任何转义的字符串。（这个字符串不是有效的 URL。）")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　 URI 方法"),a("code",[e._v("encodeURI()")]),e._v("、"),a("code",[e._v("encodeURIComponent()")]),e._v("、"),a("code",[e._v("decodeURI()")]),e._v("和"),a("code",[e._v("decodeURIComponent()")]),e._v("取代了"),a("code",[e._v("escape()")]),e._v("和"),a("code",[e._v("unescape()")]),e._v("方法，后者在 ECMA-262 第 3 版中就已经废弃了。URI 方法始终是首选方法，因为它们对所有 Unicode 字符进行编码，而原来的方法只能正确编码 ASCII 字符。不要在生产环境中使用"),a("code",[e._v("escape()")]),e._v("和"),a("code",[e._v("unescape()")]),e._v("。")])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("eval()方法")])]),e._v(" "),a("p",[e._v("最后一个方法可能是整个 ECMAScript 语言中最强大的了，它就是"),a("code",[e._v("eval()")]),e._v("。这个方法就是一个完整的 ECMAScript 解释器，它接收一个参数，即一个要执行的 ECMAScript（JavaScript）字符串。来看一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eval(\"console.log('hi')\");\n")])])]),a("p",[e._v("上面这行代码的功能与下一行等价：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('console.log("hi");\n')])])]),a("p",[e._v("当解释器发现"),a("code",[e._v("eval()")]),e._v("调用时，会将参数解释为实际的 ECMAScript 语句，然后将其插入到该位置。通过"),a("code",[e._v("eval()")]),e._v("执行的代码属于该调用所在上下文，被执行的代码与该上下文拥有相同的作用域链。这意味着定义在包含上下文中的变量可以在"),a("code",[e._v("eval()")]),e._v("调用内部被引用，比如下面这个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let msg = "hello world";\neval("console.log(msg)");  // "hello world"\n')])])]),a("p",[e._v("这里，变量"),a("code",[e._v("msg")]),e._v("是在"),a("code",[e._v("eval()")]),e._v("调用的外部上下文中定义的，而"),a("code",[e._v("console.log()")]),e._v("显示了文本"),a("code",[e._v('"hello world"')]),e._v("。这是因为第二行代码会被替换成一行真正的函数调用代码。类似地，可以在"),a("code",[e._v("eval()")]),e._v("内部定义一个函数或变量，然后在外部代码中引用，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eval(\"function sayHi() { console.log('hi'); }\");\nsayHi();\n")])])]),a("p",[e._v("这里，函数"),a("code",[e._v("sayHi()")]),e._v("是在"),a("code",[e._v("eval()")]),e._v("内部定义的。因为该调用会被替换为真正的函数定义，所以才可能在下一行代码中调用"),a("code",[e._v("sayHi()")]),e._v("。对于变量也是一样的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eval(\"let msg = 'hello world';\");\nconsole.log(msg);  // Reference Error: msg is not defined\n")])])]),a("p",[e._v("通过"),a("code",[e._v("eval()")]),e._v("定义的任何变量和函数都不会被提升，这是因为在解析代码的时候，它们是被包含在一个字符串中的。它们只是在"),a("code",[e._v("eval()")]),e._v("执行的时候才会被创建。")]),e._v(" "),a("p",[e._v("在严格模式下，在"),a("code",[e._v("eval()")]),e._v("内部创建的变量和函数无法被外部访问。换句话说，最后两个例子会报错。同样，在严格模式下，赋值给"),a("code",[e._v("eval")]),e._v("也会导致错误：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"use strict";\neval = "hi";  // 导致错误\n')])])]),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　解释代码字符串的能力是非常强大的，但也非常危险。在使用"),a("code",[e._v("eval()")]),e._v("的时候必须极为慎重，特别是在解释用户输入的内容时。因为这个方法会对 XSS 利用暴露出很大的攻击面。恶意用户可能插入会导致你网站或应用崩溃的代码。")])])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("Global 对象属性")])]),e._v(" "),a("p",[a("code",[e._v("Global")]),e._v("对象有很多属性，其中一些前面已经提到过了。像"),a("code",[e._v("undefined")]),e._v("、"),a("code",[e._v("NaN")]),e._v("和"),a("code",[e._v("Infinity")]),e._v("等特殊值都是"),a("code",[e._v("Global")]),e._v("对象的属性。此外，所有原生引用类型构造函数，比如"),a("code",[e._v("Object")]),e._v("和"),a("code",[e._v("Function")]),e._v("，也都是"),a("code",[e._v("Global")]),e._v("对象的属性。下表列出了所有这些属性。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("属性")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("undefined")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("特殊值"),a("code",[e._v("undefined")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("NaN")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("特殊值"),a("code",[e._v("NaN")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Infinity")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("特殊值"),a("code",[e._v("Infinity")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Object")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Object")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Array")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Array")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Function")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Function")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Boolean")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Boolean")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("String")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("String")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Number")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Number")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Date")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Date")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("RegExp")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("RegExp")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Symbol")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Symbol")]),e._v("的伪构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Error")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Error")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("EvalError")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("EvalError")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("RangeError")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("RangeError")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("ReferenceError")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("ReferenceError")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("SyntaxError")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("SyntaxError")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("TypeError")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("TypeError")]),e._v("的构造函数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("URIError")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("URIError")]),e._v("的构造函数")])])])])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("window 对象")])]),e._v(" "),a("p",[e._v("虽然 ECMA-262 没有规定直接访问"),a("code",[e._v("Global")]),e._v("对象的方式，但浏览器将"),a("code",[e._v("window")]),e._v("对象实现为"),a("code",[e._v("Global")]),e._v("对象的代理。因此，所有全局作用域中声明的变量和函数都变成了"),a("code",[e._v("window")]),e._v("的属性。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var color = "red";\n\nfunction sayColor() {\n  console.log(window.color);\n}\n\nwindow.sayColor(); // "red"\n')])])]),a("p",[e._v("这里定义了一个名为"),a("code",[e._v("color")]),e._v("的全局变量和一个名为"),a("code",[e._v("sayColor()")]),e._v("的全局函数。在"),a("code",[e._v("sayColor()")]),e._v("内部，通过"),a("code",[e._v("window.color")]),e._v("访问了"),a("code",[e._v("color")]),e._v("变量，说明全局变量变成了"),a("code",[e._v("window")]),e._v("的属性。接着，又通过"),a("code",[e._v("window")]),e._v("对象直接调用了"),a("code",[e._v("window.sayColor()")]),e._v("函数，从而输出字符串。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("window")]),e._v("对象在 JavaScript 中远不止实现了"),a("code",[e._v("ECMAScript")]),e._v("的"),a("code",[e._v("Global")]),e._v("对象那么简单。关于"),a("code",[e._v("window")]),e._v("对象的更多介绍，请参考第 12 章。")])]),e._v(" "),a("p",[e._v("另一种获取"),a("code",[e._v("Global")]),e._v("对象的方式是使用如下的代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let global = function() {\n  return this;\n}();\n")])])]),a("p",[e._v("这段代码创建一个立即调用的函数表达式，返回了"),a("code",[e._v("this")]),e._v("的值。如前所述，当一个函数在没有明确（通过成为某个对象的方法，或者通过"),a("code",[e._v("call()")]),e._v("/"),a("code",[e._v("apply()")]),e._v("）指定"),a("code",[e._v("this")]),e._v("值的情况下执行时，"),a("code",[e._v("this")]),e._v("值等于"),a("code",[e._v("Global")]),e._v("对象。因此，调用一个简单返回"),a("code",[e._v("this")]),e._v("的函数是在任何执行上下文中获取"),a("code",[e._v("Global")]),e._v("对象的通用方式。")])])]),e._v(" "),a("h3",{attrs:{id:"_5-4-2-math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-2-math"}},[e._v("#")]),e._v(" 5.4.2 　"),a("code",[e._v("Math")])]),e._v(" "),a("p",[e._v("ECMAScript 提供了"),a("code",[e._v("Math")]),e._v("对象作为保存数学公式、信息和计算的地方。"),a("code",[e._v("Math")]),e._v("对象提供了一些辅助计算的属性和方法。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("Math")]),e._v("对象上提供的计算要比直接在 JavaScript 实现的快得多，因为"),a("code",[e._v("Math")]),e._v("对象上的计算使用了 JavaScript 引擎中更高效的实现和处理器指令。但使用"),a("code",[e._v("Math")]),e._v("计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。")])]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Math 对象属性")])]),e._v(" "),a("p",[a("code",[e._v("Math")]),e._v("对象有一些属性，主要用于保存数学中的一些特殊值。下表列出了这些属性。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("属性")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.E")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("自然对数的基数 e 的值")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.LN10")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("10 为底的自然对数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.LN2")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("2 为底的自然对数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.LOG2E")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("以 2 为底 e 的对数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.LOG10E")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("以 10 为底 e 的对数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.PI")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("π 的值")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.SQRT1_2")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1/2 的平方根")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.SQRT2")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("2 的平方根")])])])]),e._v(" "),a("p",[e._v("这些值的含义和用法超出了本书的范畴，但都是 ECMAScript 规范定义的，并可以在你需要时使用。")])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("min()和 max()方法")])]),e._v(" "),a("p",[a("code",[e._v("Math")]),e._v("对象也提供了很多辅助执行简单或复杂数学计算的方法。")]),e._v(" "),a("p",[a("code",[e._v("min()")]),e._v("和"),a("code",[e._v("max()")]),e._v("方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let max = Math.max(3, 54, 32, 16);\nconsole.log(max);  // 54\n\nlet min = Math.min(3, 54, 32, 16);\nconsole.log(min);  // 3\n")])])]),a("p",[e._v("在 3、54、32 和 16 中，"),a("code",[e._v("Math.max()")]),e._v("返回 54，"),a("code",[e._v("Math.min()")]),e._v("返回 3。使用这两个方法可以避免使用额外的循环和"),a("code",[e._v("if")]),e._v("语句来确定一组数值的最大最小值。")]),e._v(" "),a("p",[e._v("要知道数组中的最大值和最小值，可以像下面这样使用扩展操作符：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let values = [1, 2, 3, 4, 5, 6, 7, 8];\nlet max = Math.max(...values);\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("舍入方法")])]),e._v(" "),a("p",[e._v("接下来是用于把小数值舍入为整数的 4 个方法："),a("code",[e._v("Math.ceil()")]),e._v("、"),a("code",[e._v("Math.floor()")]),e._v("、"),a("code",[e._v("Math.round()")]),e._v("和"),a("code",[e._v("Math.fround()")]),e._v("。这几个方法处理舍入的方式如下所述。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Math.ceil()")]),e._v("方法始终向上舍入为最接近的整数。")]),e._v(" "),a("li",[a("code",[e._v("Math.floor()")]),e._v("方法始终向下舍入为最接近的整数。")]),e._v(" "),a("li",[a("code",[e._v("Math.round()")]),e._v("方法执行四舍五入。")]),e._v(" "),a("li",[a("code",[e._v("Math.fround()")]),e._v("方法返回数值最接近的单精度（32 位）浮点值表示。")])]),e._v(" "),a("p",[e._v("以下示例展示了这些方法的用法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(Math.ceil(25.9));   // 26\nconsole.log(Math.ceil(25.5));   // 26\nconsole.log(Math.ceil(25.1));   // 26\n\nconsole.log(Math.round(25.9));  // 26\nconsole.log(Math.round(25.5));  // 26\nconsole.log(Math.round(25.1));  // 25\n\nconsole.log(Math.fround(0.4));  // 0.4000000059604645\nconsole.log(Math.fround(0.5));  // 0.5\nconsole.log(Math.fround(25.9)); // 25.899999618530273\n\nconsole.log(Math.floor(25.9));  // 25\nconsole.log(Math.floor(25.5));  // 25\nconsole.log(Math.floor(25.1));  // 25\n")])])]),a("p",[e._v("对于 25 和 26（不包含）之间的所有值，"),a("code",[e._v("Math.ceil()")]),e._v("都会返回 26，因为它始终向上舍入。"),a("code",[e._v("Math.round()")]),e._v("只在数值大于等于"),a("code",[e._v("25.5")]),e._v("时返回 26，否则返回 25。最后，"),a("code",[e._v("Math.floor()")]),e._v("对所有 25 和 26（不包含）之间的值都返回 25。")])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("random()方法")])]),e._v(" "),a("p",[a("code",[e._v("Math.random()")]),e._v("方法返回一个 0~1 范围内的随机数，其中包含 0 但不包含 1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用"),a("code",[e._v("Math.random()")]),e._v("从一组整数中随机选择一个数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("number = Math.floor(Math.random() * total_number_of_choices + first_possible_value)\n")])])]),a("p",[e._v("这里使用了"),a("code",[e._v("Math.floor()")]),e._v("方法，因为"),a("code",[e._v("Math.random()")]),e._v("始终返回小数，即便乘以一个数再加上一个数也是小数。因此，如果想从 1~10 范围内随机选择一个数，代码就是这样的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = Math.floor(Math.random() * 10 + 1);\n")])])]),a("p",[e._v("这样就有 10 个可能的值（1~10），其中最小的值是 1。如果想选择一个 2~10 范围内的值，则代码就要写成这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = Math.floor(Math.random() * 9 + 2);\n")])])]),a("p",[e._v("2~10 只有 9 个数，所以可选总数（"),a("code",[e._v("total_number_of_choices")]),e._v("）是 9，而最小可能的值（"),a("code",[e._v("first_possible_value")]),e._v("）是 2。很多时候，通过函数来算出可选总数和最小可能的值可能更方便，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function selectFrom(lowerValue, upperValue) {\n  let choices = upperValue - lowerValue + 1;\n  return Math.floor(Math.random() * choices + lowerValue);\n}\n\nlet num = selectFrom(2,10);\nconsole.log(num);  // 2~10范围内的值，其中包含2和10\n")])])]),a("p",[e._v("这里的函数"),a("code",[e._v("selectFrom()")]),e._v("接收两个参数：应该返回的最小值和最大值。通过将这两个值相减再加"),a("code",[e._v("1")]),e._v("得到可选总数，然后再套用上面的公式。于是，调用"),a("code",[e._v("selectFrom(2,10)")]),e._v("就可以从 2~10（包含）范围内选择一个值了。使用这个函数，从一个数组中随机选择一个元素就很容易，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let colors = ["red", "green", "blue", "yellow", "black", "purple", "brown"];\nlet color = colors[selectFrom(0, colors.length-1)];\n')])])]),a("p",[e._v("在这个例子中，传给"),a("code",[e._v("selecFrom()")]),e._v("的第二个参数是数组长度减 1，即数组最大的索引值。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("Math.random()")]),e._v("方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用"),a("code",[e._v("window.crypto.getRandomValues()")]),e._v("。")])])])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[a("strong",[e._v("其他方法")])]),e._v(" "),a("p",[a("code",[e._v("Math")]),e._v("对象还有很多涉及各种简单或高阶数运算的方法。讨论每种方法的具体细节或者它们的适用场景超出了本书的范畴。不过，下表还是总结了"),a("code",[e._v("Math")]),e._v("对象的其他方法。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("方法")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.abs(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的绝对值")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.e*x*p(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("Math.E")]),e._v("的"),a("code",[e._v("*x*")]),e._v("次幂")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.e*x*pm1(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("等于"),a("code",[e._v("Math.e*x*p(*x*) - 1")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.log(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的自然对数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.log1p(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("等于"),a("code",[e._v("1 + Math.log(*x*)")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.pow(*x*, *power*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的"),a("code",[e._v("*power*")]),e._v("次幂")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.pow(*...nums*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*nums*")]),e._v("中每个数平方和的平方根")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.clz32(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回 32 位整数"),a("code",[e._v("*x*")]),e._v("的前置零的数量")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.sign(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回表示"),a("code",[e._v("*x*")]),e._v("符号的"),a("code",[e._v("1")]),e._v("、"),a("code",[e._v("0")]),e._v("、"),a("code",[e._v("-0")]),e._v("或"),a("code",[e._v("-1")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.trunc(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的整数部分，删除所有小数")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.sqrt(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的平方根")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.cbrt(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的立方根")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.acos(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的反余弦")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.acosh(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的反双曲余弦")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.asin(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的反正弦")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.asinh(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的反双曲正弦")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.atan(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的反正切")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.atanh(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的反双曲正切")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.atan2(*y*, *x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*y*/*x*")]),e._v("的反正切")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.cos(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的余弦")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.sin(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的正弦")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Math.tan(*x*)")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("返回"),a("code",[e._v("*x*")]),e._v("的正切")])])])]),e._v(" "),a("p",[e._v("即便这些方法都是由 ECMA-262 定义的，对正弦、余弦、正切等计算的实现仍然取决于浏览器，因为计算这些值的方式有很多种。结果，这些方法的精度可能因实现而异。")])])]),e._v(" "),a("h2",{attrs:{id:"_5-5-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-小结"}},[e._v("#")]),e._v(" 5.5 　小结")]),e._v(" "),a("p",[e._v("JavaScript 中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。")]),e._v(" "),a("ul",[a("li",[e._v("引用值与传统面向对象编程语言中的类相似，但实现不同。")]),e._v(" "),a("li",[a("code",[e._v("Date")]),e._v("类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。")]),e._v(" "),a("li",[a("code",[e._v("RegExp")]),e._v("类型是 ECMAScript 支持正则表达式的接口，提供了大多数基础的和部分高级的正则表达式功能。")])]),e._v(" "),a("p",[e._v("JavaScript 比较独特的一点是，函数实际上是"),a("code",[e._v("Function")]),e._v("类型的实例，也就是说函数也是对象。因为函数也是对象，所以函数也有方法，可以用于增强其能力。")]),e._v(" "),a("p",[e._v("由于原始值包装类型的存在，JavaScript 中的原始值可以被当成对象来使用。有 3 种原始值包装类型："),a("code",[e._v("Boolean")]),e._v("、"),a("code",[e._v("Number")]),e._v("和"),a("code",[e._v("String")]),e._v("。它们都具备如下特点。")]),e._v(" "),a("ul",[a("li",[e._v("每种包装类型都映射到同名的原始类型。")]),e._v(" "),a("li",[e._v("以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。")]),e._v(" "),a("li",[e._v("涉及原始值的语句执行完毕后，包装对象就会被销毁。")])]),e._v(" "),a("p",[e._v("当代码开始执行时，全局上下文中会存在两个内置对象："),a("code",[e._v("Global")]),e._v("和"),a("code",[e._v("Math")]),e._v("。其中，"),a("code",[e._v("Global")]),e._v("对象在大多数 ECMAScript 实现中无法直接访问。不过，浏览器将其实现为"),a("code",[e._v("window")]),e._v("对象。所有全局变量和函数都是"),a("code",[e._v("Global")]),e._v("对象的属性。"),a("code",[e._v("Math")]),e._v("对象包含辅助完成复杂计算的属性和方法。")])])}),[],!1,null,null,null);t.default=o.exports}}]);