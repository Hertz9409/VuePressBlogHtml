(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{517:function(e,n,o){"use strict";o.r(n);var t=o(27),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"第-8-章-对象、类与面向对象编程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#第-8-章-对象、类与面向对象编程"}},[e._v("#")]),e._v(" 第 8 章　对象、类与面向对象编程")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("本章内容")])]),e._v(" "),o("ul",[o("li",[e._v("理解对象")]),e._v(" "),o("li",[e._v("理解对象创建过程")]),e._v(" "),o("li",[e._v("理解继承")]),e._v(" "),o("li",[e._v("理解类")])])]),e._v(" "),o("p",[e._v("ECMA-262 将对象定义为一组属性的无序集合。严格来说，这意味着对象就是一组没有特定顺序的值。对象的每个属性或方法都由一个名称来标识，这个名称映射到一个值。正因为如此（以及其他还未讨论的原因），可以把 ECMAScript 的对象想象成一张散列表，其中的内容就是一组名/值对，值可以是数据或者函数。")]),e._v(" "),o("h2",{attrs:{id:"_8-1-理解对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-理解对象"}},[e._v("#")]),e._v(" 8.1 　理解对象")]),e._v(" "),o("p",[e._v("创建自定义对象的通常方式是创建"),o("code",[e._v("Object")]),e._v("的一个新实例，然后再给它添加属性和方法，如下例所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = new Object();\nperson.name = "Nicholas";\nperson.age = 29;\nperson.job = "Software Engineer";\nperson.sayName = function() {\n  console.log(this.name);\n};\n')])])]),o("p",[e._v("这个例子创建了一个名为"),o("code",[e._v("person")]),e._v("的对象，而且有三个属性（"),o("code",[e._v("name")]),e._v("、"),o("code",[e._v("age")]),e._v("和"),o("code",[e._v("job")]),e._v("）和一个方法（"),o("code",[e._v("sayName()")]),e._v("）。"),o("code",[e._v("sayName()")]),e._v("方法会显示"),o("code",[e._v("this.name")]),e._v("的值，这个属性会解析为"),o("code",[e._v("person.name")]),e._v("。早期 JavaScript 开发者频繁使用这种方式创建新对象。几年后，对象字面量变成了更流行的方式。前面的例子如果使用对象字面量则可以这样写：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {\n  name: "Nicholas",\n  age: 29,\n  job: "Software Engineer",\n  sayName() {\n    console.log(this.name);\n  }\n};\n')])])]),o("p",[e._v("这个例子中的"),o("code",[e._v("person")]),e._v("对象跟前面例子中的"),o("code",[e._v("person")]),e._v("对象是等价的，它们的属性和方法都一样。这些属性都有自己的特征，而这些特征决定了它们在 JavaScript 中的行为。")]),e._v(" "),o("h3",{attrs:{id:"_8-1-1-属性的类型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-1-属性的类型"}},[e._v("#")]),e._v(" 8.1.1 　属性的类型")]),e._v(" "),o("p",[e._v("ECMA-262 使用一些内部特性来描述属性的特征。这些特性是由为 JavaScript 实现引擎的规范定义的。因此，开发者不能在 JavaScript 中直接访问这些特性。为了将某个特性标识为内部特性，规范会用两个中括号把特性的名称括起来，比如"),o("code",[e._v("[[Enumerable]]")]),e._v("。")]),e._v(" "),o("p",[e._v("属性分两种：数据属性和访问器属性。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("数据属性")])]),e._v(" "),o("p",[e._v("数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。数据属性有 4 个特性描述它们的行为。")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("[[Configurable]]")]),e._v("：表示属性是否可以通过"),o("code",[e._v("delete")]),e._v("删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。默认情况下，所有直接定义在对象上的属性的这个特性都是"),o("code",[e._v("true")]),e._v("，如前面的例子所示。")]),e._v(" "),o("li",[o("code",[e._v("[[Enumberable]]")]),e._v("：表示属性是否可以通过"),o("code",[e._v("for-in")]),e._v("循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是"),o("code",[e._v("true")]),e._v("，如前面的例子所示。")]),e._v(" "),o("li",[o("code",[e._v("[[Writable]]")]),e._v("：表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是"),o("code",[e._v("true")]),e._v("，如前面的例子所示。")]),e._v(" "),o("li",[o("code",[e._v("[[Value]]")]),e._v("：包含属性实际的值。这就是前面提到的那个读取和写入属性值的位置。这个特性的默认值为"),o("code",[e._v("undefined")]),e._v("。")])]),e._v(" "),o("p",[e._v("在像前面例子中那样将属性显式添加到对象之后，"),o("code",[e._v("[[Configurable]]")]),e._v("、"),o("code",[e._v("[[Enumerable]]")]),e._v("和"),o("code",[e._v("[[Writable]]")]),e._v("都会被设置为"),o("code",[e._v("true")]),e._v("，而"),o("code",[e._v("[[Value]]")]),e._v("特性会被设置为指定的值。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {\n  name: "Nicholas"\n};\n')])])]),o("p",[e._v("这里，我们创建了一个名为"),o("code",[e._v("name")]),e._v("的属性，并给它赋予了一个值"),o("code",[e._v('"Nicholas"')]),e._v("。这意味着"),o("code",[e._v("[[Value]]")]),e._v("特性会被设置为"),o("code",[e._v('"Nicholas"')]),e._v("，之后对这个值的任何修改都会保存这个位置。")]),e._v(" "),o("p",[e._v("要修改属性的默认特性，就必须使用"),o("code",[e._v("Object.defineProperty()")]),e._v("方法。这个方法接收 3 个参数：要给其添加属性的对象、属性的名称和一个描述符对象。最后一个参数，即描述符对象上的属性可以包含："),o("code",[e._v("configurable")]),e._v("、"),o("code",[e._v("enumerable")]),e._v("、"),o("code",[e._v("writable")]),e._v("和"),o("code",[e._v("value")]),e._v("，跟相关特性的名称一一对应。根据要修改的特性，可以设置其中一个或多个值。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {};\nObject.defineProperty(person, "name", {\n  writable: false,\n  value: "Nicholas"\n});\nconsole.log(person.name); // "Nicholas"\nperson.name = "Greg";\nconsole.log(person.name); // "Nicholas"\n')])])]),o("p",[e._v("这个例子创建了一个名为"),o("code",[e._v("name")]),e._v("的属性并给它赋予了一个只读的值"),o("code",[e._v('"Nicholas"')]),e._v("。这个属性的值就不能再修改了，在非严格模式下尝试给这个属性重新赋值会被忽略。在严格模式下，尝试修改只读属性的值会抛出错误。")]),e._v(" "),o("p",[e._v("类似的规则也适用于创建不可配置的属性。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {};\nObject.defineProperty(person, "name", {\n  configurable: false,\n  value: "Nicholas"\n});\nconsole.log(person.name); // "Nicholas"\ndelete person.name;\nconsole.log(person.name); // "Nicholas"\n')])])]),o("p",[e._v("这个例子把"),o("code",[e._v("configurable")]),e._v("设置为"),o("code",[e._v("false")]),e._v("，意味着这个属性不能从对象上删除。非严格模式下对这个属性调用"),o("code",[e._v("delete")]),e._v("没有效果，严格模式下会抛出错误。此外，一个属性被定义为不可配置之后，就不能再变回可配置的了。再次调用"),o("code",[e._v("Object.defineProperty()")]),e._v("并修改任何非"),o("code",[e._v("writable")]),e._v("属性会导致错误：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {};\nObject.defineProperty(person, "name", {\n  configurable: false,\n  value: "Nicholas"\n});\n\n// 抛出错误\nObject.defineProperty(person, "name", {\n  configurable: true,\n  value: "Nicholas"\n});\n')])])]),o("p",[e._v("因此，虽然可以对同一个属性多次调用"),o("code",[e._v("Object.defineProperty()")]),e._v("，但在把"),o("code",[e._v("configurable")]),e._v("设置为"),o("code",[e._v("false")]),e._v("之后就会受限制了。")]),e._v(" "),o("p",[e._v("在调用"),o("code",[e._v("Object.defineProperty()")]),e._v("时，"),o("code",[e._v("configurable")]),e._v("、"),o("code",[e._v("enumerable")]),e._v("和"),o("code",[e._v("writable")]),e._v("的值如果不指定，则都默认为"),o("code",[e._v("false")]),e._v("。多数情况下，可能都不需要"),o("code",[e._v("Object.defineProperty()")]),e._v("提供的这些强大的设置，但要理解 JavaScript 对象，就要理解这些概念。")])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("访问器属性")])]),e._v(" "),o("p",[e._v("访问器属性不包含数据值。相反，它们包含一个获取（getter）函数和一个设置（setter）函数，不过这两个函数不是必需的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改。访问器属性有 4 个特性描述它们的行为。")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("[[Configurable]]")]),e._v("：表示属性是否可以通过"),o("code",[e._v("delete")]),e._v("删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性。默认情况下，所有直接定义在对象上的属性的这个特性都是"),o("code",[e._v("true")]),e._v("。")]),e._v(" "),o("li",[o("code",[e._v("[[Enumerable]]")]),e._v("：表示属性是否可以通过"),o("code",[e._v("for-in")]),e._v("循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是"),o("code",[e._v("true")]),e._v("。")]),e._v(" "),o("li",[o("code",[e._v("[[Get]]")]),e._v("：获取函数，在读取属性时调用。默认值为"),o("code",[e._v("undefined")]),e._v("。")]),e._v(" "),o("li",[o("code",[e._v("[[Set]]")]),e._v("：设置函数，在写入属性时调用。默认值为"),o("code",[e._v("undefined")]),e._v("。")])]),e._v(" "),o("p",[e._v("访问器属性是不能直接定义的，必须使用"),o("code",[e._v("Object.defineProperty()")]),e._v("。下面是一个例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('// 定义一个对象，包含伪私有成员year_和公共成员edition\nlet book = {\n  year_: 2017,\n  edition: 1\n};\n\nObject.defineProperty(book, "year", {\n  get() {\n    return this.year_;\n  },\n  set(newValue) {\n    if (newValue > 2017) {\n      this.year_ = newValue;\n      this.edition += newValue - 2017;\n    }\n  }\n});\nbook.year = 2018;\nconsole.log(book.edition); // 2\n')])])]),o("p",[e._v("在这个例子中，对象"),o("code",[e._v("book")]),e._v("有两个默认属性："),o("code",[e._v("year_")]),e._v("和"),o("code",[e._v("edition")]),e._v("。"),o("code",[e._v("year_")]),e._v("中的下划线常用来表示该属性并不希望在对象方法的外部被访问。另一个属性"),o("code",[e._v("year")]),e._v("被定义为一个访问器属性，其中获取函数简单地返回"),o("code",[e._v("year_")]),e._v("的值，而设置函数会做一些计算以决定正确的版本（edition）。因此，把"),o("code",[e._v("year")]),e._v("属性修改为 2018 会导致"),o("code",[e._v("year_")]),e._v("变成 2018，"),o("code",[e._v("edition")]),e._v("变成 2。这是访问器属性的典型使用场景，即设置一个属性值会导致一些其他变化发生。")]),e._v(" "),o("p",[e._v("获取函数和设置函数不一定都要定义。只定义获取函数意味着属性是只读的，尝试修改属性会被忽略。在严格模式下，尝试写入只定义了获取函数的属性会抛出错误。类似地，只有一个设置函数的属性是不能读取的，非严格模式下读取会返回"),o("code",[e._v("undefined")]),e._v("，严格模式下会抛出错误。")]),e._v(" "),o("p",[e._v("在不支持"),o("code",[e._v("Object.defineProperty()")]),e._v("的浏览器中没有办法修改"),o("code",[e._v("[[Configurable]]")]),e._v("或"),o("code",[e._v("[[Enumerable]]")]),e._v("。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　在 ECMAScript 5 以前，开发者会使用两个非标准的访问创建访问器属性："),o("code",[e._v("__defineGetter__()")]),e._v("和"),o("code",[e._v("__defineSetter__()")]),e._v("。这两个方法最早是 Firefox 引入的，后来 Safari、Chrome 和 Opera 也实现了。")])])])]),e._v(" "),o("h3",{attrs:{id:"_8-1-2-定义多个属性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-2-定义多个属性"}},[e._v("#")]),e._v(" 8.1.2 　定义多个属性")]),e._v(" "),o("p",[e._v("在一个对象上同时定义多个属性的可能性是非常大的。为此，ECMAScript 提供了"),o("code",[e._v("Object.defineProperties()")]),e._v("方法。这个方法可以通过多个描述符一次性定义多个属性。它接收两个参数：要为之添加或修改属性的对象和另一个描述符对象，其属性与要添加或修改的属性一一对应。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let book = {};\nObject.defineProperties(book, {\n  year_: {\n    value: 2017\n  },\n\n  edition: {\n    value: 1\n  },\n\n  year: {\n    get() {\n      return this.year_;\n    },\n\n    set(newValue) {\n      if (newValue > 2017) {\n        this.year_ = newValue;\n        this.edition += newValue - 2017;\n      }\n    }\n  }\n});\n")])])]),o("p",[e._v("这段代码在"),o("code",[e._v("book")]),e._v("对象上定义了两个数据属性"),o("code",[e._v("year_")]),e._v("和"),o("code",[e._v("edition")]),e._v("，还有一个访问器属性"),o("code",[e._v("year")]),e._v("。最终的对象跟上一节示例中的一样。唯一的区别是所有属性都是同时定义的。")]),e._v(" "),o("h3",{attrs:{id:"_8-1-3-读取属性的特性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-3-读取属性的特性"}},[e._v("#")]),e._v(" 8.1.3 　读取属性的特性")]),e._v(" "),o("p",[e._v("使用"),o("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("方法可以取得指定属性的属性描述符。这个方法接收两个参数：属性所在的对象和要取得其描述符的属性名。返回值是一个对象，对于访问器属性包含"),o("code",[e._v("configurable")]),e._v("、"),o("code",[e._v("enumerable")]),e._v("、"),o("code",[e._v("get")]),e._v("和"),o("code",[e._v("set")]),e._v("属性，对于数据属性包含"),o("code",[e._v("configurable")]),e._v("、"),o("code",[e._v("enumberable")]),e._v("、"),o("code",[e._v("writable")]),e._v("和"),o("code",[e._v("value")]),e._v("属性。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let book = {};\nObject.defineProperties(book, {\n  year_: {\n    value: 2017\n  },\n\n  edition: {\n    value: 1\n  },\n\n  year: {\n    get: function() {\n      return this.year_;\n    },\n\n    set: function(newValue){\n      if (newValue > 2017) {\n        this.year_ = newValue;\n        this.edition += newValue - 2017;\n      }\n    }\n  }\n});\n\nlet descriptor = Object.getOwnPropertyDescriptor(book, "year_");\nconsole.log(descriptor.value);          // 2017\nconsole.log(descriptor.configurable);   // false\nconsole.log(typeof descriptor.get);     // "undefined"\nlet descriptor = Object.getOwnPropertyDescriptor(book, "year");\nconsole.log(descriptor.value);          // undefined\nconsole.log(descriptor.enumerable);     // false\nconsole.log(typeof descriptor.get);     // "function"\n')])])]),o("p",[e._v("对于数据属性"),o("code",[e._v("year_")]),e._v("，"),o("code",[e._v("value")]),e._v("等于原来的值，"),o("code",[e._v("configurable")]),e._v("是"),o("code",[e._v("false")]),e._v("，"),o("code",[e._v("get")]),e._v("是"),o("code",[e._v("undefined")]),e._v("。对于访问器属性"),o("code",[e._v("year")]),e._v("，"),o("code",[e._v("value")]),e._v("是"),o("code",[e._v("undefined")]),e._v("，"),o("code",[e._v("enumerable")]),e._v("是"),o("code",[e._v("false")]),e._v("，"),o("code",[e._v("get")]),e._v("是一个指向获取函数的指针。")]),e._v(" "),o("p",[e._v("ECMAScript 2017 新增了"),o("code",[e._v("Object.getOwnPropertyDescriptors()")]),e._v("静态方法。这个方法实际上会在每个自有属性上调用"),o("code",[e._v("Object.defineProperties()")]),e._v("并在一个新对象中返回它们。对于前面的例子，使用这个静态方法会返回如下对象：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let book = {};\nObject.defineProperties(book, {\n  year_: {\n    value: 2017\n  },\n\n  edition: {\n    value: 1\n  },\n\n  year: {\n    get: function() {\n      return this.year_;\n    },\n\n    set: function(newValue){\n      if (newValue > 2017) {\n        this.year_ = newValue;\n        this.edition += newValue - 2017;\n      }\n    }\n  }\n});\n\nconsole.log(Object.getOwnPropertyDescriptors(book));\n// {\n//   edition: {\n//     configurable: false,\n//     enumerable: false,\n//     value: 1,\n//     writable: false\n//   },\n//   year: {\n//     configurable: false,\n//     enumerable: false,\n//     get: f(),\n//     set: f(newValue),\n//   },\n//   year_: {\n//     configurable: false,\n//     enumerable: false,\n//     value: 2019,\n//     writable: false\n//   }\n// }\n")])])]),o("h3",{attrs:{id:"_8-1-4-合并对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-4-合并对象"}},[e._v("#")]),e._v(" 8.1.4 　合并对象")]),e._v(" "),o("p",[e._v("JavaScript 开发者经常觉得“合并”（merge）两个对象很有用。更具体地说，就是把源对象所有的本地属性一起复制到目标对象上。有时候这种操作也被称为“混入”（mixin），因为目标对象通过混入源对象的属性得到了增强。")]),e._v(" "),o("p",[e._v("ECMAScript 6 专门为合并对象提供了"),o("code",[e._v("Object.assign()")]),e._v("方法。这个方法接收一个目标对象和一个或多个源对象作为参数，然后将每个源对象中可枚举（"),o("code",[e._v("Object.propertyIsEnumerable()")]),e._v("返回"),o("code",[e._v("true")]),e._v("）和自有（"),o("code",[e._v("Object.hasOwnProperty()")]),e._v("返回"),o("code",[e._v("true")]),e._v("）属性复制到目标对象。以字符串和符号为键的属性会被复制。对每个符合条件的属性，这个方法会使用源对象上的"),o("code",[e._v("[[Get]]")]),e._v("取得属性的值，然后使用目标对象上的"),o("code",[e._v("[[Set]]")]),e._v("设置属性的值。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let dest, src, result;\n\n/**\n * 简单复制\n */\ndest = {};\nsrc = { id: 'src' };\n\nresult = Object.assign(dest, src);\n\n// Object.assign修改目标对象\n// 也会返回修改后的目标对象\nconsole.log(dest === result); // true\nconsole.log(dest !== src);    // true\nconsole.log(result);          // { id: src }\nconsole.log(dest);            // { id: src }\n\n\n/**\n * 多个源对象\n */\ndest = {};\n\nresult = Object.assign(dest, { a: 'foo' }, { b: 'bar' });\n\nconsole.log(result); // { a: foo, b: bar }\n\n\n/**\n * 获取函数与设置函数\n */\ndest = {\n  set a(val) {\n    console.log('Invoked dest setter with param ${val}');\n  }\n};\nsrc = {\n  get a() {\n    console.log('Invoked src getter');\n    return 'foo';\n  }\n};\n\nObject.assign(dest, src);\n// 调用src的获取方法\n// 调用dest的设置方法并传入参数\"foo\"\n// 因为这里的设置函数不执行赋值操作\n// 所以实际上并没有把值转移过来\nconsole.log(dest); // { set a(val) {...} }\n")])])]),o("p",[o("code",[e._v("Object.assign()")]),e._v("实际上对每个源对象执行的是浅复制。如果多个源对象都有相同的属性，则使用最后一个复制的值。此外，从源对象访问器属性取得的值，比如获取函数，会作为一个静态值赋给目标对象。换句话说，不能在两个对象间转移获取函数和设置函数。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let dest, src, result;\n\n/**\n * 覆盖属性\n */\ndest = { id: 'dest' };\n\nresult = Object.assign(dest, { id: 'src1', a: 'foo' }, { id: 'src2', b: 'bar' });\n\n// Object.assign会覆盖重复的属性\nconsole.log(result); // { id: src2, a: foo, b: bar }\n\n// 可以通过目标对象上的设置函数观察到覆盖的过程：\ndest = {\n  set id(x) {\n    console.log(x);\n  }\n};\n\nObject.assign(dest, { id: 'first' }, { id: 'second' }, { id: 'third' });\n// first\n// second\n// third\n\n\n/**\n * 对象引用\n */\n\ndest = {};\nsrc = { a: {} };\n\nObject.assign(dest, src);\n\n// 浅复制意味着只会复制对象的引用\nconsole.log(dest);              // { a :{} }\nconsole.log(dest.a === src.a);  // true\n")])])]),o("p",[e._v("如果赋值期间出错，则操作会中止并退出，同时抛出错误。"),o("code",[e._v("Object.assign()")]),e._v("没有“回滚”之前赋值的概念，因此它是一个尽力而为、可能只会完成部分复制的方法。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let dest, src, result;\n\n/**\n * 错误处理\n */\ndest = {};\nsrc = {\n  a: 'foo',\n  get b() {\n    // Object.assign()在调用这个获取函数时会抛出错误\n    throw new Error();\n  },\n  c: 'bar'\n};\n\ntry {\n  Object.assign(dest, src);\n} catch(e) {}\n\n// Object.assign()没办法回滚已经完成的修改\n// 因此在抛出错误之前，目标对象上已经完成的修改会继续存在：\nconsole.log(dest); // { a: foo }\n")])])]),o("h3",{attrs:{id:"_8-1-5-对象标识及相等判定"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-5-对象标识及相等判定"}},[e._v("#")]),e._v(" 8.1.5 　对象标识及相等判定")]),e._v(" "),o("p",[e._v("在 ECMAScript 6 之前，有些特殊情况即使是"),o("code",[e._v("===")]),e._v("操作符也无能为力：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('// 这些是===符合预期的情况\nconsole.log(true === 1);  // false\nconsole.log({} === {});   // false\nconsole.log("2" === 2);   // false\n\n// 这些情况在不同JavaScript引擎中表现不同，但仍被认为相等\nconsole.log(+0 === -0);   // true\nconsole.log(+0 === 0);    // true\nconsole.log(-0 === 0);    // true\n\n// 要确定NaN的相等性，必须使用极为讨厌的isNaN()\nconsole.log(NaN === NaN); // false\nconsole.log(isNaN(NaN));  // true\n')])])]),o("p",[e._v("为改善这类情况，ECMAScript 6 规范新增了"),o("code",[e._v("Object.is()")]),e._v("，这个方法与"),o("code",[e._v("===")]),e._v("很像，但同时也考虑到了上述边界情形。这个方法必须接收两个参数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('console.log(Object.is(true, 1));  // false\nconsole.log(Object.is({}, {}));   // false\nconsole.log(Object.is("2", 2));   // false\n\n// 正确的0、-0、+0相等/不等判定\nconsole.log(Object.is(+0, -0));   // false\nconsole.log(Object.is(+0, 0));    // true\nconsole.log(Object.is(-0, 0));    // false\n\n// 正确的NaN相等判定\nconsole.log(Object.is(NaN, NaN)); // true\n')])])]),o("p",[e._v("要检查超过两个值，递归地利用相等性传递即可：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function recursivelyCheckEqual(x, ...rest) {\n  return Object.is(x, rest[0]) &&\n         (rest.length < 2 || recursivelyCheckEqual(...rest));\n}\n")])])]),o("h3",{attrs:{id:"_8-1-6-增强的对象语法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-6-增强的对象语法"}},[e._v("#")]),e._v(" 8.1.6 　增强的对象语法")]),e._v(" "),o("p",[e._v("ECMAScript 6 为定义和操作对象新增了很多极其有用的语法糖特性。这些特性都没有改变现有引擎的行为，但极大地提升了处理对象的方便程度。")]),e._v(" "),o("p",[e._v("本节介绍的所有对象语法同样适用于 ECMAScript 6 的类，本章后面会讨论。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　相比于以往的替代方案，本节介绍的增强对象语法可以说是一骑绝尘。因此本章及本书会默认使用这些新语法特性。")])]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("属性值简写")])]),e._v(" "),o("p",[e._v("在给对象添加变量的时候，开发者经常会发现属性名和变量名是一样的。例如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let name = 'Matt';\n\nlet person = {\n  name: name\n};\n\nconsole.log(person); // { name: 'Matt' }\n")])])]),o("p",[e._v("为此，简写属性名语法出现了。简写属性名只要使用变量名（不用再写冒号）就会自动被解释为同名的属性键。如果没有找到同名变量，则会抛出"),o("code",[e._v("ReferenceError")]),e._v("。")]),e._v(" "),o("p",[e._v("以下代码和之前的代码是等价的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let name = 'Matt';\n\nlet person = {\n  name\n};\n\nconsole.log(person); // { name: 'Matt' }\n")])])]),o("p",[e._v("代码压缩程序会在不同作用域间保留属性名，以防止找不到引用。以下面的代码为例：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function makePerson(name) {\n  return {\n    name\n  };\n}\n\nlet person = makePerson('Matt');\n\nconsole.log(person.name);  // Matt\n")])])]),o("p",[e._v("在这里，即使参数标识符只限定于函数作用域，编译器也会保留初始的"),o("code",[e._v("name")]),e._v("标识符。如果使用 Google Closure 编译器压缩，那么函数参数会被缩短，而属性名不变：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function makePerson(a) {\n  return {\n    name: a\n  };\n}\n\nvar person = makePerson("Matt");\n\nconsole.log(person.name); // Matt\n')])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("可计算属性")])]),e._v(" "),o("p",[e._v("在引入可计算属性之前，如果想使用变量的值作为属性，那么必须先声明对象，然后使用中括号语法来添加属性。换句话说，不能在对象字面量中直接动态命名属性。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const nameKey = 'name';\nconst ageKey = 'age';\nconst jobKey = 'job';\n\nlet person = {};\nperson[nameKey] = 'Matt';\nperson[ageKey] = 27;\nperson[jobKey] = 'Software engineer';\n\nconsole.log(person); // { name: 'Matt', age: 27, job: 'Software engineer' }\n")])])]),o("p",[e._v("有了可计算属性，就可以在对象字面量中完成动态属性赋值。中括号包围的对象属性键告诉运行时将其作为 JavaScript 表达式而不是字符串来求值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const nameKey = 'name';\nconst ageKey = 'age';\nconst jobKey = 'job';\n\nlet person = {\n  [nameKey]: 'Matt',\n  [ageKey]: 27,\n  [jobKey]: 'Software engineer'\n};\n\nconsole.log(person); // { name: 'Matt', age: 27, job: 'Software engineer' }\n")])])]),o("p",[e._v("因为被当作 JavaScript 表达式求值，所以可计算属性本身可以是复杂的表达式，在实例化时再求值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const nameKey = 'name';\nconst ageKey = 'age';\nconst jobKey = 'job';\nlet uniqueToken = 0;\n\nfunction getUniqueKey(key) {\n  return '${key}_${uniqueToken++}';\n}\n\nlet person = {\n  [getUniqueKey(nameKey)]: 'Matt',\n  [getUniqueKey(ageKey)]: 27,\n  [getUniqueKey(jobKey)]: 'Software engineer'\n};\n\nconsole.log(person);  // { name_0: 'Matt', age_1: 27, job_2: 'Software engineer' }\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　可计算属性表达式中抛出任何错误都会中断对象创建。如果计算属性的表达式有副作用，那就要小心了，因为如果表达式抛出错误，那么之前完成的计算是不能回滚的。")])])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("简写方法名")])]),e._v(" "),o("p",[e._v("在给对象定义方法时，通常都要写一个方法名、冒号，然后再引用一个匿名函数表达式，如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  sayName: function(name) {\n    console.log('My name is ${name}');\n  }\n};\n\nperson.sayName('Matt'); // My name is Matt\n")])])]),o("p",[e._v("新的简写方法的语法遵循同样的模式，但开发者要放弃给函数表达式命名（不过给作为方法的函数命名通常没什么用）。相应地，这样也可以明显缩短方法声明。")]),e._v(" "),o("p",[e._v("以下代码和之前的代码在行为上是等价的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  sayName(name) {\n    console.log('My name is ${name}');\n  }\n};\n\nperson.sayName('Matt'); // My name is Matt\n")])])]),o("p",[e._v("简写方法名对获取函数和设置函数也是适用的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name_: '',\n  get name() {\n    return this.name_;\n  },\n  set name(name) {\n    this.name_ = name;\n  },\n  sayName() {\n    console.log('My name is ${this.name_}');\n  }\n};\n\nperson.name = 'Matt';\nperson.sayName(); // My name is Matt\n")])])]),o("p",[e._v("简写方法名与可计算属性键相互兼容：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const methodKey = 'sayName';\n\nlet person = {\n  [methodKey](name) {\n    console.log('My name is ${name}');\n  }\n}\n\nperson.sayName('Matt'); // My name is Matt\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　简写方法名对于本章后面介绍的 ECMAScript 6 的类更有用。")])])])]),e._v(" "),o("h3",{attrs:{id:"_8-1-7-对象解构"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-7-对象解构"}},[e._v("#")]),e._v(" 8.1.7 　对象解构")]),e._v(" "),o("p",[e._v("ECMAScript 6 新增了对象解构语法，可以在一条语句中使用嵌套数据实现一个或多个赋值操作。简单地说，对象解构就是使用与对象匹配的结构来实现对象属性赋值。")]),e._v(" "),o("p",[e._v("下面的例子展示了两段等价的代码，首先是不使用对象解构的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 不使用对象解构\nlet person = {\n  name: 'Matt',\n  age: 27\n};\n\nlet personName = person.name,\n    personAge = person.age;\n\nconsole.log(personName); // Matt\nconsole.log(personAge);  // 27\n")])])]),o("p",[e._v("然后，是使用对象解构的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 使用对象解构\nlet person = {\n  name: 'Matt',\n  age: 27\n};\n\nlet { name: personName, age: personAge } = person;\n\nconsole.log(personName);  // Matt\nconsole.log(personAge);   // 27\n")])])]),o("p",[e._v("使用解构，可以在一个类似对象字面量的结构中，声明多个变量，同时执行多个赋值操作。如果想让变量直接使用属性的名称，那么可以使用简写语法，比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name: 'Matt',\n  age: 27\n};\n\nlet { name, age } = person;\n\nconsole.log(name);  // Matt\nconsole.log(age);   // 27\n")])])]),o("p",[e._v("解构赋值不一定与对象的属性匹配。赋值的时候可以忽略某些属性，而如果引用的属性不存在，则该变量的值就是"),o("code",[e._v("undefined")]),e._v("：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name: 'Matt',\n  age: 27\n};\n\nlet { name, job } = person;\n\nconsole.log(name);  // Matt\nconsole.log(job);   // undefined\n")])])]),o("p",[e._v("也可以在解构赋值的同时定义默认值，这适用于前面刚提到的引用的属性不存在于源对象中的情况：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name: 'Matt',\n  age: 27\n};\n\nlet { name, job='Software engineer' } = person;\n\nconsole.log(name); // Matt\nconsole.log(job);  // Software engineer\n")])])]),o("p",[e._v("解构在内部使用函数"),o("code",[e._v("ToObject()")]),e._v("（不能在运行时环境中直接访问）把源数据结构转换为对象。这意味着在对象解构的上下文中，原始值会被当成对象。这也意味着（根据"),o("code",[e._v("ToObject()")]),e._v("的定义），"),o("code",[e._v("null")]),e._v("和"),o("code",[e._v("undefined")]),e._v("不能被解构，否则会抛出错误。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let { length } = 'foobar';\nconsole.log(length);        // 6\n\nlet { constructor: c } = 4;\nconsole.log(c === Number);  // true\n\nlet { _ } = null;           // TypeError\n\nlet { _ } = undefined;      // TypeError\n")])])]),o("p",[e._v("解构并不要求变量必须在解构表达式中声明。不过，如果是给事先声明的变量赋值，则赋值表达式必须包含在一对括号中：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let personName, personAge;\n\nlet person = {\n  name: 'Matt',\n  age: 27\n};\n\n({name: personName, age: personAge} = person);\n\nconsole.log(personName, personAge); // Matt, 27\n")])])]),o("ol",[o("li",[o("p",[o("strong",[e._v("嵌套解构")])]),e._v(" "),o("p",[e._v("解构对于引用嵌套的属性或赋值目标没有限制。为此，可以通过解构来复制对象属性：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name: 'Matt',\n  age: 27,\n  job: {\n    title: 'Software engineer'\n  }\n};\nlet personCopy = {};\n　\n　\n({\n  name: personCopy.name,\n  age: personCopy.age,\n  job: personCopy.job\n} = person);\n\n// 因为一个对象的引用被赋值给personCopy，所以修改\n// person.job对象的属性也会影响personCopy\nperson.job.title = 'Hacker'\n\nconsole.log(person);\n// { name: 'Matt', age: 27, job: { title: 'Hacker' } }\n\nconsole.log(personCopy);\n// { name: 'Matt', age: 27, job: { title: 'Hacker' } }\n")])])]),o("p",[e._v("解构赋值可以使用嵌套结构，以匹配嵌套的属性：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name: 'Matt',\n  age: 27,\n  job: {\n    title: 'Software engineer'\n  }\n};\n\n// 声明title变量并将person.job.title的值赋给它\nlet { job: { title } } = person;\n\nconsole.log(title); // Software engineer\n")])])]),o("p",[e._v("在外层属性没有定义的情况下不能使用嵌套解构。无论源对象还是目标对象都一样：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  job: {\n    title: 'Software engineer'\n  }\n};\nlet personCopy = {};\n\n// foo在源对象上是undefined\n({\n  foo: {\n    bar: personCopy.bar\n  }\n} = person);\n// TypeError: Cannot destructure property 'bar' of 'undefined' or 'null'.\n\n// job在目标对象上是undefined\n({\n  job: {\n    title: personCopy.job.title\n  }\n} = person);\n// TypeError: Cannot set property 'title' of undefined\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("部分解构")])]),e._v(" "),o("p",[e._v("需要注意的是，涉及多个属性的解构赋值是一个输出无关的顺序化操作。如果一个解构表达式涉及多个赋值，开始的赋值成功而后面的赋值出错，则整个解构赋值只会完成一部分：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name: 'Matt',\n  age: 27\n};\n\nlet personName, personBar, personAge;\n\ntry {\n  // person.foo是undefined，因此会抛出错误\n  ({name: personName, foo: { bar: personBar }, age: personAge} = person);\n} catch(e) {}\n\nconsole.log(personName, personBar, personAge);\n// Matt, undefined, undefined\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("参数上下文匹配")])]),e._v(" "),o("p",[e._v("在函数参数列表中也可以进行解构赋值。对参数的解构赋值不会影响"),o("code",[e._v("arguments")]),e._v("对象，但可以在函数签名中声明在函数体内使用局部变量：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let person = {\n  name: 'Matt',\n  age: 27\n};\n\nfunction printPerson(foo, {name, age}, bar) {\n  console.log(arguments);\n  console.log(name, age);\n}\n\nfunction printPerson2(foo, {name: personName, age: personAge}, bar) {\n  console.log(arguments);\n  console.log(personName, personAge);\n}\n\nprintPerson('1st', person, '2nd');\n// ['1st', { name: 'Matt', age: 27 }, '2nd']\n// 'Matt', 27\n\nprintPerson2('1st', person, '2nd');\n// ['1st', { name: 'Matt', age: 27 }, '2nd']\n// 'Matt', 27\n")])])])])]),e._v(" "),o("h2",{attrs:{id:"_8-2-创建对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-创建对象"}},[e._v("#")]),e._v(" 8.2 　创建对象")]),e._v(" "),o("p",[e._v("虽然使用"),o("code",[e._v("Object")]),e._v("构造函数或对象字面量可以方便地创建对象，但这些方式也有明显不足：创建具有同样接口的多个对象需要重复编写很多代码。")]),e._v(" "),o("h3",{attrs:{id:"_8-2-1-概述"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-1-概述"}},[e._v("#")]),e._v(" 8.2.1 　概述")]),e._v(" "),o("p",[e._v("综观 ECMAScript 规范的历次发布，每个版本的特性似乎都出人意料。ECMAScript 5.1 并没有正式支持面向对象的结构，比如类或继承。但是，正如接下来几节会介绍的，巧妙地运用原型式继承可以成功地模拟同样的行为。")]),e._v(" "),o("p",[e._v("ECMAScript 6 开始正式支持类和继承。ES6 的类旨在完全涵盖之前规范设计的基于原型的继承模式。不过，无论从哪方面看，ES6 的类都仅仅是封装了 ES5.1 构造函数加原型继承的语法糖而已。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　不要误会：采用面向对象编程模式的 JavaScript 代码还是应该使用 ECMAScript 6 的类。但不管怎么说，理解 ES6 类出现之前的惯例总是有益无害的。特别是 ES6 的类定义本身就相当于对原有结构的封装。因此，在介绍 ES6 的类之前，本书会循序渐进地介绍被类取代的那些底层概念。")])]),e._v(" "),o("h3",{attrs:{id:"_8-2-2-工厂模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-2-工厂模式"}},[e._v("#")]),e._v(" 8.2.2 　工厂模式")]),e._v(" "),o("p",[e._v("工厂模式是一种众所周知的设计模式，广泛应用于软件工程领域，用于抽象创建特定对象的过程。（本书后面还会讨论其他设计模式及其在 JavaScript 中的实现。）下面的例子展示了一种按照特定接口创建对象的方式：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function createPerson(name, age, job) {\n  let o = new Object();\n  o.name = name;\n  o.age = age;\n  o.job = job;\n  o.sayName = function() {\n    console.log(this.name);\n  };\n  return o;\n}\n\nlet person1 = createPerson("Nicholas", 29, "Software Engineer");\nlet person2 = createPerson("Greg", 27, "Doctor");\n')])])]),o("p",[e._v("这里，函数"),o("code",[e._v("createPerson()")]),e._v("接收 3 个参数，根据这几个参数构建了一个包含"),o("code",[e._v("Person")]),e._v("信息的对象。可以用不同的参数多次调用这个函数，每次都会返回包含 3 个属性和 1 个方法的对象。这种工厂模式虽然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）。")]),e._v(" "),o("h3",{attrs:{id:"_8-2-3-构造函数模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-3-构造函数模式"}},[e._v("#")]),e._v(" 8.2.3 　构造函数模式")]),e._v(" "),o("p",[e._v("前面几章提到过，ECMAScript 中的构造函数是用于创建特定类型对象的。像"),o("code",[e._v("Object")]),e._v("和"),o("code",[e._v("Array")]),e._v("这样的原生构造函数，运行时可以直接在执行环境中使用。当然也可以自定义构造函数，以函数的形式为自己的对象类型定义属性和方法。")]),e._v(" "),o("p",[e._v("比如，前面的例子使用构造函数模式可以这样写：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person(name, age, job){\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    console.log(this.name);\n  };\n}\n\nlet person1 = new Person("Nicholas", 29, "Software Engineer");\nlet person2 = new Person("Greg", 27, "Doctor");\n\nperson1.sayName();  // Nicholas\nperson2.sayName();  // Greg\n')])])]),o("p",[e._v("在这个例子中，"),o("code",[e._v("Person()")]),e._v("构造函数代替了"),o("code",[e._v("createPerson()")]),e._v("工厂函数。实际上，"),o("code",[e._v("Person()")]),e._v("内部的代码跟"),o("code",[e._v("createPerson()")]),e._v("基本是一样的，只是有如下区别。")]),e._v(" "),o("ul",[o("li",[e._v("没有显式地创建对象。")]),e._v(" "),o("li",[e._v("属性和方法直接赋值给了"),o("code",[e._v("this")]),e._v("。")]),e._v(" "),o("li",[e._v("没有"),o("code",[e._v("return")]),e._v("。")])]),e._v(" "),o("p",[e._v("另外，要注意函数名"),o("code",[e._v("Person")]),e._v("的首字母大写了。按照惯例，构造函数名称的首字母都是要大写的，非构造函数则以小写字母开头。这是从面向对象编程语言那里借鉴的，有助于在 ECMAScript 中区分构造函数和普通函数。毕竟 ECMAScript 的构造函数就是能创建对象的函数。")]),e._v(" "),o("p",[e._v("要创建"),o("code",[e._v("Person")]),e._v("的实例，应使用"),o("code",[e._v("new")]),e._v("操作符。以这种方式调用构造函数会执行如下操作。")]),e._v(" "),o("p",[e._v("(1) 在内存中创建一个新对象。")]),e._v(" "),o("p",[e._v("(2) 这个新对象内部的"),o("code",[e._v("[[Prototype]]")]),e._v("特性被赋值为构造函数的"),o("code",[e._v("prototype")]),e._v("属性。")]),e._v(" "),o("p",[e._v("(3) 构造函数内部的"),o("code",[e._v("this")]),e._v("被赋值为这个新对象（即"),o("code",[e._v("this")]),e._v("指向新对象）。")]),e._v(" "),o("p",[e._v("(4) 执行构造函数内部的代码（给新对象添加属性）。")]),e._v(" "),o("p",[e._v("(5) 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。")]),e._v(" "),o("p",[e._v("上一个例子的最后，"),o("code",[e._v("person1")]),e._v("和"),o("code",[e._v("person2")]),e._v("分别保存着"),o("code",[e._v("Person")]),e._v("的不同实例。这两个对象都有一个"),o("code",[e._v("constructor")]),e._v("属性指向"),o("code",[e._v("Person")]),e._v("，如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("console.log(person1.constructor == Person);  // true\nconsole.log(person2.constructor == Person);  // true\n")])])]),o("p",[o("code",[e._v("constructor")]),e._v("本来是用于标识对象类型的。不过，一般认为"),o("code",[e._v("instanceof")]),e._v("操作符是确定对象类型更可靠的方式。前面例子中的每个对象都是"),o("code",[e._v("Object")]),e._v("的实例，同是也是"),o("code",[e._v("Person")]),e._v("的实例，如下面调用"),o("code",[e._v("instanceof")]),e._v("操作符的结果所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("console.log(person1 instanceof Object);  // true\nconsole.log(person1 instanceof Person);  // true\nconsole.log(person2 instanceof Object);  // true\nconsole.log(person2 instanceof Person);  // true\n")])])]),o("p",[e._v("定义自定义构造函数可以确保实例被标识为特定类型，相比于工厂模式，这是一个很大的好处。在这个例子中，"),o("code",[e._v("person1")]),e._v("和"),o("code",[e._v("person2")]),e._v("之所以也被认为是"),o("code",[e._v("Object")]),e._v("的实例，是因为所有自定义对象都继承自"),o("code",[e._v("Object")]),e._v("（后面再详细讨论这一点）。")]),e._v(" "),o("p",[e._v("构造函数不一定要写成函数声明的形式。赋值给变量的函数表达式也可以表示构造函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let Person = function(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    console.log(this.name);\n  };\n}\n\nlet person1 = new Person("Nicholas", 29, "Software Engineer");\nlet person2 = new Person("Greg", 27, "Doctor");\n\nperson1.sayName();  // Nicholas\nperson2.sayName();  // Greg\n\nconsole.log(person1 instanceof Object);  // true\nconsole.log(person1 instanceof Person);  // true\nconsole.log(person2 instanceof Object);  // true\nconsole.log(person2 instanceof Person);  // true\n')])])]),o("p",[e._v("在实例化时，如果不想传参数，那么构造函数后面的括号可加可不加。只要有"),o("code",[e._v("new")]),e._v("操作符，就可以调用相应的构造函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {\n  this.name = "Jake";\n  this.sayName = function() {\n    console.log(this.name);\n  };\n}\n\nlet person1 = new Person();\nlet person2 = new Person;\n\nperson1.sayName();  // Jake\nperson2.sayName();  // Jake\n\nconsole.log(person1 instanceof Object);  // true\nconsole.log(person1 instanceof Person);  // true\nconsole.log(person2 instanceof Object);  // true\nconsole.log(person2 instanceof Person);  // true\n')])])]),o("ol",[o("li",[o("p",[o("strong",[e._v("构造函数也是函数")])]),e._v(" "),o("p",[e._v("构造函数与普通函数唯一的区别就是调用方式不同。除此之外，构造函数也是函数。并没有把某个函数定义为构造函数的特殊语法。任何函数只要使用"),o("code",[e._v("new")]),e._v("操作符调用就是构造函数，而不使用"),o("code",[e._v("new")]),e._v("操作符调用的函数就是普通函数。比如，前面的例子中定义的"),o("code",[e._v("Person()")]),e._v("可以像下面这样调用：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('// 作为构造函数\nlet person = new Person("Nicholas", 29, "Software Engineer");\nperson.sayName();    // "Nicholas"\n\n// 作为函数调用\nPerson("Greg", 27, "Doctor");   // 添加到window对象\nwindow.sayName();    // "Greg"\n\n// 在另一个对象的作用域中调用\nlet o = new Object();\nPerson.call(o, "Kristen", 25, "Nurse");\no.sayName();   // "Kristen"\n')])])]),o("p",[e._v("这个例子一开始展示了典型的构造函数调用方式，即使用"),o("code",[e._v("new")]),e._v("操作符创建一个新对象。然后是普通函数的调用方式，这时候没有使用"),o("code",[e._v("new")]),e._v("操作符调用"),o("code",[e._v("Person()")]),e._v("，结果会将属性和方法添加到"),o("code",[e._v("window")]),e._v("对象。这里要记住，在调用一个函数而没有明确设置"),o("code",[e._v("this")]),e._v("值的情况下（即没有作为对象的方法调用，或者没有使用"),o("code",[e._v("call()")]),e._v("/"),o("code",[e._v("apply()")]),e._v("调用），"),o("code",[e._v("this")]),e._v("始终指向"),o("code",[e._v("Global")]),e._v("对象（在浏览器中就是"),o("code",[e._v("window")]),e._v("对象）。因此在上面的调用之后，"),o("code",[e._v("window")]),e._v("对象上就有了一个"),o("code",[e._v("sayName()")]),e._v("方法，调用它会返回"),o("code",[e._v('"Greg"')]),e._v("。最后展示的调用方式是通过"),o("code",[e._v("call()")]),e._v("（或"),o("code",[e._v("apply()")]),e._v("）调用函数，同时将特定对象指定为作用域。这里的调用将对象"),o("code",[e._v("o")]),e._v("指定为"),o("code",[e._v("Person()")]),e._v("内部的"),o("code",[e._v("this")]),e._v("值，因此执行完函数代码后，所有属性和"),o("code",[e._v("sayName()")]),e._v("方法都会添加到对象"),o("code",[e._v("o")]),e._v("上面。")])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("构造函数的问题")])]),e._v(" "),o("p",[e._v("构造函数虽然有用，但也不是没有问题。构造函数的主要问题在于，其定义的方法会在每个实例上都创建一遍。因此对前面的例子而言，"),o("code",[e._v("person1")]),e._v("和"),o("code",[e._v("person2")]),e._v("都有名为"),o("code",[e._v("sayName()")]),e._v("的方法，但这两个方法不是同一个"),o("code",[e._v("Function")]),e._v("实例。我们知道，ECMAScript 中的函数是对象，因此每次定义函数时，都会初始化一个对象。逻辑上讲，这个构造函数实际上是这样的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person(name, age, job){\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = new Function("console.log(this.name)"); // 逻辑等价\n}\n')])])]),o("p",[e._v("这样理解这个构造函数可以更清楚地知道，每个"),o("code",[e._v("Person")]),e._v("实例都会有自己的"),o("code",[e._v("Function")]),e._v("实例用于显示"),o("code",[e._v("name")]),e._v("属性。当然了，以这种方式创建函数会带来不同的作用域链和标识符解析。但创建新"),o("code",[e._v("Function")]),e._v("实例的机制是一样的。因此不同实例上的函数虽然同名却不相等，如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("console.log(person1.sayName == person2.sayName); // false\n")])])]),o("p",[e._v("因为都是做一样的事，所以没必要定义两个不同的"),o("code",[e._v("Function")]),e._v("实例。况且，"),o("code",[e._v("this")]),e._v("对象可以把函数与对象的绑定推迟到运行时。")]),e._v(" "),o("p",[e._v("要解决这个问题，可以把函数定义转移到构造函数外部：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person(name, age, job){\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = sayName;\n}\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nlet person1 = new Person("Nicholas", 29, "Software Engineer");\nlet person2 = new Person("Greg", 27, "Doctor");\n\nperson1.sayName();  // Nicholas\nperson2.sayName();  // Greg\n')])])]),o("p",[e._v("在这里，"),o("code",[e._v("sayName()")]),e._v("被定义在了构造函数外部。在构造函数内部，"),o("code",[e._v("sayName")]),e._v("属性等于全局"),o("code",[e._v("sayName()")]),e._v("函数。因为这一次"),o("code",[e._v("sayName")]),e._v("属性中包含的只是一个指向外部函数的指针，所以"),o("code",[e._v("person1")]),e._v("和"),o("code",[e._v("person2")]),e._v("共享了定义在全局作用域上的"),o("code",[e._v("sayName()")]),e._v("函数。这样虽然解决了相同逻辑的函数重复定义的问题，但全局作用域也因此被搞乱了，因为那个函数实际上只能在一个对象上调用。如果这个对象需要多个方法，那么就要在全局作用域中定义多个函数。这会导致自定义类型引用的代码不能很好地聚集一起。这个新问题可以通过原型模式来解决。")])])]),e._v(" "),o("h3",{attrs:{id:"_8-2-4-原型模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-4-原型模式"}},[e._v("#")]),e._v(" 8.2.4 　原型模式")]),e._v(" "),o("p",[e._v("每个函数都会创建一个"),o("code",[e._v("prototype")]),e._v("属性，这个属性是一个对象，包含应该由特定引用类型的实例共享的属性和方法。实际上，这个对象就是通过调用构造函数创建的对象的原型。使用原型对象的好处是，在它上面定义的属性和方法可以被对象实例共享。原来在构造函数中直接赋给对象实例的值，可以直接赋值给它们的原型，如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet person1 = new Person();\nperson1.sayName(); // "Nicholas"\n\nlet person2 = new Person();\nperson2.sayName(); // "Nicholas"\n\nconsole.log(person1.sayName == person2.sayName); // true\n')])])]),o("p",[e._v("使用函数表达式也可以：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let Person = function() {};\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet person1 = new Person();\nperson1.sayName();   // "Nicholas"\n\nlet person2 = new Person();\nperson2.sayName();   // "Nicholas"\n\nconsole.log(person1.sayName == person2.sayName); // true\n')])])]),o("p",[e._v("这里，所有属性和"),o("code",[e._v("sayName()")]),e._v("方法都直接添加到了"),o("code",[e._v("Person")]),e._v("的"),o("code",[e._v("prototype")]),e._v("属性上，构造函数体中什么也没有。但这样定义之后，调用构造函数创建的新对象仍然拥有相应的属性和方法。与构造函数模式不同，使用这种原型模式定义的属性和方法是由所有实例共享的。因此"),o("code",[e._v("person1")]),e._v("和"),o("code",[e._v("person2")]),e._v("访问的都是相同的属性和相同的"),o("code",[e._v("sayName()")]),e._v("函数。要理解这个过程，就必须理解 ECMAScript 中原型的本质。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("理解原型")])]),e._v(" "),o("p",[e._v("无论何时，只要创建一个函数，就会按照特定的规则为这个函数创建一个"),o("code",[e._v("prototype")]),e._v("属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为"),o("code",[e._v("constructor")]),e._v("的属性，指回与之关联的构造函数。对前面的例子而言，"),o("code",[e._v("Person.prototype.constructor")]),e._v("指向"),o("code",[e._v("Person")]),e._v("。然后，因构造函数而异，可能会给原型对象添加其他属性和方法。")]),e._v(" "),o("p",[e._v("在自定义构造函数时，原型对象默认只会获得"),o("code",[e._v("constructor")]),e._v("属性，其他的所有方法都继承自"),o("code",[e._v("Object")]),e._v("。每次调用构造函数创建一个新实例，这个实例的内部"),o("code",[e._v("[[Prototype]]")]),e._v("指针就会被赋值为构造函数的原型对象。脚本中没有访问这个"),o("code",[e._v("[[Prototype]]")]),e._v("特性的标准方式，但 Firefox、Safari 和 Chrome 会在每个对象上暴露"),o("code",[e._v("__proto__")]),e._v("属性，通过这个属性可以访问对象的原型。在其他实现中，这个特性完全被隐藏了。关键在于理解这一点：实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。")]),e._v(" "),o("p",[e._v("这种关系不好可视化，但可以通过下面的代码来理解原型的行为：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("/**\n * 构造函数可以是函数表达式\n * 也可以是函数声明，因此以下两种形式都可以：\n *   function Person {}\n *   let Person = function() {}\n */\nfunction Person() {}\n\n/**\n * 声明之后，构造函数就有了一个\n * 与之关联的原型对象：\n */\nconsole.log(typeof Person.prototype);\nconsole.log(Person.prototype);\n// {\n//   constructor: f Person(),\n//   __proto__: Object\n// }\n\n/**\n * 如前所述，构造函数有一个prototype属性\n * 引用其原型对象，而这个原型对象也有一个\n * constructor属性，引用这个构造函数\n * 换句话说，两者循环引用：\n */\nconsole.log(Person.prototype.constructor === Person); // true\n\n/**\n * 正常的原型链都会终止于Object的原型对象\n * Object原型的原型是null\n */\nconsole.log(Person.prototype.__proto__ === Object.prototype);   // true\nconsole.log(Person.prototype.__proto__.constructor === Object); // true\nconsole.log(Person.prototype.__proto__.__proto__ === null);     // true\n\nconsole.log(Person.prototype.__proto__);\n// {\n//   constructor: f Object(),\n//   toString: ...\n//   hasOwnProperty: ...\n//   isPrototypeOf: ...\n//   ...\n// }\n　\n　\nlet person1 = new Person(),\n    person2 = new Person();\n\n/**\n * 构造函数、原型对象和实例\n * 是3个完全不同的对象：\n */\nconsole.log(person1 !== Person);           // true\nconsole.log(person1 !== Person.prototype); // true\nconsole.log(Person.prototype !== Person);  // true\n\n/**\n  * 实例通过__proto__链接到原型对象，\n  * 它实际上指向藏特性[[Prototype]]\n  *\n  * 构造函数通过prototype属性链接到原型对象\n  *\n  * 实例与构造函数没有直接联系，与原型对象有直接联系\n  */\nconsole.log(person1.__proto__ === Person.prototype);   // true\nconosle.log(person1.__proto__.constructor === Person); // true\n\n/**\n * 同一个构造函数创建的两个实例\n * 共享同一个原型对象：\n */\nconsole.log(person1.__proto__ === person2.__proto__); // true\n\n/**\n * instanceof检查实例的原型链中\n * 是否包含指定构造函数的原型：\n */\nconsole.log(person1 instanceof Person);           // true\nconsole.log(person1 instanceof Object);           // true\nconsole.log(Person.prototype instanceof Object);  // true\n")])])]),o("p",[e._v("对于前面例子中的"),o("code",[e._v("Person")]),e._v("构造函数和"),o("code",[e._v("Person.prototype")]),e._v("，可以通过图 8-1 看出各个对象之间的关系。")]),e._v(" "),o("p",[o("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/010.png",alt:"img"}})]),e._v(" "),o("p",[o("strong",[e._v("图　 8-1")])]),e._v(" "),o("p",[e._v("图 8-1 展示了"),o("code",[e._v("Person")]),e._v("构造函数、"),o("code",[e._v("Person")]),e._v("的原型对象和"),o("code",[e._v("Person")]),e._v("现有两个实例之间的关系。注意，"),o("code",[e._v("Person.prototype")]),e._v("指向原型对象，而"),o("code",[e._v("Person.prototype.contructor")]),e._v("指回"),o("code",[e._v("Person")]),e._v("构造函数。原型对象包含"),o("code",[e._v("constructor")]),e._v("属性和其他后来添加的属性。"),o("code",[e._v("Person")]),e._v("的两个实例"),o("code",[e._v("person1")]),e._v("和"),o("code",[e._v("person2")]),e._v("都只有一个内部属性指回"),o("code",[e._v("Person.prototype")]),e._v("，而且两者都与构造函数没有直接联系。另外要注意，虽然这两个实例都没有属性和方法，但"),o("code",[e._v("person1.sayName()")]),e._v("可以正常调用。这是由于对象属性查找机制的原因。")]),e._v(" "),o("p",[e._v("虽然不是所有实现都对外暴露了"),o("code",[e._v("[[Prototype]]")]),e._v("，但可以使用"),o("code",[e._v("isPrototypeOf()")]),e._v("方法确定两个对象之间的这种关系。本质上，"),o("code",[e._v("isPrototypeOf()")]),e._v("会在传入参数的"),o("code",[e._v("[[Prototype]]")]),e._v("指向调用它的对象时返回"),o("code",[e._v("true")]),e._v("，如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("console.log(Person.prototype.isPrototypeOf(person1));  // true\nconsole.log(Person.prototype.isPrototypeOf(person2));  // true\n")])])]),o("p",[e._v("这里通过原型对象调用"),o("code",[e._v("isPrototypeOf()")]),e._v("方法检查了"),o("code",[e._v("person1")]),e._v("和"),o("code",[e._v("person2")]),e._v("。因为这两个例子内部都有链接指向"),o("code",[e._v("Person.prototype")]),e._v("，所以结果都返回"),o("code",[e._v("true")]),e._v("。")]),e._v(" "),o("p",[e._v("ECMAScript 的"),o("code",[e._v("Object")]),e._v("类型有一个方法叫"),o("code",[e._v("Object.getPrototypeOf()")]),e._v("，返回参数的内部特性"),o("code",[e._v("[[Prototype]]")]),e._v("的值。例如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('console.log(Object.getPrototypeOf(person1) == Person.prototype);  // true\nconsole.log(Object.getPrototypeOf(person1).name);                 // "Nicholas"\n')])])]),o("p",[e._v("第一行代码简单确认了"),o("code",[e._v("Object.getPrototypeOf()")]),e._v("返回的对象就是传入对象的原型对象。第二行代码则取得了原型对象上"),o("code",[e._v("name")]),e._v("属性的值，即"),o("code",[e._v('"Nicholas"')]),e._v("。使用"),o("code",[e._v("Object.getPrototypeOf()")]),e._v("可以方便地取得一个对象的原型，而这在通过原型实现继承时显得尤为重要（本章后面会介绍）。")]),e._v(" "),o("p",[o("code",[e._v("Object")]),e._v("类型还有一个"),o("code",[e._v("setPrototypeOf()")]),e._v("方法，可以向实例的私有特性"),o("code",[e._v("[[Prototype]]")]),e._v("写入一个新值。这样就可以重写一个对象的原型继承关系：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let biped = {\n  numLegs: 2\n};\nlet person = {\n  name: 'Matt'\n};\n\nObject.setPrototypeOf(person, biped);\n\nconsole.log(person.name);                              // Matt\nconsole.log(person.numLegs);                           // 2\nconsole.log(Object.getPrototypeOf(person) === biped);  // true\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("警告")]),e._v(" "),o("code",[e._v("Object.setPrototypeOf()")]),e._v("可能会严重影响代码性能。Mozilla 文档说得很清楚：“在所有浏览器和 JavaScript 引擎中，修改继承关系的影响都是微妙且深远的。这种影响并不仅是执行"),o("code",[e._v("Object.setPrototypeOf()")]),e._v("语句那么简单，而是会涉及所有访问了那些修改过"),o("code",[e._v("[[Prototype]]")]),e._v("的对象的代码。”")])]),e._v(" "),o("p",[e._v("为避免使用"),o("code",[e._v("Object.setPrototypeOf()")]),e._v("可能造成的性能下降，可以通过"),o("code",[e._v("Object.create()")]),e._v("来创建一个新对象，同时为其指定原型：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let biped = {\n  numLegs: 2\n};\nlet person = Object.create(biped);\nperson.name = 'Matt';\n\nconsole.log(person.name);                              // Matt\nconsole.log(person.numLegs);                           // 2\nconsole.log(Object.getPrototypeOf(person) === biped);  // true\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("原型层级")])]),e._v(" "),o("p",[e._v("在通过对象访问属性时，会按照这个属性的名称开始搜索。搜索开始于对象实例本身。如果在这个实例上发现了给定的名称，则返回该名称对应的值。如果没有找到这个属性，则搜索会沿着指针进入原型对象，然后在原型对象上找到属性后，再返回对应的值。因此，在调用"),o("code",[e._v("person1.sayName()")]),e._v("时，会发生两步搜索。首先，JavaScript 引擎会问：“"),o("code",[e._v("person1")]),e._v("实例有"),o("code",[e._v("sayName")]),e._v("属性吗？”答案是没有。然后，继续搜索并问：“"),o("code",[e._v("person1")]),e._v("的原型有"),o("code",[e._v("sayName")]),e._v("属性吗？”答案是有。于是就返回了保存在原型上的这个函数。在调用"),o("code",[e._v("person2.sayName()")]),e._v("时，会发生同样的搜索过程，而且也会返回相同的结果。这就是原型用于在多个对象实例间共享属性和方法的原理。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　前面提到的"),o("code",[e._v("constructor")]),e._v("属性只存在于原型对象，因此通过实例对象也是可以访问到的。")])]),e._v(" "),o("p",[e._v("虽然可以通过实例读取原型对象上的值，但不可能通过实例重写这些值。如果在实例上添加了一个与原型对象中同名的属性，那就会在实例上创建这个属性，这个属性会遮住原型对象上的属性。下面看一个例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet person1 = new Person();\nlet person2 = new Person();\n\nperson1.name = "Greg";\nconsole.log(person1.name);  // "Greg"，来自实例\nconsole.log(person2.name);  // "Nicholas"，来自原型\n')])])]),o("p",[e._v("在这个例子中，"),o("code",[e._v("person1")]),e._v("的"),o("code",[e._v("name")]),e._v("属性遮蔽了原型对象上的同名属性。虽然"),o("code",[e._v("person1.name")]),e._v("和"),o("code",[e._v("person2.name")]),e._v("都返回了值，但前者返回的是"),o("code",[e._v('"Greg"')]),e._v("（来自实例），后者返回的是"),o("code",[e._v('"Nicholas"')]),e._v("（来自原型）。当"),o("code",[e._v("console.log()")]),e._v("访问"),o("code",[e._v("person1.name")]),e._v("时，会先在实例上搜索个属性。因为这个属性在实例上存在，所以就不会再搜索原型对象了。而在访问"),o("code",[e._v("person2.name")]),e._v("时，并没有在实例上找到这个属性，所以会继续搜索原型对象并使用定义在原型上的属性。")]),e._v(" "),o("p",[e._v("只要给对象实例添加一个属性，这个属性就会"),o("strong",[e._v("遮蔽")]),e._v("（shadow）原型对象上的同名属性，也就是虽然不会修改它，但会屏蔽对它的访问。即使在实例上把这个属性设置为"),o("code",[e._v("null")]),e._v("，也不会恢复它和原型的联系。不过，使用"),o("code",[e._v("delete")]),e._v("操作符可以完全删除实例上的这个属性，从而让标识符解析过程能够继续搜索原型对象。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet person1 = new Person();\nlet person2 = new Person();\n\nperson1.name = "Greg";\nconsole.log(person1.name);  // "Greg"，来自实例\nconsole.log(person2.name);  // "Nicholas"，来自原型\n\ndelete person1.name;\nconsole.log(person1.name);  // "Nicholas"，来自原型\n')])])]),o("p",[e._v("这个修改后的例子中使用"),o("code",[e._v("delete")]),e._v("删除了"),o("code",[e._v("person1.name")]),e._v("，这个属性之前以"),o("code",[e._v('"Greg"')]),e._v("遮蔽了原型上的同名属性。然后原型上"),o("code",[e._v("name")]),e._v("属性的联系就恢复了，因此再访问"),o("code",[e._v("person1.name")]),e._v("时，就会返回原型对象上这个属性的值。")]),e._v(" "),o("p",[o("code",[e._v("hasOwnProperty()")]),e._v("方法用于确定某个属性是在实例上还是在原型对象上。这个方法是继承自"),o("code",[e._v("Object")]),e._v("的，会在属性存在于调用它的对象实例上时返回"),o("code",[e._v("true")]),e._v("，如下面的例子所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet person1 = new Person();\nlet person2 = new Person();\nconsole.log(person1.hasOwnProperty("name")); // false\n\nperson1.name = "Greg";\nconsole.log(person1.name); // "Greg"，来自实例\nconsole.log(person1.hasOwnProperty("name")); // true\n\nconsole.log(person2.name); // "Nicholas"，来自原型\nconsole.log(person2.hasOwnProperty("name")); // false\n\ndelete person1.name;\nconsole.log(person1.name); // "Nicholas"，来自原型\nconsole.log(person1.hasOwnProperty("name")); // false\n')])])]),o("p",[e._v("在这个例子中，通过调用"),o("code",[e._v("hasOwnProperty()")]),e._v("能够清楚地看到访问的是实例属性还是原型属性。调用"),o("code",[e._v('person1.hasOwnProperty("name")')]),e._v("只在重写"),o("code",[e._v("person1")]),e._v("上"),o("code",[e._v("name")]),e._v("属性的情况下才返回"),o("code",[e._v("true")]),e._v("，表明此时"),o("code",[e._v("name")]),e._v("是一个实例属性，不是原型属性。图 8-2 形象地展示了上面例子中各个步骤的状态。（为简单起见，图中省略了"),o("code",[e._v("Person")]),e._v("构造函数。）")]),e._v(" "),o("p",[o("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/011.png",alt:"img"}})]),e._v(" "),o("p",[o("strong",[e._v("图　 8-2")])]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　 ECMAScript 的"),o("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("方法只对实例属性有效。要取得原型属性的描述符，就必须直接在原型对象上调用"),o("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("。")])])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("原型和 in 操作符")])]),e._v(" "),o("p",[e._v("有两种方式使用"),o("code",[e._v("in")]),e._v("操作符：单独使用和在"),o("code",[e._v("for-in")]),e._v("循环中使用。在单独使用时，"),o("code",[e._v("in")]),e._v("操作符会在可以通过对象访问指定属性时返回"),o("code",[e._v("true")]),e._v("，无论该属性是在实例上还是在原型上。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet person1 = new Person();\nlet person2 = new Person();\n\nconsole.log(person1.hasOwnProperty("name")); // false\nconsole.log("name" in person1); // true\n\nperson1.name = "Greg";\nconsole.log(person1.name); // "Greg"，来自实例\nconsole.log(person1.hasOwnProperty("name")); // true\nconsole.log("name" in person1); // true\n\nconsole.log(person2.name); // "Nicholas"，来自原型\nconsole.log(person2.hasOwnProperty("name")); // false\nconsole.log("name" in person2); // true\n\ndelete person1.name;\nconsole.log(person1.name); // "Nicholas"，来自原型\nconsole.log(person1.hasOwnProperty("name")); // false\nconsole.log("name" in person1); // true\n')])])]),o("p",[e._v("在上面整个例子中，"),o("code",[e._v("name")]),e._v("随时可以通过实例或通过原型访问到。因此，调用"),o("code",[e._v('"name" in persoon1')]),e._v("时始终返回"),o("code",[e._v("true")]),e._v("，无论这个属性是否在实例上。如果要确定某个属性是否存在于原型上，则可以像下面这样同时使用"),o("code",[e._v("hasOwnProperty()")]),e._v("和"),o("code",[e._v("in")]),e._v("操作符：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function hasPrototypeProperty(object, name){\n  return !object.hasOwnProperty(name) && (name in object);\n}\n")])])]),o("p",[e._v("只要通过对象可以访问，"),o("code",[e._v("in")]),e._v("操作符就返回"),o("code",[e._v("true")]),e._v("，而"),o("code",[e._v("hasOwnProperty()")]),e._v("只有属性存在于实例上时才返回"),o("code",[e._v("true")]),e._v("。因此，只要"),o("code",[e._v("in")]),e._v("操作符返回"),o("code",[e._v("true")]),e._v("且"),o("code",[e._v("hasOwnProperty()")]),e._v("返回"),o("code",[e._v("false")]),e._v("，就说明该属性是一个原型属性。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet person = new Person();\nconsole.log(hasPrototypeProperty(person, "name")); // true\n\nperson.name = "Greg";\nconsole.log(hasPrototypeProperty(person, "name")); // false\n')])])]),o("p",[e._v("在这里，"),o("code",[e._v("name")]),e._v("属性首先只存在于原型上，所以"),o("code",[e._v("hasPrototypeProperty()")]),e._v("返回"),o("code",[e._v("true")]),e._v("。而在实例上重写这个属性后，实例上也有了这个属性，因此"),o("code",[e._v("hasPrototypeProperty()")]),e._v("返回"),o("code",[e._v("false")]),e._v("。即便此时原型对象还有"),o("code",[e._v("name")]),e._v("属性，但因为实例上的属性遮蔽了它，所以不会用到。")]),e._v(" "),o("p",[e._v("在"),o("code",[e._v("for-in")]),e._v("循环中使用"),o("code",[e._v("in")]),e._v("操作符时，可以通过对象访问且可以被枚举的属性都会返回，包括实例属性和原型属性。遮蔽原型中不可枚举（"),o("code",[e._v("[[Enumerable]]")]),e._v("特性被设置为"),o("code",[e._v("false")]),e._v("）属性的实例属性也会在"),o("code",[e._v("for-in")]),e._v("循环中返回，因为默认情况下开发者定义的属性都是可枚举的。")]),e._v(" "),o("p",[e._v("要获得对象上所有可枚举的实例属性，可以使用"),o("code",[e._v("Object.keys()")]),e._v("方法。这个方法接收一个对象作为参数，返回包含该对象所有可枚举属性名称的字符串数组。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype.name = "Nicholas";\nPerson.prototype.age = 29;\nPerson.prototype.job = "Software Engineer";\nPerson.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nlet keys = Object.keys(Person.prototype);\nconsole.log(keys);   // "name,age,job,sayName"\nlet p1 = new Person();\np1.name = "Rob";\np1.age = 31;\nlet p1keys = Object.keys(p1);\nconsole.log(p1keys); // "name,age"\n')])])]),o("p",[e._v("这里，"),o("code",[e._v("keys")]),e._v("变量保存的数组中包含"),o("code",[e._v('"name"')]),e._v("、"),o("code",[e._v('"age"')]),e._v("、"),o("code",[e._v('"job"')]),e._v("和"),o("code",[e._v('"sayName"')]),e._v("。这是正常情况下通过"),o("code",[e._v("for-in")]),e._v("返回的顺序。而在"),o("code",[e._v("Person")]),e._v("的实例上调用时，"),o("code",[e._v("Object.keys()")]),e._v("返回的数组中只包含"),o("code",[e._v('"name"')]),e._v("和"),o("code",[e._v('"age"')]),e._v("两个属性。")]),e._v(" "),o("p",[e._v("如果想列出所有实例属性，无论是否可以枚举，都可以使用"),o("code",[e._v("Object.getOwnPropertyNames()")]),e._v("：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let keys = Object.getOwnPropertyNames(Person.prototype);\nconsole.log(keys);   // "constructor,name,age,job,sayName"\n')])])]),o("p",[e._v("注意，返回的结果中包含了一个不可枚举的属性"),o("code",[e._v("constructor")]),e._v("。"),o("code",[e._v("Object.keys()")]),e._v("和"),o("code",[e._v("Object.getOwnPropertyNames()")]),e._v("在适当的时候都可用来代替"),o("code",[e._v("for-in")]),e._v("循环。")]),e._v(" "),o("p",[e._v("在 ECMAScript 6 新增符号类型之后，相应地出现了增加一个"),o("code",[e._v("Object.getOwnPropertyNames()")]),e._v("的兄弟方法的需求，因为以符号为键的属性没有名称的概念。因此，"),o("code",[e._v("Object.getOwnPropertySymbols()")]),e._v("方法就出现了，这个方法与"),o("code",[e._v("Object.getOwnPropertyNames()")]),e._v("类似，只是针对符号而已：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let k1 = Symbol('k1'),\n    k2 = Symbol('k2');\n\nlet o = {\n  [k1]: 'k1',\n  [k2]: 'k2'\n};\n\nconsole.log(Object.getOwnPropertySymbols(o));\n// [Symbol(k1), Symbol(k2)]\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[o("p",[o("strong",[e._v("属性枚举顺序")])]),e._v(" "),o("p",[o("code",[e._v("for-in")]),e._v("循环、"),o("code",[e._v("Object.keys()")]),e._v("、"),o("code",[e._v("Object.getOwnPropertyNames()")]),e._v("、"),o("code",[e._v("Object.getOwnPropertySymbols()")]),e._v("以及"),o("code",[e._v("Object.assign()")]),e._v("在属性枚举顺序方面有很大区别。"),o("code",[e._v("for-in")]),e._v("循环和"),o("code",[e._v("Object.keys()")]),e._v("的枚举顺序是不确定的，取决于 JavaScript 引擎，可能因浏览器而异。")]),e._v(" "),o("p",[o("code",[e._v("Object.getOwnPropertyNames()")]),e._v("、"),o("code",[e._v("Object.getOwnPropertySymbols()")]),e._v("和"),o("code",[e._v("Object.assign()")]),e._v("的枚举顺序是确定性的。先以升序枚举数值键，然后以插入顺序枚举字符串和符号键。在对象字面量中定义的键以它们逗号分隔的顺序插入。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let k1 = Symbol('k1'),\n    k2 = Symbol('k2');\n\nlet o = {\n  1: 1,\n  first: 'first',\n  [k1]: 'sym2',\n  second: 'second',\n  0: 0\n};\n\no[k2] = 'sym2';\no[3] = 3;\no.third = 'third';\no[2] = 2;\n\nconsole.log(Object.getOwnPropertyNames(o));\n// [\"0\", \"1\", \"2\", \"3\", \"first\", \"second\", \"third\"]\n\nconsole.log(Object.getOwnPropertySymbols(o));\n// [Symbol(k1), Symbol(k2)]\n")])])])])]),e._v(" "),o("h3",{attrs:{id:"_8-2-5-对象迭代"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-5-对象迭代"}},[e._v("#")]),e._v(" 8.2.5 　对象迭代")]),e._v(" "),o("p",[e._v("在 JavaScript 有史以来的大部分时间内，迭代对象属性都是一个难题。ECMAScript 2017 新增了两个静态方法，用于将对象内容转换为序列化的——更重要的是可迭代的——格式。这两个静态方法"),o("code",[e._v("Object.values()")]),e._v("和"),o("code",[e._v("Object.entries()")]),e._v("接收一个对象，返回它们内容的数组。"),o("code",[e._v("Object.values()")]),e._v("返回对象值的数组，"),o("code",[e._v("Object.entries()")]),e._v("返回键/值对的数组。")]),e._v(" "),o("p",[e._v("下面的示例展示了这两个方法：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('const o = {\n  foo: \'bar\',\n  baz: 1,\n  qux: {}\n};\n\nconsole.log(Object.values(o));\n// ["bar", 1, {}]\n\nconsole.log(Object.entries((o)));\n// [["foo", "bar"], ["baz", 1], ["qux", {}]]\n')])])]),o("p",[e._v("注意，非字符串属性会被转换为字符串输出。另外，这两个方法执行对象的浅复制：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const o = {\n  qux: {}\n};\n\nconsole.log(Object.values(o)[0] === o.qux);\n// true\n\nconsole.log(Object.entries(o)[0][1] === o.qux);\n// true\n")])])]),o("p",[e._v("符号属性会被忽略：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const sym = Symbol();\nconst o = {\n  [sym]: 'foo'\n};\n\nconsole.log(Object.values(o));\n// []\n\nconsole.log(Object.entries((o)));\n// []\n")])])]),o("ol",[o("li",[o("p",[o("strong",[e._v("其他原型语法")])]),e._v(" "),o("p",[e._v("有读者可能注意到了，在前面的例子中，每次定义一个属性或方法都会把"),o("code",[e._v("Person.prototype")]),e._v("重写一遍。为了减少代码冗余，也为了从视觉上更好地封装原型功能，直接通过一个包含所有属性和方法的对象字面量来重写原型成为了一种常见的做法，如下面的例子所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype = {\n  name: "Nicholas",\n  age: 29,\n  job: "Software Engineer",\n  sayName() {\n    console.log(this.name);\n  }\n};\n')])])]),o("p",[e._v("在这个例子中，"),o("code",[e._v("Person.prototype")]),e._v("被设置为等于一个通过对象字面量创建的新对象。最终结果是一样的，只有一个问题：这样重写之后，"),o("code",[e._v("Person.prototype")]),e._v("的"),o("code",[e._v("constructor")]),e._v("属性就不指向"),o("code",[e._v("Person")]),e._v("了。在创建函数时，也会创建它的"),o("code",[e._v("prototype")]),e._v("对象，同时会自动给这个原型的"),o("code",[e._v("constructor")]),e._v("属性赋值。而上面的写法完全重写了默认的"),o("code",[e._v("prototype")]),e._v("对象，因此其"),o("code",[e._v("constructor")]),e._v("属性也指向了完全不同的新对象（"),o("code",[e._v("Object")]),e._v("构造函数），不再指向原来的构造函数。虽然"),o("code",[e._v("instanceof")]),e._v("操作符还能可靠地返回值，但我们不能再依靠"),o("code",[e._v("constructor")]),e._v("属性来识别类型了，如下面的例子所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let friend = new Person();\n\nconsole.log(friend instanceof Object);      // true\nconsole.log(friend instanceof Person);      // true\nconsole.log(friend.constructor == Person);  // false\nconsole.log(friend.constructor == Object);  // true\n")])])]),o("p",[e._v("这里，"),o("code",[e._v("instanceof")]),e._v("仍然对"),o("code",[e._v("Object")]),e._v("和"),o("code",[e._v("Person")]),e._v("都返回"),o("code",[e._v("true")]),e._v("。但"),o("code",[e._v("constructor")]),e._v("属性现在等于"),o("code",[e._v("Object")]),e._v("而不是"),o("code",[e._v("Person")]),e._v("了。如果"),o("code",[e._v("constructor")]),e._v("的值很重要，则可以像下面这样在重写原型对象时专门设置一下它的值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {\n}\n\nPerson.prototype = {\n  constructor: Person,\n  name: "Nicholas",\n  age: 29,\n  job: "Software Engineer",\n  sayName() {\n    console.log(this.name);\n  }\n};\n')])])]),o("p",[e._v("这次的代码中特意包含了"),o("code",[e._v("constructor")]),e._v("属性，并将它设置为"),o("code",[e._v("Person")]),e._v("，保证了这个属性仍然包含恰当的值。")]),e._v(" "),o("p",[e._v("但要注意，以这种方式恢复"),o("code",[e._v("constructor")]),e._v("属性会创建一个"),o("code",[e._v("[[Enumberable]]")]),e._v("为"),o("code",[e._v("true")]),e._v("的属性。而原生"),o("code",[e._v("constructor")]),e._v("属性默认是不可枚举的。因此，如果你使用的是兼容 ECMAScript 的 JavaScript 引擎，那可能会改为使用"),o("code",[e._v("Object.defineProperty()")]),e._v("方法来定义"),o("code",[e._v("constructor")]),e._v("属性：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype = {\n  name: "Nicholas",\n  age: 29,\n  job: "Software Engineer",\n  sayName() {\n    console.log(this.name);\n  }\n};\n\n// 恢复constructor属性\nObject.defineProperty(Person.prototype, "constructor", {\n  enumerable: false,\n  value: Person\n});\n')])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("原型的动态性")])]),e._v(" "),o("p",[e._v("因为从原型上搜索值的过程是动态的，所以即使实例在修改原型之前已经存在，任何时候对原型对象所做的修改也会在实例上反映出来。下面是一个例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let friend = new Person();\n\nPerson.prototype.sayHi = function() {\n  console.log("hi");\n};\n\nfriend.sayHi();   // "hi"，没问题！\n')])])]),o("p",[e._v("以上代码先创建一个"),o("code",[e._v("Person")]),e._v("实例并保存在"),o("code",[e._v("friend")]),e._v("中。然后一条语句在"),o("code",[e._v("Person.prototype")]),e._v("上添加了一个名为"),o("code",[e._v("sayHi()")]),e._v("的方法。虽然"),o("code",[e._v("friend")]),e._v("实例是在添加方法之前创建的，但它仍然可以访问这个方法。之所以会这样，主要原因是实例与原型之间松散的联系。在调用"),o("code",[e._v("friend.sayHi()")]),e._v("时，首先会从这个实例中搜索名为"),o("code",[e._v("sayHi")]),e._v("的属性。在没有找到的情况下，运行时会继续搜索原型对象。因为实例和原型之间的链接就是简单的指针，而不是保存的副本，所以会在原型上找到"),o("code",[e._v("sayHi")]),e._v("属性并返回这个属性保存的函数。")]),e._v(" "),o("p",[e._v("虽然随时能给原型添加属性和方法，并能够立即反映在所有对象实例上，但这跟重写整个原型是两回事。实例的"),o("code",[e._v("[[Prototype]]")]),e._v("指针是在调用构造函数时自动赋值的，这个指针即使把原型修改为不同的对象也不会变。重写整个原型会切断最初原型与构造函数的联系，但实例引用的仍然是最初的原型。记住，实例只有指向原型的指针，没有指向构造函数的指针。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nlet friend = new Person();\nPerson.prototype = {\n  constructor: Person,\n  name: "Nicholas",\n  age: 29,\n  job: "Software Engineer",\n  sayName() {\n    console.log(this.name);\n  }\n};\n\nfriend.sayName();  // 错误\n')])])]),o("p",[e._v("在这个例子中，"),o("code",[e._v("Person")]),e._v("的新实例是在重写原型对象之前创建的。在调用"),o("code",[e._v("friend.sayName()")]),e._v("的时候，会导致错误。这是因为"),o("code",[e._v("firend")]),e._v("指向的原型还是最初的原型，而这个原型上并没有"),o("code",[e._v("sayName")]),e._v("属性。图 8-3 展示了这里面的原因。")]),e._v(" "),o("p",[o("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/012.png",alt:"img"}})]),e._v(" "),o("p",[o("strong",[e._v("图　 8-3")])]),e._v(" "),o("p",[e._v("重写构造函数上的原型之后再创建的实例才会引用新的原型。而在此之前创建的实例仍然会引用最初的原型。")])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("原生对象原型")])]),e._v(" "),o("p",[e._v("原型模式之所以重要，不仅体现在自定义类型上，而且还因为它也是实现所有原生引用类型的模式。所有原生引用类型的构造函数（包括"),o("code",[e._v("Object")]),e._v("、"),o("code",[e._v("Array")]),e._v("、"),o("code",[e._v("String")]),e._v("等）都在原型上定义了实例方法。比如，数组实例的"),o("code",[e._v("sort()")]),e._v("方法就是"),o("code",[e._v("Array.prototype")]),e._v("上定义的，而字符串包装对象的"),o("code",[e._v("substring()")]),e._v("方法也是在"),o("code",[e._v("String.prototype")]),e._v("上定义的，如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('console.log(typeof Array.prototype.sort);       // "function"\nconsole.log(typeof String.prototype.substring); // "function"\n')])])]),o("p",[e._v("通过原生对象的原型可以取得所有默认方法的引用，也可以给原生类型的实例定义新的方法。可以像修改自定义对象原型一样修改原生对象原型，因此随时可以添加方法。比如，下面的代码就给"),o("code",[e._v("String")]),e._v("原始值包装类型的实例添加了一个"),o("code",[e._v("startsWith()")]),e._v("方法：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('String.prototype.startsWith = function (text) {\n  return this.indexOf(text) === 0;\n};\n\nlet msg = "Hello world!";\nconsole.log(msg.startsWith("Hello"));  // true\n')])])]),o("p",[e._v("如果给定字符串的开头出现了调用"),o("code",[e._v("startsWith()")]),e._v("方法的文本，那么该方法会返回"),o("code",[e._v("true")]),e._v("。因为这个方法是被定义在"),o("code",[e._v("String.prototype")]),e._v("上，所以当前环境下所有的字符串都可以使用这个方法。"),o("code",[e._v("msg")]),e._v("是个字符串，在读取它的属性时，后台会自动创建"),o("code",[e._v("String")]),e._v("的包装实例，从而找到并调用"),o("code",[e._v("startsWith()")]),e._v("方法。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　尽管可以这么做，但并不推荐在产品环境中修改原生对象原型。这样做很可能造成误会，而且可能引发命名冲突（比如一个名称在某个浏览器实现中不存在，在另一个实现中却存在）。另外还有可能意外重写原生的方法。推荐的做法是创建一个自定义的类，继承原生类型。")])])])]),e._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[o("p",[o("strong",[e._v("原型的问题")])]),e._v(" "),o("p",[e._v("原型模式也不是没有问题。首先，它弱化了向构造函数传递初始化参数的能力，会导致所有实例默认都取得相同的属性值。虽然这会带来不便，但还不是原型的最大问题。原型的最主要问题源自它的共享特性。")]),e._v(" "),o("p",[e._v("我们知道，原型上的所有属性是在实例间共享的，这对函数来说比较合适。另外包含原始值的属性也还好，如前面例子中所示，可以通过在实例上添加同名属性来简单地遮蔽原型上的属性。真正的问题来自包含引用值的属性。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function Person() {}\n\nPerson.prototype = {\n  constructor: Person,\n  name: "Nicholas",\n  age: 29,\n  job: "Software Engineer",\n  friends: ["Shelby", "Court"],\n  sayName() {\n    console.log(this.name);\n  }\n};\n\nlet person1 = new Person();\nlet person2 = new Person();\n\nperson1.friends.push("Van");\n\nconsole.log(person1.friends);  // "Shelby,Court,Van"\nconsole.log(person2.friends);  // "Shelby,Court,Van"\nconsole.log(person1.friends === person2.friends);  // true\n')])])]),o("p",[e._v("这里，"),o("code",[e._v("Person.prototype")]),e._v("有一个名为"),o("code",[e._v("friends")]),e._v("的属性，它包含一个字符串数组。然后这里创建了两个"),o("code",[e._v("Person")]),e._v("的实例。"),o("code",[e._v("person1.friends")]),e._v("通过"),o("code",[e._v("push")]),e._v("方法向数组中添加了一个字符串。由于这个"),o("code",[e._v("friends")]),e._v("属性存在于"),o("code",[e._v("Person.prototype")]),e._v("而非"),o("code",[e._v("person1")]),e._v("上，新加的这个字符串也会在（指向同一个数组的）"),o("code",[e._v("person2.friends")]),e._v("上反映出来。如果这是有意在多个实例间共享数组，那没什么问题。但一般来说，不同的实例应该有属于自己的属性副本。这就是实际开发中通常不单独使用原型模式的原因。")])])]),e._v(" "),o("h2",{attrs:{id:"_8-3-继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-继承"}},[e._v("#")]),e._v(" 8.3 　继承")]),e._v(" "),o("p",[e._v("继承是面向对象编程中讨论最多的话题。很多面向对象语言都支持两种继承：接口继承和实现继承。前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，因为函数没有签名。实现继承是 ECMAScript 唯一支持的继承方式，而这主要是通过原型链实现的。")]),e._v(" "),o("h3",{attrs:{id:"_8-3-1-原型链"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-1-原型链"}},[e._v("#")]),e._v(" 8.3.1 　原型链")]),e._v(" "),o("p",[e._v("ECMA-262 把"),o("strong",[e._v("原型链")]),e._v("定义为 ECMAScript 的主要继承方式。其基本思想就是通过原型继承多个引用类型的属性和方法。重温一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想。")]),e._v(" "),o("p",[e._v("实现原型链涉及如下代码模式：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function SuperType() {\n  this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n  return this.property;\n};\n\nfunction SubType() {\n  this.subproperty = false;\n}\n\n// 继承SuperType\nSubType.prototype = new SuperType();\n\nSubType.prototype.getSubValue = function () {\n  return this.subproperty;\n};\n\nlet instance = new SubType();\nconsole.log(instance.getSuperValue()); // true\n")])])]),o("p",[e._v("以上代码定义了两个类型："),o("code",[e._v("SuperType")]),e._v("和"),o("code",[e._v("SubType")]),e._v("。这两个类型分别定义了一个属性和一个方法。这两个类型的主要区别是"),o("code",[e._v("SubType")]),e._v("通过创建"),o("code",[e._v("SuperType")]),e._v("的实例并将其赋值给自己的原型"),o("code",[e._v("SubTtype.prototype")]),e._v("实现了对"),o("code",[e._v("SuperType")]),e._v("的继承。这个赋值重写了"),o("code",[e._v("SubType")]),e._v("最初的原型，将其替换为"),o("code",[e._v("SuperType")]),e._v("的实例。这意味着"),o("code",[e._v("SuperType")]),e._v("实例可以访问的所有属性和方法也会存在于"),o("code",[e._v("SubType.prototype")]),e._v("。这样实现继承之后，代码紧接着又给"),o("code",[e._v("SubType.prototype")]),e._v("，也就是这个"),o("code",[e._v("SuperType")]),e._v("的实例添加了一个新方法。最后又创建了"),o("code",[e._v("SubType")]),e._v("的实例并调用了它继承的"),o("code",[e._v("getSuperValue()")]),e._v("方法。图 8-4 展示了子类的实例与两个构造函数及其对应的原型之间的关系。")]),e._v(" "),o("p",[o("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/013.png",alt:"img"}})]),e._v(" "),o("p",[o("strong",[e._v("图　 8-4")])]),e._v(" "),o("p",[e._v("这个例子中实现继承的关键，是"),o("code",[e._v("SubType")]),e._v("没有使用默认原型，而是将其替换成了一个新的对象。这个新的对象恰好是"),o("code",[e._v("SuperType")]),e._v("的实例。这样一来，"),o("code",[e._v("SubType")]),e._v("的实例不仅能从"),o("code",[e._v("SuperType")]),e._v("的实例中继承属性和方法，而且还与"),o("code",[e._v("SuperType")]),e._v("的原型挂上了钩。于是"),o("code",[e._v("instance")]),e._v("（通过内部的"),o("code",[e._v("[[Prototype]]")]),e._v("）指向"),o("code",[e._v("SubType.prototype")]),e._v("，而"),o("code",[e._v("SubType.prototype")]),e._v("（作为"),o("code",[e._v("SuperType")]),e._v("的实例又通过内部的"),o("code",[e._v("[[Prototype]]")]),e._v("）指向"),o("code",[e._v("SuperType.prototype")]),e._v("。注意，"),o("code",[e._v("getSuperValue()")]),e._v("方法还在"),o("code",[e._v("SuperType.prototype")]),e._v("对象上，而"),o("code",[e._v("property")]),e._v("属性则在"),o("code",[e._v("SubType.prototype")]),e._v("上。这是因为"),o("code",[e._v("getSuperValue()")]),e._v("是一个原型方法，而"),o("code",[e._v("property")]),e._v("是一个实例属性。"),o("code",[e._v("SubType.prototype")]),e._v("现在是"),o("code",[e._v("SuperType")]),e._v("的一个实例，因此"),o("code",[e._v("property")]),e._v("才会存储在它上面。还要注意，由于"),o("code",[e._v("SubType.prototype")]),e._v("的"),o("code",[e._v("constructor")]),e._v("属性被重写为指向"),o("code",[e._v("SuperType")]),e._v("，所以"),o("code",[e._v("instance.constructor")]),e._v("也指向"),o("code",[e._v("SuperType")]),e._v("。")]),e._v(" "),o("p",[e._v("原型链扩展了前面描述的原型搜索机制。我们知道，在读取实例上的属性时，首先会在实例上搜索这个属性。如果没找到，则会继承搜索实例的原型。在通过原型链实现继承之后，搜索就可以继承向上，搜索原型的原型。对前面的例子而言，调用"),o("code",[e._v("instance.getSuperValue()")]),e._v("经过了 3 步搜索："),o("code",[e._v("instance")]),e._v("、"),o("code",[e._v("SubType.prototype")]),e._v("和"),o("code",[e._v("SuperType.prototype")]),e._v("，最后一步才找到这个方法。对属性和方法的搜索会一直持续到原型链的末端。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("默认原型")])]),e._v(" "),o("p",[e._v("实际上，原型链中还有一环。默认情况下，所有引用类型都继承自"),o("code",[e._v("Object")]),e._v("，这也是通过原型链实现的。任何函数的默认原型都是一个"),o("code",[e._v("Object")]),e._v("的实例，这意味着这个实例有一个内部指针指向"),o("code",[e._v("Object.prototype")]),e._v("。这也是为什么自定义类型能够继承包括"),o("code",[e._v("toString()")]),e._v("、"),o("code",[e._v("valueOf()")]),e._v("在内的所有默认方法的原因。因此前面的例子还有额外一层继承关系。图 8-5 展示了完整的原型链。")]),e._v(" "),o("p",[o("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/014.png",alt:"img"}})]),e._v(" "),o("p",[o("strong",[e._v("图　 8-5")])]),e._v(" "),o("p",[o("code",[e._v("SubType")]),e._v("继承"),o("code",[e._v("SuperType")]),e._v("，而"),o("code",[e._v("SuperType")]),e._v("继承"),o("code",[e._v("Object")]),e._v("。在调用"),o("code",[e._v("instance.toString()")]),e._v("时，实际上调用的是保存在"),o("code",[e._v("Object.prototype")]),e._v("上的方法。")])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("原型与继承关系")])]),e._v(" "),o("p",[e._v("原型与实例的关系可以通过两种方式来确定。第一种方式是使用"),o("code",[e._v("instanceof")]),e._v("操作符，如果一个实例的原型链中出现过相应的构造函数，则"),o("code",[e._v("instanceof")]),e._v("返回"),o("code",[e._v("true")]),e._v("。如下例所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("console.log(instance instanceof Object);     // true\nconsole.log(instance instanceof SuperType);  // true\nconsole.log(instance instanceof SubType);    // true\n")])])]),o("p",[e._v("从技术上讲，"),o("code",[e._v("instance")]),e._v("是"),o("code",[e._v("Object")]),e._v("、"),o("code",[e._v("SuperType")]),e._v("和"),o("code",[e._v("SubType")]),e._v("的实例，因为"),o("code",[e._v("instance")]),e._v("的原型链中包含这些构造函数的原型。结果就是"),o("code",[e._v("instanceof")]),e._v("对所有这些构造函数都返回"),o("code",[e._v("true")]),e._v("。")]),e._v(" "),o("p",[e._v("确定这种关系的第二种方式是使用"),o("code",[e._v("isPrototypeOf()")]),e._v("方法。原型链中的每个原型都可以调用这个方法，如下例所示，只要原型链中包含这个原型，这个方法就返回"),o("code",[e._v("true")]),e._v("：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("console.log(Object.prototype.isPrototypeOf(instance));     // true\nconsole.log(SuperType.prototype.isPrototypeOf(instance));  // true\nconsole.log(SubType.prototype.isPrototypeOf(instance));    // true\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("关于方法")])]),e._v(" "),o("p",[e._v("子类有时候需要覆盖父类的方法，或者增加父类没有的方法。为此，这些方法必须在原型赋值之后再添加到原型上。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function SuperType() {\n  this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n  return this.property;\n};\n\nfunction SubType() {\n  this.subproperty = false;\n}\n\n// 继承SuperType\nSubType.prototype = new SuperType();\n\n// 新方法\nSubType.prototype.getSubValue = function () {\n  return this.subproperty;\n};\n\n// 覆盖已有的方法\nSubType.prototype.getSuperValue = function () {\n  return false;\n};\n\nlet instance = new SubType();\nconsole.log(instance.getSuperValue()); // false\n")])])]),o("p",[e._v("在上面的代码中，加粗的部分涉及两个方法。第一个方法"),o("code",[e._v("getSubValue()")]),e._v("是"),o("code",[e._v("SubType")]),e._v("的新方法，而第二个方法"),o("code",[e._v("getSuperValue()")]),e._v("是原型链上已经存在但在这里被遮蔽的方法。后面在"),o("code",[e._v("SubType")]),e._v("实例上调用"),o("code",[e._v("getSuperValue()")]),e._v("时调用的是这个方法。而"),o("code",[e._v("SuperType")]),e._v("的实例仍然会调用最初的方法。重点在于上述两个方法都是在把原型赋值为"),o("code",[e._v("SuperType")]),e._v("的实例之后定义的。")]),e._v(" "),o("p",[e._v("另一个要理解的重点是，以对象字面量方式创建原型方法会破坏之前的原型链，因为这相当于重写了原型链。下面是一个例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function SuperType() {\n  this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n  return this.property;\n};\n\nfunction SubType() {\n  this.subproperty = false;\n}\n\n// 继承SuperType\nSubType.prototype = new SuperType();\n\n// 通过对象字面量添加新方法，这会导致上一行无效\nSubType.prototype = {\n  getSubValue() {\n    return this.subproperty;\n  },\n\n  someOtherMethod() {\n    return false;\n  }\n};\n\nlet instance = new SubType();\nconsole.log(instance.getSuperValue()); // 出错！\n")])])]),o("p",[e._v("在这段代码中，子类的原型在被赋值为"),o("code",[e._v("SuperType")]),e._v("的实例后，又被一个对象字面量覆盖了。覆盖后的原型是一个"),o("code",[e._v("Object")]),e._v("的实例，而不再是"),o("code",[e._v("SuperType")]),e._v("的实例。因此之前的原型链就断了。"),o("code",[e._v("SubType")]),e._v("和"),o("code",[e._v("SuperType")]),e._v("之间也没有关系了。")])])]),e._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[o("p",[o("strong",[e._v("原型链的问题")])]),e._v(" "),o("p",[e._v("原型链虽然是实现继承的强大工具，但它也有问题。主要问题出现在原型中包含引用值的时候。前面在谈到原型的问题时也提到过，原型中包含的引用值会在所有实例间共享，这也是为什么属性通常会在构造函数中定义而不会定义在原型上的原因。在使用原型实现继承时，原型实际上变成了另一个类型的实例。这意味着原先的实例属性摇身一变成为了原型属性。下面的例子揭示了这个问题：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function SuperType() {\n  this.colors = ["red", "blue", "green"];\n}\n\nfunction SubType() {}\n\n// 继承SuperType\nSubType.prototype = new SuperType();\n\nlet instance1 = new SubType();\ninstance1.colors.push("black");\nconsole.log(instance1.colors); // "red,blue,green,black"\n\nlet instance2 = new SubType();\nconsole.log(instance2.colors); // "red,blue,green,black"\n')])])]),o("p",[e._v("在这个例子中，"),o("code",[e._v("SuperType")]),e._v("构造函数定义了一个"),o("code",[e._v("colors")]),e._v("属性，其中包含一个数组（引用值）。每个"),o("code",[e._v("SuperType")]),e._v("的实例都会有自己的"),o("code",[e._v("colors")]),e._v("属性，包含自己的数组。但是，当"),o("code",[e._v("SubType")]),e._v("通过原型继承"),o("code",[e._v("SuperType")]),e._v("后，"),o("code",[e._v("SubType.prototype")]),e._v("变成了"),o("code",[e._v("SuperType")]),e._v("的一个实例，因而也获得了自己的"),o("code",[e._v("colors")]),e._v("属性。这类似于创建了"),o("code",[e._v("SubType.prototype.colors")]),e._v("属性。最终结果是，"),o("code",[e._v("SubType")]),e._v("的所有实例都会共享这个"),o("code",[e._v("colors")]),e._v("属性。这一点通过"),o("code",[e._v("instance1.colors")]),e._v("上的修改也能反映到"),o("code",[e._v("instance2.colors")]),e._v("上就可以看出来。")]),e._v(" "),o("p",[e._v("原型链的第二个问题是，子类型在实例化时不能给父类型的构造函数传参。事实上，我们无法在不影响所有对象实例的情况下把参数传进父类的构造函数。再加上之前提到的原型中包含引用值的问题，就导致原型链基本不会被单独使用。")])])]),e._v(" "),o("h3",{attrs:{id:"_8-3-2-盗用构造函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-2-盗用构造函数"}},[e._v("#")]),e._v(" 8.3.2 　盗用构造函数")]),e._v(" "),o("p",[e._v("为了解决原型包含引用值导致的继承问题，一种叫作“盗用构造函数”（constructor stealing）的技术在开发社区流行起来（这种技术有时也称作“对象伪装”或“经典继承”）。基本思路很简单：在子类构造函数中调用父类构造函数。因为毕竟函数就是在特定上下文中执行代码的简单对象，所以可以使用"),o("code",[e._v("apply()")]),e._v("和"),o("code",[e._v("call()")]),e._v("方法以新创建的对象为上下文执行构造函数。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function SuperType() {\n  this.colors = ["red", "blue", "green"];\n}\n\nfunction SubType() {\n  // 继承SuperType\n  SuperType.call(this);\n}\n\nlet instance1 = new SubType();\ninstance1.colors.push("black");\nconsole.log(instance1.colors); // "red,blue,green,black"\n\nlet instance2 = new SubType();\nconsole.log(instance2.colors); // "red,blue,green"\n')])])]),o("p",[e._v("示例中加粗的代码展示了盗用构造函数的调用。通过使用"),o("code",[e._v("call()")]),e._v("（或"),o("code",[e._v("apply()")]),e._v("）方法，"),o("code",[e._v("SuperType")]),e._v("构造函数在为"),o("code",[e._v("SubType")]),e._v("的实例创建的新对象的上下文中执行了。这相当于新的"),o("code",[e._v("SubType")]),e._v("对象上运行了"),o("code",[e._v("SuperType()")]),e._v("函数中的所有初始化代码。结果就是每个实例都会有自己的"),o("code",[e._v("colors")]),e._v("属性。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("传递参数")])]),e._v(" "),o("p",[e._v("相比于使用原型链，盗用构造函数的一个优点就是可以在子类构造函数中向父类构造函数传参。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function SuperType(name){\n  this.name = name;\n}\n\nfunction SubType() {\n  // 继承SuperType并传参\n  SuperType.call(this, "Nicholas");\n\n  // 实例属性\n  this.age = 29;\n}\n\nlet instance = new SubType();\nconsole.log(instance.name); // "Nicholas";\nconsole.log(instance.age);  // 29\n')])])]),o("p",[e._v("在这个例子中，"),o("code",[e._v("SuperType")]),e._v("构造函数接收一个参数"),o("code",[e._v("name")]),e._v("，然后将它赋值给一个属性。在"),o("code",[e._v("SubType")]),e._v("构造函数中调用"),o("code",[e._v("SuperType")]),e._v("构造函数时传入这个参数，实际上会在"),o("code",[e._v("SubType")]),e._v("的实例上定义"),o("code",[e._v("name")]),e._v("属性。为确保"),o("code",[e._v("SuperType")]),e._v("构造函数不会覆盖"),o("code",[e._v("SubType")]),e._v("定义的属性，可以在调用父类构造函数之后再给子类实例添加额外的属性。")])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("盗用构造函数的问题")])]),e._v(" "),o("p",[e._v("盗用构造函数的主要缺点，也是使用构造函数模式自定义类型的问题：必须在构造函数中定义方法，因此函数不能重用。此外，子类也不能访问父类原型上定义的方法，因此所有类型只能使用构造函数模式。由于存在这些问题，盗用构造函数基本上也不能单独使用。")])])]),e._v(" "),o("h3",{attrs:{id:"_8-3-3-组合继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-3-组合继承"}},[e._v("#")]),e._v(" 8.3.3 　组合继承")]),e._v(" "),o("p",[o("strong",[e._v("组合继承")]),e._v("（有时候也叫伪经典继承）综合了原型链和盗用构造函数，将两者的优点集中了起来。基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function SuperType(name){\n  this.name = name;\n  this.colors = ["red", "blue", "green"];\n}\n\nSuperType.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nfunction SubType(name, age){\n  // 继承属性\n  SuperType.call(this, name);\n\n  this.age = age;\n}\n\n// 继承方法\nSubType.prototype = new SuperType();\n\nSubType.prototype.sayAge = function() {\n  console.log(this.age);\n};\n\nlet instance1 = new SubType("Nicholas", 29);\ninstance1.colors.push("black");\nconsole.log(instance1.colors);  // "red,blue,green,black"\ninstance1.sayName();            // "Nicholas";\ninstance1.sayAge();             // 29\n\nlet instance2 = new SubType("Greg", 27);\nconsole.log(instance2.colors);  // "red,blue,green"\ninstance2.sayName();            // "Greg";\ninstance2.sayAge();             // 27\n')])])]),o("p",[e._v("在这个例子中，"),o("code",[e._v("SuperType")]),e._v("构造函数定义了两个属性，"),o("code",[e._v("name")]),e._v("和"),o("code",[e._v("colors")]),e._v("，而它的原型上也定义了一个方法叫"),o("code",[e._v("sayName()")]),e._v("。"),o("code",[e._v("SubType")]),e._v("构造函数调用了"),o("code",[e._v("SuperType")]),e._v("构造函数，传入了"),o("code",[e._v("name")]),e._v("参数，然后又定义了自己的属性"),o("code",[e._v("age")]),e._v("。此外，"),o("code",[e._v("SubType.prototype")]),e._v("也被赋值为"),o("code",[e._v("SuperType")]),e._v("的实例。原型赋值之后，又在这个原型上添加了新方法"),o("code",[e._v("sayAge()")]),e._v("。这样，就可以创建两个"),o("code",[e._v("SubType")]),e._v("实例，让这两个实例都有自己的属性，包括"),o("code",[e._v("colors")]),e._v("，同时还共享相同的方法。")]),e._v(" "),o("p",[e._v("组合继承弥补了原型链和盗用构造函数的不足，是 JavaScript 中使用最多的继承模式。而且组合继承也保留了"),o("code",[e._v("instanceof")]),e._v("操作符和"),o("code",[e._v("isPrototypeOf()")]),e._v("方法识别合成对象的能力。")]),e._v(" "),o("h3",{attrs:{id:"_8-3-4-原型式继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-4-原型式继承"}},[e._v("#")]),e._v(" 8.3.4 　原型式继承")]),e._v(" "),o("p",[e._v("2006 年，Douglas Crockford 写了一篇文章：《JavaScript 中的原型式继承》（“Prototypal Inheritance in JavaScript”）。这篇文章介绍了一种不涉及严格意义上构造函数的继承方法。他的出发点是即使不自定义类型也可以通过原型实现对象之间的信息共享。文章最终给出了一个函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\n")])])]),o("p",[e._v("这个"),o("code",[e._v("object()")]),e._v("函数会创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例。本质上，"),o("code",[e._v("object()")]),e._v("是对传入的对象执行了一次浅复制。来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {\n  name: "Nicholas",\n  friends: ["Shelby", "Court", "Van"]\n};\n\nlet anotherPerson = object(person);\nanotherPerson.name = "Greg";\nanotherPerson.friends.push("Rob");\n\nlet yetAnotherPerson = object(person);\nyetAnotherPerson.name = "Linda";\nyetAnotherPerson.friends.push("Barbie");\n\nconsole.log(person.friends);  // "Shelby,Court,Van,Rob,Barbie"\n')])])]),o("p",[e._v("Crockford 推荐的原型式继承适用于这种情况：你有一个对象，想在它的基础上再创建一个新对象。你需要把这个对象先传给"),o("code",[e._v("object()")]),e._v("，然后再对返回的对象进行适当修改。在这个例子中，"),o("code",[e._v("person")]),e._v("对象定义了另一个对象也应该共享的信息，把它传给"),o("code",[e._v("object()")]),e._v("之后会返回一个新对象。这个新对象的原型是"),o("code",[e._v("person")]),e._v("，意味着它的原型上既有原始值属性又有引用值属性。这也意味着"),o("code",[e._v("person.friends")]),e._v("不仅是"),o("code",[e._v("person")]),e._v("的属性，也会跟"),o("code",[e._v("anotherPerson")]),e._v("和"),o("code",[e._v("yetAnotherPerson")]),e._v("共享。这里实际上克隆了两个"),o("code",[e._v("person")]),e._v("。")]),e._v(" "),o("p",[e._v("ECMAScript 5 通过增加"),o("code",[e._v("Object.create()")]),e._v("方法将原型式继承的概念规范化了。这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。在只有一个参数时，"),o("code",[e._v("Object.create()")]),e._v("与这里的"),o("code",[e._v("object()")]),e._v("方法效果相同：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {\n  name: "Nicholas",\n  friends: ["Shelby", "Court", "Van"]\n};\n\nlet anotherPerson = Object.create(person);\nanotherPerson.name = "Greg";\nanotherPerson.friends.push("Rob");\n\nlet yetAnotherPerson = Object.create(person);\nyetAnotherPerson.name = "Linda";\nyetAnotherPerson.friends.push("Barbie");\n\nconsole.log(person.friends);  // "Shelby,Court,Van,Rob,Barbie"\n')])])]),o("p",[o("code",[e._v("Object.create()")]),e._v("的第二个参数与"),o("code",[e._v("Object.defineProperties()")]),e._v("的第二个参数一样：每个新增属性都通过各自的描述符来描述。以这种方式添加的属性会遮蔽原型对象上的同名属性。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {\n  name: "Nicholas",\n  friends: ["Shelby", "Court", "Van"]\n};\n\nlet anotherPerson = Object.create(person, {\n  name: {\n    value: "Greg"\n  }\n});\nconsole.log(anotherPerson.name);  // "Greg"\n')])])]),o("p",[e._v("原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合。但要记住，属性中包含的引用值始终会在相关对象间共享，跟使用原型模式是一样的。")]),e._v(" "),o("h3",{attrs:{id:"_8-3-5-寄生式继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-5-寄生式继承"}},[e._v("#")]),e._v(" 8.3.5 　寄生式继承")]),e._v(" "),o("p",[e._v("与原型式继承比较接近的一种继承方式是"),o("strong",[e._v("寄生式继承")]),e._v("（parasitic inheritance），也是 Crockford 首倡的一种模式。寄生式继承背后的思路类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。基本的寄生继承模式如下：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function createAnother(original){\n  let clone = object(original);  // 通过调用函数创建一个新对象\n  clone.sayHi = function() {     // 以某种方式增强这个对象\n    console.log("hi");\n  };\n  return clone;           // 返回这个对象\n}\n')])])]),o("p",[e._v("在这段代码中，"),o("code",[e._v("createAnother()")]),e._v("函数接收一个参数，就是新对象的基准对象。这个对象"),o("code",[e._v("original")]),e._v("会被传给"),o("code",[e._v("object()")]),e._v("函数，然后将返回的新对象赋值给"),o("code",[e._v("clone")]),e._v("。接着给"),o("code",[e._v("clone")]),e._v("对象添加一个新方法"),o("code",[e._v("sayHi()")]),e._v("。最后返回这个对象。可以像下面这样使用"),o("code",[e._v("createAnother()")]),e._v("函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('let person = {\n  name: "Nicholas",\n  friends: ["Shelby", "Court", "Van"]\n};\n\nlet anotherPerson = createAnother(person);\nanotherPerson.sayHi();  // "hi"\n')])])]),o("p",[e._v("这个例子基于"),o("code",[e._v("person")]),e._v("对象返回了一个新对象。新返回的"),o("code",[e._v("anotherPerson")]),e._v("对象具有"),o("code",[e._v("person")]),e._v("的所有属性和方法，还有一个新方法叫"),o("code",[e._v("sayHi()")]),e._v("。")]),e._v(" "),o("p",[e._v("寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。"),o("code",[e._v("object()")]),e._v("函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似。")])]),e._v(" "),o("h3",{attrs:{id:"_8-3-6-寄生式组合继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-6-寄生式组合继承"}},[e._v("#")]),e._v(" 8.3.6 　寄生式组合继承")]),e._v(" "),o("p",[e._v("组合继承其实也存在效率问题。最主要的效率问题就是父类构造函数始终会被调用两次：一次在是创建子类原型时调用，另一次是在子类构造函数中调用。本质上，子类原型最终是要包含超类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就行了。再来看一看这个组合继承的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function SuperType(name) {\n  this.name = name;\n  this.colors = ["red", "blue", "green"];\n}\n\nSuperType.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nfunction SubType(name, age){\n  SuperType.call(this, name);   // 第二次调用SuperType()\n\n  this.age = age;\n}\n\nSubType.prototype = new SuperType();   // 第一次调用SuperType()\nSubType.prototype.constructor = SubType;\nSubType.prototype.sayAge = function() {\n  console.log(this.age);\n};\n')])])]),o("p",[e._v("代码中加粗的部分是调用"),o("code",[e._v("SuperType")]),e._v("构造函数的地方。在上面的代码执行后，"),o("code",[e._v("SubType.prototype")]),e._v("上会有两个属性："),o("code",[e._v("name")]),e._v("和"),o("code",[e._v("colors")]),e._v("。它们都是"),o("code",[e._v("SuperType")]),e._v("的实例属性，但现在成为了"),o("code",[e._v("SubType")]),e._v("的原型属性。在调用"),o("code",[e._v("SubType")]),e._v("构造函数时，也会调用"),o("code",[e._v("SuperType")]),e._v("构造函数，这一次会在新对象上创建实例属性"),o("code",[e._v("name")]),e._v("和"),o("code",[e._v("colors")]),e._v("。这两个实例属性会遮蔽原型上同名的属性。图 8-6 展示了这个过程。")]),e._v(" "),o("p",[o("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/015.png",alt:"img"}})]),e._v(" "),o("p",[o("strong",[e._v("图　 8-6")])]),e._v(" "),o("p",[e._v("如图 8-6 所示，有两组"),o("code",[e._v("name")]),e._v("和"),o("code",[e._v("colors")]),e._v("属性：一组在实例上，另一组在"),o("code",[e._v("SubType")]),e._v("的原型上。这是调用两次"),o("code",[e._v("SuperType")]),e._v("构造函数的结果。好在有办法解决这个问题。")]),e._v(" "),o("p",[e._v("寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。寄生式组合继承的基本模式如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function inheritPrototype(subType, superType) {\n  let prototype = object(superType.prototype);  // 创建对象\n  prototype.constructor = subType;              // 增强对象\n  subType.prototype = prototype;                // 赋值对象\n}\n")])])]),o("p",[e._v("这个"),o("code",[e._v("inheritPrototype()")]),e._v("函数实现了寄生式组合继承的核心逻辑。这个函数接收两个参数：子类构造函数和父类构造函数。在这个函数内部，第一步是创建父类原型的一个副本。然后，给返回的"),o("code",[e._v("prototype")]),e._v("对象设置"),o("code",[e._v("constructor")]),e._v("属性，解决由于重写原型导致默认"),o("code",[e._v("constructor")]),e._v("丢失的问题。最后将新创建的对象赋值给子类型的原型。如下例所示，调用"),o("code",[e._v("inheritPrototype()")]),e._v("就可以实现前面例子中的子类型原型赋值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('function SuperType(name) {\n  this.name = name;\n  this.colors = ["red", "blue", "green"];\n}\n\nSuperType.prototype.sayName = function() {\n  console.log(this.name);\n};\n\nfunction SubType(name, age) {\n  SuperType.call(this, name);\n\n  this.age = age;\n}\n\ninheritPrototype(SubType, SuperType);\n\nSubType.prototype.sayAge = function() {\n  console.log(this.age);\n};\n')])])]),o("p",[e._v("这里只调用了一次"),o("code",[e._v("SuperType")]),e._v("构造函数，避免了"),o("code",[e._v("SubType.prototype")]),e._v("上不必要也用不到的属性，因此可以说这个例子的效率更高。而且，原型键仍然保持不变，因此"),o("code",[e._v("instanceof")]),e._v("操作符和"),o("code",[e._v("isPrototypeOf()")]),e._v("方法正常有效。寄生式组合继承可以算是引用类型继承的最佳模式。")]),e._v(" "),o("h2",{attrs:{id:"_8-4-类"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-类"}},[e._v("#")]),e._v(" 8.4 　类")]),e._v(" "),o("p",[e._v("前几节深入讲解了如何只使用 ECMAScript 5 的特性来模拟类似于类（class-like）的行为。不难看出，各种策略都有自己的问题，也有相应的妥协。正因为如此，实现继承的代码也显得非常冗长和混乱。")]),e._v(" "),o("p",[e._v("为解决这些问题，ECMAScript 6 新引入的"),o("code",[e._v("class")]),e._v("关键字具有正式定义类的能力。类（class）是 ECMAScript 中新的基础性语法糖结构，因此刚开始接触时可能会不太习惯。虽然 ECMAScript 6 类表面上看起来可以支持正式的面向对象编程，但实际上它背后使用的仍然是原型和构造函数的概念。")]),e._v(" "),o("h3",{attrs:{id:"_8-4-1-类定义"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-1-类定义"}},[e._v("#")]),e._v(" 8.4.1 　类定义")]),e._v(" "),o("p",[e._v("与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用"),o("code",[e._v("class")]),e._v("关键字加大括号：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 类声明\nclass Person {}\n\n// 类表达式\nconst Animal = class {};\n")])])]),o("p",[e._v("与函数表达式类似，类表达式在它们被求值前也不能引用。不过，与函数定义不同的是，虽然函数声明可以提升，但类定义不能：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("console.log(FunctionExpression);   // undefined\nvar FunctionExpression = function() {};\nconsole.log(FunctionExpression);   // function() {}\n\nconsole.log(FunctionDeclaration);  // FunctionDeclaration() {}\nfunction FunctionDeclaration() {}\nconsole.log(FunctionDeclaration);  // FunctionDeclaration() {}\n\nconsole.log(ClassExpression);      // undefined\nvar ClassExpression = class {};\nconsole.log(ClassExpression);      // class {}\n\nconsole.log(ClassDeclaration);     // ReferenceError: ClassDeclaration is not defined\nclass ClassDeclaration {}\nconsole.log(ClassDeclaration);     // class ClassDeclaration {}\n")])])]),o("p",[e._v("另一个跟函数声明不同的地方是，函数受函数作用域限制，而类受块作用域限制：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("{\n  function FunctionDeclaration() {}\n  class ClassDeclaration {}\n}\n\nconsole.log(FunctionDeclaration); // FunctionDeclaration() {}\nconsole.log(ClassDeclaration);    // ReferenceError: ClassDeclaration is not defined\n")])])]),o("p",[o("strong",[e._v("类的构成")])]),e._v(" "),o("p",[e._v("类可以包含构造函数方法、实例方法、获取函数、设置函数和静态类方法，但这些都不是必需的。空的类定义照样有效。默认情况下，类定义中的代码都在严格模式下执行。")]),e._v(" "),o("p",[e._v("与函数构造函数一样，多数编程风格都建议类名的首字母要大写，以区别于通过它创建的实例（比如，通过"),o("code",[e._v("class Foo {}")]),e._v("创建实例"),o("code",[e._v("foo")]),e._v("）：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 空类定义，有效\nclass Foo {}\n\n// 有构造函数的类，有效\nclass Bar {\n  constructor() {}\n}\n\n// 有获取函数的类，有效\nclass Baz {\n  get myBaz() {}\n}\n\n// 有静态方法的类，有效\nclass Qux {\n  static myQux() {}\n}\n")])])]),o("p",[e._v("类表达式的名称是可选的。在把类表达式赋值给变量后，可以通过"),o("code",[e._v("name")]),e._v("属性取得类表达式的名称字符串。但不能在类表达式作用域外部访问这个标识符。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let Person = class PersonName {\n  identify() {\n    console.log(Person.name, PersonName.name);\n  }\n}\n\nlet p = new Person();\n\np.identify();               // PersonName PersonName\n\nconsole.log(Person.name);   // PersonName\nconsole.log(PersonName);    // ReferenceError: PersonName is not defined\n")])])]),o("h3",{attrs:{id:"_8-4-2-类构造函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-2-类构造函数"}},[e._v("#")]),e._v(" 8.4.2 　类构造函数")]),e._v(" "),o("p",[o("code",[e._v("constructor")]),e._v("关键字用于在类定义块内部创建类的构造函数。方法名"),o("code",[e._v("constructor")]),e._v("会告诉解释器在使用"),o("code",[e._v("new")]),e._v("操作符创建类的新实例时，应该调用这个函数。构造函数的定义不是必需的，不定义构造函数相当于将构造函数定义为空函数。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("实例化")])]),e._v(" "),o("p",[e._v("使用"),o("code",[e._v("new")]),e._v("操作符实例化"),o("code",[e._v("Person")]),e._v("的操作等于使用"),o("code",[e._v("new")]),e._v("调用其构造函数。唯一可感知的不同之处就是，JavaScript 解释器知道使用"),o("code",[e._v("new")]),e._v("和类意味着应该使用"),o("code",[e._v("constructor")]),e._v("函数进行实例化。")]),e._v(" "),o("p",[e._v("使用 new 调用类的构造函数会执行如下操作。")]),e._v(" "),o("p",[e._v("(1) 在内存中创建一个新对象。")]),e._v(" "),o("p",[e._v("(2) 这个新对象内部的"),o("code",[e._v("[[Prototype]]")]),e._v("指针被赋值为构造函数的"),o("code",[e._v("prototype")]),e._v("属性。")]),e._v(" "),o("p",[e._v("(3) 构造函数内部的"),o("code",[e._v("this")]),e._v("被赋值为这个新对象（即"),o("code",[e._v("this")]),e._v("指向新对象）。")]),e._v(" "),o("p",[e._v("(4) 执行构造函数内部的代码（给新对象添加属性）。")]),e._v(" "),o("p",[e._v("(5) 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。")]),e._v(" "),o("p",[e._v("来看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Animal {}\n\nclass Person {\n  constructor() {\n    console.log('person ctor');\n  }\n}\n\nclass Vegetable {\n  constructor() {\n    this.color = 'orange';\n  }\n}\n\nlet a = new Animal();\n\nlet p = new Person();  // person ctor\n\nlet v = new Vegetable();\nconsole.log(v.color);  // orange\n")])])]),o("p",[e._v("类实例化时传入的参数会用作构造函数的参数。如果不需要参数，则类名后面的括号也是可选的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor(name) {\n    console.log(arguments.length);\n    this.name = name || null;\n  }\n}\n\nlet p1 = new Person;          // 0\nconsole.log(p1.name);         // null\n\nlet p2 = new Person();        // 0\nconsole.log(p2.name);         // null\n\nlet p3 = new Person('Jake');  // 1\nconsole.log(p3.name);         // Jake\n")])])]),o("p",[e._v("默认情况下，类构造函数会在执行之后返回"),o("code",[e._v("this")]),e._v("对象。构造函数返回的对象会被用作实例化的对象，如果没有什么引用新创建的"),o("code",[e._v("this")]),e._v("对象，那么这个对象会被销毁。不过，如果返回的不是"),o("code",[e._v("this")]),e._v("对象，而是其他对象，那么这个对象不会通过"),o("code",[e._v("instanceof")]),e._v("操作符检测出跟类有关联，因为这个对象的原型指针并没有被修改。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor(override) {\n    this.foo = 'foo';\n    if (override) {\n      return {\n        bar: 'bar'\n      };\n    }\n  }\n}\n\nlet p1 = new Person(),\n    p2 = new Person(true);\n\nconsole.log(p1);                    // Person{ foo: 'foo' }\nconsole.log(p1 instanceof Person);  // true\n\nconsole.log(p2);                    // { bar: 'bar' }\nconsole.log(p2 instanceof Person);  // false\n")])])]),o("p",[e._v("类构造函数与构造函数的主要区别是，调用类构造函数必须使用"),o("code",[e._v("new")]),e._v("操作符。而普通构造函数如果不使用"),o("code",[e._v("new")]),e._v("调用，那么就会以全局的"),o("code",[e._v("this")]),e._v("（通常是"),o("code",[e._v("window")]),e._v("）作为内部对象。调用类构造函数时如果忘了使用"),o("code",[e._v("new")]),e._v("则会抛出错误：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function Person() {}\n\nclass Animal {}\n\n// 把window作为this来构建实例\nlet p = Person();\n\nlet a = Animal();\n// TypeError: class constructor Animal cannot be invoked without 'new'\n")])])]),o("p",[e._v("类构造函数没有什么特殊之处，实例化之后，它会成为普通的实例方法（但作为类构造函数，仍然要使用"),o("code",[e._v("new")]),e._v("调用）。因此，实例化之后可以在实例上引用它：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {}\n\n// 使用类创建一个新实例\nlet p1 = new Person();\n\np1.constructor();\n// TypeError: Class constructor Person cannot be invoked without 'new'\n\n// 使用对类构造函数的引用创建一个新实例\nlet p2 = new p1.constructor();\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("把类当成特殊函数")])]),e._v(" "),o("p",[e._v("ECMAScript 中没有正式的类这个类型。从各方面来看，ECMAScript 类就是一种特殊函数。声明一个类之后，通过"),o("code",[e._v("typeof")]),e._v("操作符检测类标识符，表明它是一个函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {}\n\nconsole.log(Person);         // class Person {}\nconsole.log(typeof Person);  // function\n")])])]),o("p",[e._v("类标签符有"),o("code",[e._v("prototype")]),e._v("属性，而这个原型也有一个"),o("code",[e._v("constructor")]),e._v("属性指向类自身：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person{}\n\nconsole.log(Person.prototype);                         // { constructor: f() }\nconsole.log(Person === Person.prototype.constructor);  // true\n")])])]),o("p",[e._v("与普通构造函数一样，可以使用"),o("code",[e._v("instanceof")]),e._v("操作符检查构造函数原型是否存在于实例的原型链中：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {}\n\nlet p = new Person();\n\nconsole.log(p instanceof Person); // true\n")])])]),o("p",[e._v("由此可知，可以使用"),o("code",[e._v("instanceof")]),e._v("操作符检查一个对象与类构造函数，以确定这个对象是不是类的实例。只不过此时的类构造函数要使用类标签符，比如，在前面的例子中要检查"),o("code",[e._v("p")]),e._v("和"),o("code",[e._v("Person")]),e._v("。")]),e._v(" "),o("p",[e._v("如前所述，类本身具有与普通构造函数一样的行为。在类的上下文中，类本身在使用"),o("code",[e._v("new")]),e._v("调用时就会被当成构造函数。重点在于，类中定义的"),o("code",[e._v("constructor")]),e._v("方法"),o("strong",[e._v("不会")]),e._v("被当成构造函数，在对它使用"),o("code",[e._v("instanceof")]),e._v("操作符时会返回"),o("code",[e._v("false")]),e._v("。但是，如果在创建实例时直接将类构造函数当成普通构造函数来使用，那么"),o("code",[e._v("instanceof")]),e._v("操作符的返回值会反转：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {}\n\nlet p1 = new Person();\n\nconsole.log(p1.constructor === Person);         // true\nconsole.log(p1 instanceof Person);              // true\nconsole.log(p1 instanceof Person.constructor);  // false\n\nlet p2 = new Person.constructor();\n\nconsole.log(p2.constructor === Person);         // false\nconsole.log(p2 instanceof Person);              // false\nconsole.log(p2 instanceof Person.constructor);  // true\n")])])]),o("p",[e._v("类是 JavaScript 的一等公民，因此可以像其他对象或函数引用一样把类作为参数传递：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 类可以像函数一样在任何地方定义，比如在数组中\nlet classList = [\n  class {\n    constructor(id) {\n      this.id_ = id;\n      console.log('instance ${this.id_}');\n    }\n  }\n];\n\nfunction createInstance(classDefinition, id) {\n  return new classDefinition(id);\n}\n\nlet foo = createInstance(classList[0], 3141);  // instance 3141\n")])])]),o("p",[e._v("与立即调用函数表达式相似，类也可以立即实例化：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 因为是一个类表达式，所以类名是可选的\nlet p = new class Foo {\n  constructor(x) {\n    console.log(x);\n  }\n}('bar');        // bar\n\nconsole.log(p);  // Foo {}\n")])])])])]),e._v(" "),o("h3",{attrs:{id:"_8-4-3-实例、原型和类成员"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-3-实例、原型和类成员"}},[e._v("#")]),e._v(" 8.4.3 　实例、原型和类成员")]),e._v(" "),o("p",[e._v("类的语法可以非常方便地定义应该存在于实例上的成员、应该存在于原型上的成员，以及应该存在于类本身的成员。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("实例成员")])]),e._v(" "),o("p",[e._v("每次通过"),o("code",[e._v("new")]),e._v("调用类标识符时，都会执行类构造函数。在这个函数内部，可以为新创建的实例（"),o("code",[e._v("this")]),e._v("）添加“自有”属性。至于添加什么样的属性，则没有限制。另外，在构造函数执行完毕后，仍然可以给实例继续添加新成员。")]),e._v(" "),o("p",[e._v("每个实例都对应一个唯一的成员对象，这意味着所有成员都不会在原型上共享：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor() {\n    // 这个例子先使用对象包装类型定义一个字符串\n    // 为的是在下面测试两个对象的相等性\n    this.name = new String('Jack');\n\n    this.sayName = () => console.log(this.name);\n\n    this.nicknames = ['Jake', 'J-Dog']\n  }\n}\n\nlet p1 = new Person(),\n    p2 = new Person();\n\np1.sayName(); // Jack\np2.sayName(); // Jack\n\nconsole.log(p1.name === p2.name);            // false\nconsole.log(p1.sayName === p2.sayName);      // false\nconsole.log(p1.nicknames === p2.nicknames);  // false\n\np1.name = p1.nicknames[0];\np2.name = p2.nicknames[1];\n\np1.sayName();  // Jake\np2.sayName();  // J-Dog\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("原型方法与访问器")])]),e._v(" "),o("p",[e._v("为了在实例间共享方法，类定义语法把在类块中定义的方法作为原型方法。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor() {\n    // 添加到this的所有内容都会存在于不同的实例上\n    this.locate = () => console.log('instance');\n  }\n\n  // 在类块中定义的所有内容都会定义在类的原型上\n  locate() {\n    console.log('prototype');\n  }\n}\n\nlet p = new Person();\n\np.locate();                 // instance\nPerson.prototype.locate();  // prototype\n")])])]),o("p",[e._v("可以把方法定义在类构造函数中或者类块中，但不能在类块中给原型添加原始值或对象作为成员数据：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  name: 'Jake'\n}\n// Uncaught SyntaxError: Unexpected token\n")])])]),o("p",[e._v("类方法等同于对象属性，因此可以使用字符串、符号或计算的值作为键：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const symbolKey = Symbol('symbolKey');\n\nclass Person {\n\n  stringKey() {\n    console.log('invoked stringKey');\n  }\n   [symbolKey]() {\n    console.log('invoked symbolKey');\n  }\n   ['computed' + 'Key']() {\n    console.log('invoked computedKey');\n  }\n}\n\nlet p = new Person();\n\np.stringKey();    // invoked stringKey\np[symbolKey]();   // invoked symbolKey\np.computedKey();  // invoked computedKey\n")])])]),o("p",[e._v("类定义也支持获取和设置访问器。语法与行为跟普通对象一样：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  set name(newName) {\n    this.name_ = newName;\n  }\n\n  get name() {\n    return this.name_;\n  }\n}\n\nlet p = new Person();\np.name = 'Jake';\nconsole.log(p.name); // Jake\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("静态类方法")])]),e._v(" "),o("p",[e._v("可以在类上定义静态方法。这些方法通常用于执行不特定于实例的操作，也不要求存在类的实例。与原型成员类似，每个类上只能有一个静态成员。")]),e._v(" "),o("p",[e._v("静态类成员在类定义中使用"),o("code",[e._v("static")]),e._v("关键字作为前缀。在静态成员中，"),o("code",[e._v("this")]),e._v("引用类自身。其他所有约定跟原型成员一样：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor() {\n    // 添加到this的所有内容都会存在于不同的实例上\n    this.locate = () => console.log('instance', this);\n  }\n\n  // 定义在类的原型对象上\n  locate() {\n    console.log('prototype', this);\n  }\n\n  // 定义在类本身上\n  static locate() {\n    console.log('class', this);\n  }\n}\n\nlet p = new Person();\n\np.locate();                 // instance, Person {}\nPerson.prototype.locate();  // prototype, {constructor: ... }\nPerson.locate();            // class, class Person {}\n")])])]),o("p",[e._v("静态类方法非常适合作为实例工厂：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor(age) {\n    this.age_ = age;\n  }\n\n  sayAge() {\n    console.log(this.age_);\n  }\n\n  static create() {\n    // 使用随机年龄创建并返回一个Person实例\n    return new Person(Math.floor(Math.random()*100));\n  }\n}\n\nconsole.log(Person.create()); // Person { age_: ... }\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[o("p",[o("strong",[e._v("非函数原型和类成员")])]),e._v(" "),o("p",[e._v("虽然类定义并不显式支持在原型或类上添加成员数据，但在类定义外部，可以手动添加：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  sayName() {\n    console.log('${Person.greeting} ${this.name}');\n  }\n}\n\n// 在类上定义数据成员\nPerson.greeting = 'My name is';\n\n// 在原型上定义数据成员\nPerson.prototype.name = 'Jake';\n\nlet p = new Person();\np.sayName();  // My name is Jake\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　类定义中之所以没有显式支持添加数据成员，是因为在共享目标（原型和类）上添加可变（可修改）数据成员是一种反模式。一般来说，对象实例应该独自拥有通过"),o("code",[e._v("this")]),e._v("引用的数据。")])])])]),e._v(" "),o("ol",{attrs:{start:"5"}},[o("li",[o("p",[o("strong",[e._v("迭代器与生成器方法")])]),e._v(" "),o("p",[e._v("类定义语法支持在原型和类本身上定义生成器方法：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  // 在原型上定义生成器方法\n  *createNicknameIterator() {\n    yield 'Jack';\n    yield 'Jake';\n    yield 'J-Dog';\n  }\n\n  // 在类上定义生成器方法\n  static *createJobIterator() {\n    yield 'Butcher';\n    yield 'Baker';\n    yield 'Candlestick maker';\n  }\n}\n\nlet jobIter = Person.createJobIterator();\nconsole.log(jobIter.next().value);  // Butcher\nconsole.log(jobIter.next().value);  // Baker\nconsole.log(jobIter.next().value);  // Candlestick maker\n\nlet p = new Person();\nlet nicknameIter = p.createNicknameIterator();\nconsole.log(nicknameIter.next().value);  // Jack\nconsole.log(nicknameIter.next().value);  // Jake\nconsole.log(nicknameIter.next().value);  // J-Dog\n")])])]),o("p",[e._v("因为支持生成器方法，所以可以通过添加一个默认的迭代器，把类实例变成可迭代对象：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor() {\n    this.nicknames = ['Jack', 'Jake', 'J-Dog'];\n  }\n\n  *[Symbol.iterator]() {\n    yield *this.nicknames.entries();\n  }\n}\n\nlet p = new Person();\nfor (let [idx, nickname] of p) {\n  console.log(nickname);\n}\n// Jack\n// Jake\n// J-Dog\n")])])]),o("p",[e._v("也可以只返回迭代器实例：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Person {\n  constructor() {\n    this.nicknames = ['Jack', 'Jake', 'J-Dog'];\n  }\n\n  [Symbol.iterator]() {\n    return this.nicknames.entries();\n  }\n}\n\nlet p = new Person();\nfor (let [idx, nickname] of p) {\n  console.log(nickname);\n}\n// Jack\n// Jake\n// J-Dog\n")])])])])]),e._v(" "),o("h3",{attrs:{id:"_8-4-4-继承"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-4-继承"}},[e._v("#")]),e._v(" 8.4.4 　继承")]),e._v(" "),o("p",[e._v("本章前面花了大量篇幅讨论如何使用 ES5 的机制实现继承。ECMAScript 6 新增特性中最出色的一个就是原生支持了类继承机制。虽然类继承使用的是新语法，但背后依旧使用的是原型链。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("继承基础")])]),e._v(" "),o("p",[e._v("ES6 类支持单继承。使用"),o("code",[e._v("extends")]),e._v("关键字，就可以继承任何拥有"),o("code",[e._v("[[Construct]]")]),e._v("和原型的对象。很大程度上，这意味着不仅可以继承一个类，也可以继承普通的构造函数（保持向后兼容）：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\n// 继承类\nclass Bus extends Vehicle {}\n\nlet b = new Bus();\nconsole.log(b instanceof Bus);      // true\nconsole.log(b instanceof Vehicle);  // true\n　\n　\nfunction Person() {}\n\n// 继承普通构造函数\nclass Engineer extends Person {}\n\nlet e = new Engineer();\nconsole.log(e instanceof Engineer);  // true\nconsole.log(e instanceof Person);    // true\n")])])]),o("p",[e._v("类和原型上定义的方法都会带到派生类。"),o("code",[e._v("this")]),e._v("的值会反映调用相应方法的实例或者类：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {\n  identifyPrototype(id) {\n    console.log(id, this);\n  }\n\n  static identifyClass(id) {\n    console.log(id, this);\n  }\n}\n\nclass Bus extends Vehicle {}\n\nlet v = new Vehicle();\nlet b = new Bus();\n\nb.identifyPrototype('bus');       // bus, Bus {}\nv.identifyPrototype('vehicle');   // vehicle, Vehicle {}\n\nBus.identifyClass('bus');         // bus, class Bus {}\nVehicle.identifyClass('vehicle'); // vehicle, class Vehicle {}\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v(" "),o("code",[e._v("extends")]),e._v("关键字也可以在类表达式中使用，因此"),o("code",[e._v("let Bar = class extends Foo {}")]),e._v("是有效的语法。")])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("构造函数、HomeObject 和 super()")])]),e._v(" "),o("p",[e._v("派生类的方法可以通过"),o("code",[e._v("super")]),e._v("关键字引用它们的原型。这个关键字只能在派生类中使用，而且仅限于类构造函数、实例方法和静态方法内部。在类构造函数中使用"),o("code",[e._v("super")]),e._v("可以调用父类构造函数。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {\n  constructor() {\n    this.hasEngine = true;\n  }\n}\n\nclass Bus extends Vehicle {\n  constructor() {\n    // 不要在调用super()之前引用this，否则会抛出ReferenceError\n\n    super(); // 相当于super.constructor()\n\n    console.log(this instanceof Vehicle);  // true\n    console.log(this);                     // Bus { hasEngine: true }\n  }\n}\n\nnew Bus();\n")])])]),o("p",[e._v("在静态方法中可以通过"),o("code",[e._v("super")]),e._v("调用继承的类上定义的静态方法：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {\n  static identify() {\n    console.log('vehicle');\n  }\n}\n\nclass Bus extends Vehicle {\n  static identify() {\n    super.identify();\n  }\n}\n\nBus.identify();  // vehicle\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　 ES6 给类构造函数和静态方法添加了内部特性"),o("code",[e._v("[[HomeObject]]")]),e._v("，这个特性是一个指针，指向定义该方法的对象。这个指针是自动赋值的，而且只能在 JavaScript 引擎内部访问。"),o("code",[e._v("super")]),e._v("始终会定义为"),o("code",[e._v("[[HomeObject]]")]),e._v("的原型。")])]),e._v(" "),o("p",[e._v("在使用"),o("code",[e._v("super")]),e._v("时要注意几个问题。")]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("super")]),e._v("只能在派生类构造函数和静态方法中使用。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {\n  constructor() {\n    super();\n    // SyntaxError: 'super' keyword unexpected\n  }\n}\n")])])])]),e._v(" "),o("li",[o("p",[e._v("不能单独引用"),o("code",[e._v("super")]),e._v("关键字，要么用它调用构造函数，要么用它引用静态方法。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\nclass Bus extends Vehicle {\n  constructor() {\n    console.log(super);\n    // SyntaxError: 'super' keyword unexpected here\n  }\n}\n")])])])]),e._v(" "),o("li",[o("p",[e._v("调用"),o("code",[e._v("super()")]),e._v("会调用父类构造函数，并将返回的实例赋值给"),o("code",[e._v("this")]),e._v("。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\nclass Bus extends Vehicle {\n  constructor() {\n    super();\n\n    console.log(this instanceof Vehicle);\n  }\n}\n\nnew Bus(); // true\n")])])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("super()")]),e._v("的行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {\n  constructor(licensePlate) {\n    this.licensePlate = licensePlate;\n  }\n}\n\nclass Bus extends Vehicle {\n  constructor(licensePlate) {\n    super(licensePlate);\n  }\n}\n\nconsole.log(new Bus('1337H4X')); // Bus { licensePlate: '1337H4X' }\n")])])])]),e._v(" "),o("li",[o("p",[e._v("如果没有定义类构造函数，在实例化派生类时会调用"),o("code",[e._v("super()")]),e._v("，而且会传入所有传给派生类的参数。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {\n  constructor(licensePlate) {\n    this.licensePlate = licensePlate;\n  }\n}\n\nclass Bus extends Vehicle {}\n\nconsole.log(new Bus('1337H4X')); // Bus { licensePlate: '1337H4X' }\n")])])])]),e._v(" "),o("li",[o("p",[e._v("在类构造函数中，不能在调用"),o("code",[e._v("super()")]),e._v("之前引用"),o("code",[e._v("this")]),e._v("。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\nclass Bus extends Vehicle {\n  constructor() {\n    console.log(this);\n  }\n}\n\nnew Bus();\n// ReferenceError: Must call super constructor in derived class\n// before accessing 'this' or returning from derived constructor\n")])])])]),e._v(" "),o("li",[o("p",[e._v("如果在派生类中显式定义了构造函数，则要么必须在其中调用"),o("code",[e._v("super()")]),e._v("，要么必须在其中返回一个对象。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\nclass Car extends Vehicle {}\n\nclass Bus extends Vehicle {\n  constructor() {\n    super();\n  }\n}\n\nclass Van extends Vehicle {\n  constructor() {\n    return {};\n  }\n}\n\nconsole.log(new Car());  // Car {}\nconsole.log(new Bus());  // Bus {}\nconsole.log(new Van());  // {}\n")])])])])])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("抽象基类")])]),e._v(" "),o("p",[e._v("有时候可能需要定义这样一个类，它可供其他类继承，但本身不会被实例化。虽然 ECMAScript 没有专门支持这种类的语法 ，但通过"),o("code",[e._v("new.target")]),e._v("也很容易实现。"),o("code",[e._v("new.target")]),e._v("保存通过"),o("code",[e._v("new")]),e._v("关键字调用的类或函数。通过在实例化时检测"),o("code",[e._v("new.target")]),e._v("是不是抽象基类，可以阻止对抽象基类的实例化：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 抽象基类\nclass Vehicle {\n  constructor() {\n    console.log(new.target);\n    if (new.target === Vehicle) {\n      throw new Error('Vehicle cannot be directly instantiated');\n    }\n  }\n}\n\n// 派生类\nclass Bus extends Vehicle {}\n\nnew Bus();       // class Bus {}\nnew Vehicle();   // class Vehicle {}\n// Error: Vehicle cannot be directly instantiated\n")])])]),o("p",[e._v("另外，通过在抽象基类构造函数中进行检查，可以要求派生类必须定义某个方法。因为原型方法在调用类构造函数之前就已经存在了，所以可以通过"),o("code",[e._v("this")]),e._v("关键字来检查相应的方法：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 抽象基类\nclass Vehicle {\n  constructor() {\n    if (new.target === Vehicle) {\n      throw new Error('Vehicle cannot be directly instantiated');\n    }\n\n    if (!this.foo) {\n      throw new Error('Inheriting class must define foo()');\n    }\n\n    console.log('success!');\n  }\n}\n\n// 派生类\nclass Bus extends Vehicle {\n  foo() {}\n}\n\n// 派生类\nclass Van extends Vehicle {}\n\nnew Bus(); // success!\nnew Van(); // Error: Inheriting class must define foo()\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[o("p",[o("strong",[e._v("继承内置类型")])]),e._v(" "),o("p",[e._v("ES6 类为继承内置引用类型提供了顺畅的机制，开发者可以方便地扩展内置类型：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class SuperArray extends Array {\n  shuffle() {\n    // 洗牌算法\n    for (let i = this.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this[i], this[j]] = [this[j], this[i]];\n    }\n  }\n}\n\nlet a = new SuperArray(1, 2, 3, 4, 5);\n\nconsole.log(a instanceof Array);       // true\nconsole.log(a instanceof SuperArray);  // true\n\nconsole.log(a);  // [1, 2, 3, 4, 5]\na.shuffle();\nconsole.log(a);  // [3, 1, 4, 5, 2]\n")])])]),o("p",[e._v("有些内置类型的方法会返回新实例。默认情况下，返回实例的类型与原始实例的类型是一致的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class SuperArray extends Array {}\n\nlet a1 = new SuperArray(1, 2, 3, 4, 5);\nlet a2 = a1.filter(x => !!(x%2))\n\nconsole.log(a1);  // [1, 2, 3, 4, 5]\nconsole.log(a2);  // [1, 3, 5]\nconsole.log(a1 instanceof SuperArray);  // true\nconsole.log(a2 instanceof SuperArray);  // true\n")])])]),o("p",[e._v("如果想覆盖这个默认行为，则可以覆盖"),o("code",[e._v("Symbol.species")]),e._v("访问器，这个访问器决定在创建返回的实例时使用的类：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class SuperArray extends Array {\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\n\nlet a1 = new SuperArray(1, 2, 3, 4, 5);\nlet a2 = a1.filter(x => !!(x%2))\n\nconsole.log(a1);  // [1, 2, 3, 4, 5]\nconsole.log(a2);  // [1, 3, 5]\nconsole.log(a1 instanceof SuperArray);  // true\nconsole.log(a2 instanceof SuperArray);  // false\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"5"}},[o("li",[o("p",[o("strong",[e._v("类混入")])]),e._v(" "),o("p",[e._v("把不同类的行为集中到一个类是一种常见的 JavaScript 模式。虽然 ES6 没有显式支持多类继承，但通过现有特性可以轻松地模拟这种行为。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v(" "),o("code",[e._v("Object.assign()")]),e._v("方法是为了混入对象行为而设计的。只有在需要混入类的行为时才有必要自己实现混入表达式。如果只是需要混入多个对象的属性，那么使用"),o("code",[e._v("Object.assign()")]),e._v("就可以了。")])]),e._v(" "),o("p",[e._v("在下面的代码片段中，"),o("code",[e._v("extends")]),e._v("关键字后面是一个 JavaScript 表达式。任何可以解析为一个类或一个构造函数的表达式都是有效的。这个表达式会在求值类定义时被求值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\nfunction getParentClass() {\n  console.log('evaluated expression');\n  return Vehicle;\n}\n\nclass Bus extends getParentClass() {}\n// 可求值的表达式\n")])])]),o("p",[e._v("混入模式可以通过在一个表达式中连缀多个混入元素来实现，这个表达式最终会解析为一个可以被继承的类。如果"),o("code",[e._v("Person")]),e._v("类需要组合 A、B、C，则需要某种机制实现 B 继承 A，C 继承 B，而"),o("code",[e._v("Person")]),e._v("再继承 C，从而把 A、B、C 组合到这个超类中。实现这种模式有不同的策略。")]),e._v(" "),o("p",[e._v("一个策略是定义一组“可嵌套”的函数，每个函数分别接收一个超类作为参数，而将混入类定义为这个参数的子类，并返回这个类。这些组合函数可以连缀调用，最终组合成超类表达式：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\nlet FooMixin = (Superclass) => class extends Superclass {\n  foo() {\n    console.log('foo');\n  }\n};\nlet BarMixin = (Superclass) => class extends Superclass {\n  bar() {\n    console.log('bar');\n  }\n};\nlet BazMixin = (Superclass) => class extends Superclass {\n  baz() {\n    console.log('baz');\n  }\n};\n\nclass Bus extends FooMixin(BarMixin(BazMixin(Vehicle))) {}\n\nlet b = new Bus();\nb.foo();  // foo\nb.bar();  // bar\nb.baz();  // baz\n")])])]),o("p",[e._v("通过写一个辅助函数，可以把嵌套调用展开：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Vehicle {}\n\nlet FooMixin = (Superclass) => class extends Superclass {\n  foo() {\n    console.log('foo');\n  }\n};\nlet BarMixin = (Superclass) => class extends Superclass {\n  bar() {\n    console.log('bar');\n  }\n};\nlet BazMixin = (Superclass) => class extends Superclass {\n  baz() {\n    console.log('baz');\n  }\n};\n\nfunction mix(BaseClass, ...Mixins) {\n  return Mixins.reduce((accumulator, current) => current(accumulator), BaseClass);\n}\n\nclass Bus extends mix(Vehicle, FooMixin, BarMixin, BazMixin) {}\n\nlet b = new Bus();\nb.foo();  // foo\nb.bar();  // bar\nb.baz();  // baz\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　很多 JavaScript 框架（特别是 React）已经抛弃混入模式，转向了复合模式（把方法提取到独立的类和辅助对象中，然后把它们组合起来，但不使用继承）。这反映了那个众所周知的软件设计原则：“复合胜过继承（composition over inheritance）。”这个设计原则被很多人遵循，在代码设计中能提供极大的灵活性。")])])])]),e._v(" "),o("h2",{attrs:{id:"_8-5-小结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-小结"}},[e._v("#")]),e._v(" 8.5 　小结")]),e._v(" "),o("p",[e._v("对象在代码执行过程中的任何时候都可以被创建和增强，具有极大的动态性，并不是严格定义的实体。下面的模式适用于创建对象。")]),e._v(" "),o("ul",[o("li",[e._v("工厂模式就是一个简单的函数，这个函数可以创建对象，为它添加属性和方法，然后返回这个对象。这个模式在构造函数模式出现后就很少用了。")]),e._v(" "),o("li",[e._v("使用构造函数模式可以自定义引用类型，可以使用"),o("code",[e._v("new")]),e._v("关键字像创建内置类型实例一样创建自定义类型的实例。不过，构造函数模式也有不足，主要是其成员无法重用，包括函数。考虑到函数本身是松散的、弱类型的，没有理由让函数不能在多个对象实例间共享。")]),e._v(" "),o("li",[e._v("原型模式解决了成员共享的问题，只要是添加到构造函数"),o("code",[e._v("prototype")]),e._v("上的属性和方法就可以共享。而组合构造函数和原型模式通过构造函数定义实例属性，通过原型定义共享的属性和方法。")])]),e._v(" "),o("p",[e._v("JavaScript 的继承主要通过原型链来实现。原型链涉及把构造函数的原型赋值为另一个类型的实例。这样一来，子类就可以访问父类的所有属性和方法，就像基于类的继承那样。原型链的问题是所有继承的属性和方法都会在对象实例间共享，无法做到实例私有。盗用构造函数模式通过在子类构造函数中调用父类构造函数，可以避免这个问题。这样可以让每个实例继承的属性都是私有的，但要求类型只能通过构造函数模式来定义（因为子类不能访问父类原型上的方法）。目前最流行的继承模式是组合继承，即通过原型链继承共享的属性和方法，通过盗用构造函数继承实例属性。")]),e._v(" "),o("p",[e._v("除上述模式之外，还有以下几种继承模式。")]),e._v(" "),o("ul",[o("li",[e._v("原型式继承可以无须明确定义构造函数而实现继承，本质上是对给定对象执行浅复制。这种操作的结果之后还可以再进一步增强。")]),e._v(" "),o("li",[e._v("与原型式继承紧密相关的是寄生式继承，即先基于一个对象创建一个新对象，然后再增强这个新对象，最后返回新对象。这个模式也被用在组合继承中，用于避免重复调用父类构造函数导致的浪费。")]),e._v(" "),o("li",[e._v("寄生组合继承被认为是实现基于类型继承的最有效方式。")])]),e._v(" "),o("p",[e._v("ECMAScript 6 新增的类很大程度上是基于既有原型机制的语法糖。类的语法让开发者可以优雅地定义向后兼容的类，既可以继承内置类型，也可以继承自定义类型。类有效地跨越了对象实例、对象原型和对象类之间的鸿沟。")])])}),[],!1,null,null,null);n.default=s.exports}}]);