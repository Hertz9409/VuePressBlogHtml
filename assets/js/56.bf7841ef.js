(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{516:function(e,n,o){"use strict";o.r(n);var t=o(27),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"第-7-章-迭代器与生成器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#第-7-章-迭代器与生成器"}},[e._v("#")]),e._v(" 第 7 章　迭代器与生成器")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("本章内容")])]),e._v(" "),o("ul",[o("li",[e._v("理解迭代")]),e._v(" "),o("li",[e._v("迭代器模式")]),e._v(" "),o("li",[e._v("生成器")])])]),e._v(" "),o("p",[e._v("迭代的英文“iteration”源自拉丁文 itero，意思是“重复”或“再来”。在软件开发领域，“迭代”的意思是按照顺序反复多次执行一段程序，通常会有明确的终止条件。ECMAScript 6 规范新增了两个高级特性：迭代器和生成器。使用这两个特性，能够更清晰、高效、方便地实现迭代。")]),e._v(" "),o("h2",{attrs:{id:"_7-1-理解迭代"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-理解迭代"}},[e._v("#")]),e._v(" 7.1 　理解迭代")]),e._v(" "),o("p",[e._v("在 JavaScript 中，计数循环就是一种最简单的迭代：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("for (let i = 1; i <= 10; ++i) {\n  console.log(i);\n}\n")])])]),o("p",[e._v("循环是迭代机制的基础，这是因为它可以指定迭代的次数，以及每次迭代要执行什么操作。每次循环都会在下一次迭代开始之前完成，而每次迭代的顺序都是事先定义好的。")]),e._v(" "),o("p",[e._v("迭代会在一个有序集合上进行。（“有序”可以理解为集合中所有项都可以按照既定的顺序被遍历到，特别是开始和结束项有明确的定义。）数组是 JavaScript 中有序集合的最典型例子。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let collection = ['foo', 'bar', 'baz'];\n\nfor (let index = 0; index < collection.length; ++index) {\n  console.log(collection[index]);\n}\n")])])]),o("p",[e._v("因为数组有已知的长度，且数组每一项都可以通过索引获取，所以整个数组可以通过递增索引来遍历。")]),e._v(" "),o("p",[e._v("由于如下原因，通过这种循环来执行例程并不理想。")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("迭代之前需要事先知道如何使用数据结构")]),e._v("。数组中的每一项都只能先通过引用取得数组对象，然后再通过"),o("code",[e._v("[]")]),e._v("操作符取得特定索引位置上的项。这种情况并不适用于所有数据结构。")]),e._v(" "),o("li",[o("strong",[e._v("遍历顺序并不是数据结构固有的")]),e._v("。通过递增索引来访问数据是特定于数组类型的方式，并不适用于其他具有隐式顺序的数据结构。")])]),e._v(" "),o("p",[e._v("ES5 新增了"),o("code",[e._v("Array.prototype.forEach()")]),e._v("方法，向通用迭代需求迈进了一步（但仍然不够理想）：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let collection = ['foo', 'bar', 'baz'];\n\ncollection.forEach((item) => console.log(item));\n// foo\n// bar\n// baz\n")])])]),o("p",[e._v("这个方法解决了单独记录索引和通过数组对象取得值的问题。不过，没有办法标识迭代何时终止。因此这个方法只适用于数组，而且回调结构也比较笨拙。")]),e._v(" "),o("p",[e._v("在 ECMAScript 较早的版本中，执行迭代必须使用循环或其他辅助结构。随着代码量增加，代码会变得越发混乱。很多语言都通过原生语言结构解决了这个问题，开发者无须事先知道如何迭代就能实现迭代操作。这个解决方案就是"),o("strong",[e._v("迭代器模式")]),e._v("。Python、Java、C++，还有其他很多语言都对这个模式提供了完备的支持。JavaScript 在 ECMAScript 6 以后也支持了迭代器模式。")]),e._v(" "),o("h2",{attrs:{id:"_7-2-迭代器模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-迭代器模式"}},[e._v("#")]),e._v(" 7.2 　迭代器模式")]),e._v(" "),o("p",[o("strong",[e._v("迭代器模式")]),e._v("（特别是在 ECMAScript 这个语境下）描述了一个方案，即可以把有些结构称为“可迭代对象”（iterable），因为它们实现了正式的"),o("code",[e._v("Iterable")]),e._v("接口，而且可以通过迭代器"),o("code",[e._v("Iterator")]),e._v("消费。")]),e._v(" "),o("p",[e._v("可迭代对象是一种抽象的说法。基本上，可以把可迭代对象理解成数组或集合这样的集合类型的对象。它们包含的元素都是有限的，而且都具有无歧义的遍历顺序：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 数组的元素是有限的\n// 递增索引可以按序访问每个元素\nlet arr = [3, 1, 4];\n\n// 集合的元素是有限的\n// 可以按插入顺序访问每个元素\nlet set = new Set().add(3).add(1).add(4);\n")])])]),o("p",[e._v("不过，可迭代对象不一定是集合对象，也可以是仅仅具有类似数组行为的其他数据结构，比如本章开头提到的计数循环。该循环中生成的值是暂时性的，但循环本身是在执行迭代。计数循环和数组都具有可迭代对象的行为。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　临时性可迭代对象可以实现为生成器，本章后面会讨论。")])]),e._v(" "),o("p",[e._v("任何实现"),o("code",[e._v("Iterable")]),e._v("接口的数据结构都可以被实现"),o("code",[e._v("Iterator")]),e._v("接口的结构“消费”（consume）。"),o("strong",[e._v("迭代器")]),e._v("（iterator）是按需创建的一次性对象。每个迭代器都会关联一个"),o("strong",[e._v("可迭代对象")]),e._v("，而迭代器会暴露迭代其关联可迭代对象的 API。迭代器无须了解与其关联的可迭代对象的结构，只需要知道如何取得连续的值。这种概念上的分离正是"),o("code",[e._v("Iterable")]),e._v("和"),o("code",[e._v("Iterator")]),e._v("的强大之处。")]),e._v(" "),o("h3",{attrs:{id:"_7-2-1-可迭代协议"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1-可迭代协议"}},[e._v("#")]),e._v(" 7.2.1 　可迭代协议")]),e._v(" "),o("p",[e._v("实现"),o("code",[e._v("Iterable")]),e._v("接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力和创建实现"),o("code",[e._v("Iterator")]),e._v("接口的对象的能力。在 ECMAScript 中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的"),o("code",[e._v("Symbol.iterator")]),e._v("作为键。这个默认迭代器属性必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个新迭代器。")]),e._v(" "),o("p",[e._v("很多内置类型都实现了"),o("code",[e._v("Iterable")]),e._v("接口：")]),e._v(" "),o("ul",[o("li",[e._v("字符串")]),e._v(" "),o("li",[e._v("数组")]),e._v(" "),o("li",[e._v("映射")]),e._v(" "),o("li",[e._v("集合")]),e._v(" "),o("li",[o("code",[e._v("arguments")]),e._v("对象")]),e._v(" "),o("li",[o("code",[e._v("NodeList")]),e._v("等 DOM 集合类型")])]),e._v(" "),o("p",[e._v("检查是否存在默认迭代器属性可以暴露这个工厂函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let num = 1;\nlet obj = {};\n\n// 这两种类型没有实现迭代器工厂函数\nconsole.log(num[Symbol.iterator]); // undefined\nconsole.log(obj[Symbol.iterator]); // undefined\n\nlet str = 'abc';\nlet arr = ['a', 'b', 'c'];\nlet map = new Map().set('a', 1).set('b', 2).set('c', 3);\nlet set = new Set().add('a').add('b').add('c');\nlet els = document.querySelectorAll('div');\n\n// 这些类型都实现了迭代器工厂函数\nconsole.log(str[Symbol.iterator]); // f values() { [native code] }\nconsole.log(arr[Symbol.iterator]); // f values() { [native code] }\nconsole.log(map[Symbol.iterator]); // f values() { [native code] }\nconsole.log(set[Symbol.iterator]); // f values() { [native code] }\nconsole.log(els[Symbol.iterator]); // f values() { [native code] }\n\n// 调用这个工厂函数会生成一个迭代器\nconsole.log(str[Symbol.iterator]()); // StringIterator {}\nconsole.log(arr[Symbol.iterator]()); // ArrayIterator {}\nconsole.log(map[Symbol.iterator]()); // MapIterator {}\nconsole.log(set[Symbol.iterator]()); // SetIterator {}\nconsole.log(els[Symbol.iterator]()); // ArrayIterator {}\n")])])]),o("p",[e._v("实际写代码过程中，不需要显式调用这个工厂函数来生成迭代器。实现可迭代协议的所有类型都会自动兼容接收可迭代对象的任何语言特性。接收可迭代对象的原生语言特性包括：")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("for-of")]),e._v("循环")]),e._v(" "),o("li",[e._v("数组解构")]),e._v(" "),o("li",[e._v("扩展操作符")]),e._v(" "),o("li",[o("code",[e._v("Array.from()")])]),e._v(" "),o("li",[e._v("创建集合")]),e._v(" "),o("li",[e._v("创建映射")]),e._v(" "),o("li",[o("code",[e._v("Promise.all()")]),e._v("接收由期约组成的可迭代对象")]),e._v(" "),o("li",[o("code",[e._v("Promise.race()")]),e._v("接收由期约组成的可迭代对象")]),e._v(" "),o("li",[o("code",[e._v("yield*")]),e._v("操作符，在生成器中使用")])]),e._v(" "),o("p",[e._v("这些原生语言结构会在后台调用提供的可迭代对象的这个工厂函数，从而创建一个迭代器：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let arr = ['foo', 'bar', 'baz'];\n\n// for-of循环\nfor (let el of arr) {\n  console.log(el);\n}\n// foo\n// bar\n// baz\n\n// 数组解构\nlet [a, b, c] = arr;\nconsole.log(a, b, c); // foo, bar, baz\n\n// 扩展操作符\nlet arr2 = [...arr];\nconsole.log(arr2); // ['foo', 'bar', 'baz']\n\n// Array.from()\nlet arr3 = Array.from(arr);\nconsole.log(arr3); // ['foo', 'bar', 'baz']\n\n// Set构造函数\nlet set = new Set(arr);\nconsole.log(set); // Set(3) {'foo', 'bar', 'baz'}\n\n// Map构造函数\nlet pairs = arr.map((x, i) => [x, i]);\nconsole.log(pairs); // [['foo', 0], ['bar', 1], ['baz', 2]]\nlet map = new Map(pairs);\nconsole.log(map); // Map(3) { 'foo'=>0, 'bar'=>1, 'baz'=>2 }\n")])])]),o("p",[e._v("如果对象原型链上的父类实现了"),o("code",[e._v("Iterable")]),e._v("接口，那这个对象也就实现了这个接口：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class FooArray extends Array {}\nlet fooArr = new FooArray('foo', 'bar', 'baz');\n\nfor (let el of fooArr) {\n  console.log(el);\n}\n// foo\n// bar\n// baz\n")])])]),o("h3",{attrs:{id:"_7-2-2-迭代器协议"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-2-迭代器协议"}},[e._v("#")]),e._v(" 7.2.2 　迭代器协议")]),e._v(" "),o("p",[e._v("迭代器是一种一次性使用的对象，用于迭代与其关联的可迭代对象。迭代器 API 使用"),o("code",[e._v("next()")]),e._v("方法在可迭代对象中遍历数据。每次成功调用"),o("code",[e._v("next()")]),e._v("，都会返回一个"),o("code",[e._v("IteratorResult")]),e._v("对象，其中包含迭代器返回的下一个值。若不调用"),o("code",[e._v("next()")]),e._v("，则无法知道迭代器的当前位置。")]),e._v(" "),o("p",[o("code",[e._v("next()")]),e._v("方法返回的迭代器对象"),o("code",[e._v("IteratorReault")]),e._v("包含两个属性："),o("code",[e._v("done")]),e._v("和"),o("code",[e._v("value")]),e._v("。"),o("code",[e._v("done")]),e._v("是一个布尔值，表示是否还可以再次调用"),o("code",[e._v("next()")]),e._v("取得下一个值；"),o("code",[e._v("value")]),e._v("包含可迭代对象的下一个值（"),o("code",[e._v("done")]),e._v("为"),o("code",[e._v("false")]),e._v("），或者"),o("code",[e._v("undefined")]),e._v("（"),o("code",[e._v("done")]),e._v("为"),o("code",[e._v("true")]),e._v("）。"),o("code",[e._v("done: true")]),e._v("状态称为“耗尽”。可以通过以下简单的数组来演示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 可迭代对象\nlet arr = ['foo', 'bar'];\n\n// 迭代器工厂函数\nconsole.log(arr[Symbol.iterator]); // f values() { [native code] }\n\n// 迭代器\nlet iter = arr[Symbol.iterator]();\nconsole.log(iter); // ArrayIterator {}\n\n// 执行迭代\nconsole.log(iter.next()); // { done: false, value: 'foo' }\nconsole.log(iter.next()); // { done: false, value: 'bar' }\nconsole.log(iter.next()); // { done: true, value: undefined }\n")])])]),o("p",[e._v("这里通过创建迭代器并调用"),o("code",[e._v("next()")]),e._v("方法按顺序迭代了数组，直至不再产生新值。迭代器并不知道怎么从可迭代对象中取得下一个值，也不知道可迭代对象有多大。只要迭代器到达"),o("code",[e._v("done: true")]),e._v("状态，后续调用"),o("code",[e._v("next()")]),e._v("就一直返回同样的值了：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let arr = ['foo'];\nlet iter = arr[Symbol.iterator]();\nconsole.log(iter.next()); // { done: false, value: 'foo' }\nconsole.log(iter.next()); // { done: true, value: undefined }\nconsole.log(iter.next()); // { done: true, value: undefined }\nconsole.log(iter.next()); // { done: true, value: undefined }\n")])])]),o("p",[e._v("每个迭代器都表示对可迭代对象的一次性有序遍历。不同迭代器的实例相互之间没有联系，只会独立地遍历可迭代对象：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let arr = ['foo', 'bar'];\nlet iter1 = arr[Symbol.iterator]();\nlet iter2 = arr[Symbol.iterator]();\n\nconsole.log(iter1.next()); // { done: false, value: 'foo' }\nconsole.log(iter2.next()); // { done: false, value: 'foo' }\nconsole.log(iter2.next()); // { done: false, value: 'bar' }\nconsole.log(iter1.next()); // { done: false, value: 'bar' }\n")])])]),o("p",[e._v("迭代器并不与可迭代对象某个时刻的快照绑定，而仅仅是使用游标来记录遍历可迭代对象的历程。如果可迭代对象在迭代期间被修改了，那么迭代器也会反映相应的变化：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let arr = ['foo', 'baz'];\nlet iter = arr[Symbol.iterator]();\n\nconsole.log(iter.next()); // { done: false, value: 'foo' }\n\n// 在数组中间插入值\narr.splice(1, 0, 'bar');\n\nconsole.log(iter.next()); // { done: false, value: 'bar' }\nconsole.log(iter.next()); // { done: false, value: 'baz' }\nconsole.log(iter.next()); // { done: true, value: undefined }\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　迭代器维护着一个指向可迭代对象的引用，因此迭代器会阻止垃圾回收程序回收可迭代对象。")])]),e._v(" "),o("p",[e._v("“迭代器”的概念有时候容易模糊，因为它可以指通用的迭代，也可以指接口，还可以指正式的迭代器类型。下面的例子比较了一个显式的迭代器实现和一个原生的迭代器实现。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 这个类实现了可迭代接口（Iterable）\n// 调用默认的迭代器工厂函数会返回\n// 一个实现迭代器接口（Iterator）的迭代器对象\nclass Foo {\n  [Symbol.iterator]() {\n    return {\n      next() {\n        return { done: false, value: 'foo' };\n      }\n    }\n  }\n}\nlet f = new Foo();\n\n// 打印出实现了迭代器接口的对象\nconsole.log(f[Symbol.iterator]()); // { next: f() {} }\n\n// Array类型实现了可迭代接口（Iterable）\n// 调用Array类型的默认迭代器工厂函数\n// 会创建一个ArrayIterator的实例\nlet a = new Array();\n\n// 打印出ArrayIterator的实例\nconsole.log(a[Symbol.iterator]()); // Array Iterator {}\n")])])]),o("h3",{attrs:{id:"_7-2-3-自定义迭代器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-3-自定义迭代器"}},[e._v("#")]),e._v(" 7.2.3 　自定义迭代器")]),e._v(" "),o("p",[e._v("与"),o("code",[e._v("Iterable")]),e._v("接口类似，任何实现"),o("code",[e._v("Iterator")]),e._v("接口的对象都可以作为迭代器使用。下面这个例子中的"),o("code",[e._v("Counter")]),e._v("类只能被迭代一定的次数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Counter {\n  // Counter的实例应该迭代limit次\n  constructor(limit) {\n    this.count = 1;\n    this.limit = limit;\n  }\n\n  next() {\n    if (this.count <= this.limit) {\n      return { done: false, value: this.count++ };\n    } else {\n      return { done: true, value: undefined };\n    }\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n}\n\nlet counter = new Counter(3);\n\nfor (let i of counter) {\n  console.log(i);\n}\n// 1\n// 2\n// 3\n")])])]),o("p",[e._v("这个类实现了"),o("code",[e._v("Iterator")]),e._v("接口，但不理想。这是因为它的每个实例只能被迭代一次：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("for (let i of counter) { console.log(i); }\n// 1\n// 2\n// 3\n\nfor (let i of counter) { console.log(i); }\n// (nothing logged)\n")])])]),o("p",[e._v("为了让一个可迭代对象能够创建多个迭代器，必须每创建一个迭代器就对应一个新计数器。为此，可以把计数器变量放到闭包里，然后通过闭包返回迭代器：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Counter {\n  constructor(limit) {\n    this.limit = limit;\n  }\n\n  [Symbol.iterator]() {\n    let count = 1,\n        limit = this.limit;\n    return {\n      next() {\n        if (count <= limit) {\n          return { done: false, value: count++ };\n        } else {\n          return { done: true, value: undefined };\n        }\n      }\n    };\n  }\n}\n\nlet counter = new Counter(3);\n\nfor (let i of counter) { console.log(i); }\n// 1\n// 2\n// 3\n\nfor (let i of counter) { console.log(i); }\n// 1\n// 2\n// 3\n")])])]),o("p",[e._v("每个以这种方式创建的迭代器也实现了"),o("code",[e._v("Iterable")]),e._v("接口。"),o("code",[e._v("Symbol.iterator")]),e._v("属性引用的工厂函数会返回相同的迭代器：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let arr = ['foo', 'bar', 'baz'];\nlet iter1 = arr[Symbol.iterator]();\n\nconsole.log(iter1[Symbol.iterator]);  // f values() { [native code] }\n\nlet iter2 = iter1[Symbol.iterator]();\n\nconsole.log(iter1 === iter2);         // true\n")])])]),o("p",[e._v("因为每个迭代器也实现了"),o("code",[e._v("Iterable")]),e._v("接口，所以它们可以用在任何期待可迭代对象的地方，比如"),o("code",[e._v("for-of")]),e._v("循环：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let arr = [3, 1, 4];\nlet iter = arr[Symbol.iterator]();\n\nfor (let item of arr ) { console.log(item); }\n// 3\n// 1\n// 4\n\nfor (let item of iter ) { console.log(item); }\n// 3\n// 1\n// 4\n")])])]),o("h3",{attrs:{id:"_7-2-4-提前终止迭代器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-4-提前终止迭代器"}},[e._v("#")]),e._v(" 7.2.4 　提前终止迭代器")]),e._v(" "),o("p",[e._v("可选的"),o("code",[e._v("return()")]),e._v("方法用于指定在迭代器提前关闭时执行的逻辑。执行迭代的结构在想让迭代器知道它不想遍历到可迭代对象耗尽时，就可以“关闭”迭代器。可能的情况包括：")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("for-of")]),e._v("循环通过"),o("code",[e._v("break")]),e._v("、"),o("code",[e._v("continue")]),e._v("、"),o("code",[e._v("return")]),e._v("或"),o("code",[e._v("throw")]),e._v("提前退出；")]),e._v(" "),o("li",[e._v("解构操作并未消费所有值。")])]),e._v(" "),o("p",[o("code",[e._v("return()")]),e._v("方法必须返回一个有效的"),o("code",[e._v("IteratorResult")]),e._v("对象。简单情况下，可以只返回"),o("code",[e._v("{ done: true }")]),e._v("。因为这个返回值只会用在生成器的上下文中，所以本章后面再讨论这种情况。")]),e._v(" "),o("p",[e._v("如下面的代码所示，内置语言结构在发现还有更多值可以迭代，但不会消费这些值时，会自动调用"),o("code",[e._v("return()")]),e._v("方法。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Counter {\n  constructor(limit) {\n    this.limit = limit;\n  }\n\n  [Symbol.iterator]() {\n    let count = 1,\n      limit = this.limit;\n    return {\n      next() {\n        if (count <= limit) {\n          return { done: false, value: count++ };\n        } else {\n          return { done: true };\n        }\n      },\n      return() {\n        console.log('Exiting early');\n        return { done: true };\n      }\n    };\n  }\n}\n\n\nlet counter1 = new Counter(5);\n\nfor (let i of counter1) {\n  if (i > 2) {\n    break;\n  }\n  console.log(i);\n}\n// 1\n// 2\n// 提前退出\n\n\nlet counter2 = new Counter(5);\n\ntry {\n  for (let i of counter2) {\n    if (i > 2) {\n      throw 'err';\n    }\n    console.log(i);\n  }\n} catch(e) {}\n// 1\n// 2\n// 提前退出\n\n\nlet counter3 = new Counter(5);\n\nlet [a, b] = counter3;\n// 提前退出\n")])])]),o("p",[e._v("如果迭代器没有关闭，则还可以继续从上次离开的地方继续迭代。比如，数组的迭代器就是不能关闭的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let a = [1, 2, 3, 4, 5];\nlet iter = a[Symbol.iterator]();\n\nfor (let i of iter) {\n  console.log(i);\n  if (i > 2) {\n    break\n  }\n}\n// 1\n// 2\n// 3\n\nfor (let i of iter) {\n  console.log(i);\n}\n// 4\n// 5\n")])])]),o("p",[e._v("因为"),o("code",[e._v("return()")]),e._v("方法是可选的，所以并非所有迭代器都是可关闭的。要知道某个迭代器是否可关闭，可以测试这个迭代器实例的"),o("code",[e._v("return")]),e._v("属性是不是函数对象。不过，仅仅给一个不可关闭的迭代器增加这个方法"),o("strong",[e._v("并不能")]),e._v("让它变成可关闭的。这是因为调用"),o("code",[e._v("return()")]),e._v("不会强制迭代器进入关闭状态。即便如此，"),o("code",[e._v("return()")]),e._v("方法还是会被调用。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("let a = [1, 2, 3, 4, 5];\nlet iter = a[Symbol.iterator]();\n\niter.return = function() {\n  console.log('Exiting early');\n  return { done: true };\n};\n\nfor (let i of iter) {\n  console.log(i);\n  if (i > 2) {\n    break\n  }\n}\n// 1\n// 2\n// 3\n// 提前退出\n\nfor (let i of iter) {\n  console.log(i);\n}\n// 4\n// 5\n")])])]),o("h2",{attrs:{id:"_7-3-生成器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-生成器"}},[e._v("#")]),e._v(" 7.3 　生成器")]),e._v(" "),o("p",[e._v("生成器是 ECMAScript 6 新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力。这种新能力具有深远的影响，比如，使用生成器可以自定义迭代器和实现协程。")]),e._v(" "),o("h3",{attrs:{id:"_7-3-1-生成器基础"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-1-生成器基础"}},[e._v("#")]),e._v(" 7.3.1 　生成器基础")]),e._v(" "),o("p",[e._v("生成器的形式是一个函数，函数名称前面加一个星号（"),o("code",[e._v("*")]),e._v("）表示它是一个生成器。只要是可以定义函数的地方，就可以定义生成器。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 生成器函数声明\nfunction* generatorFn() {}\n\n// 生成器函数表达式\nlet generatorFn = function* () {}\n\n// 作为对象字面量方法的生成器函数\nlet foo = {\n  * generatorFn() {}\n}\n\n// 作为类实例方法的生成器函数\nclass Foo {\n  * generatorFn() {}\n}\n\n// 作为类静态方法的生成器函数\nclass Bar {\n  static * generatorFn() {}\n}\n")])])]),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　箭头函数不能用来定义生成器函数。")])]),e._v(" "),o("p",[e._v("标识生成器函数的星号不受两侧空格的影响：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 等价的生成器函数：\nfunction* generatorFnA() {}\nfunction *generatorFnB() {}\nfunction * generatorFnC() {}\n\n// 等价的生成器方法：\nclass Foo {\n  *generatorFnD() {}\n  * generatorFnE() {}\n}\n")])])]),o("p",[e._v("调用生成器函数会产生一个"),o("strong",[e._v("生成器对象")]),e._v("。生成器对象一开始处于暂停执行（suspended）的状态。与迭代器相似，生成器对象也实现了"),o("code",[e._v("Iterator")]),e._v("接口，因此具有"),o("code",[e._v("next()")]),e._v("方法。调用这个方法会让生成器开始或恢复执行。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {}\n\nconst g = generatorFn();\n\nconsole.log(g);       // generatorFn {<suspended>}\nconsole.log(g.next);  // f next() { [native code] }\n")])])]),o("p",[o("code",[e._v("next()")]),e._v("方法的返回值类似于迭代器，有一个"),o("code",[e._v("done")]),e._v("属性和一个"),o("code",[e._v("value")]),e._v("属性。函数体为空的生成器函数中间不会停留，调用一次"),o("code",[e._v("next()")]),e._v("就会让生成器到达"),o("code",[e._v("done: true")]),e._v("状态。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {}\n\nlet generatorObject = generatorFn();\n\nconsole.log(generatorObject);         // generatorFn {<suspended>}\nconsole.log(generatorObject.next());  // { done: true, value: undefined }\n")])])]),o("p",[o("code",[e._v("value")]),e._v("属性是生成器函数的返回值，默认值为"),o("code",[e._v("undefined")]),e._v("，可以通过生成器函数的返回值指定：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  return 'foo';\n}\n\nlet generatorObject = generatorFn();\n\nconsole.log(generatorObject);         // generatorFn {<suspended>}\nconsole.log(generatorObject.next());  // { done: true, value: 'foo' }\n")])])]),o("p",[e._v("生成器函数只会在初次调用"),o("code",[e._v("next()")]),e._v("方法后开始执行，如下所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  console.log('foobar');\n}\n\n// 初次调用生成器函数并不会打印日志\nlet generatorObject = generatorFn();\n\ngeneratorObject.next();  // foobar\n")])])]),o("p",[e._v("生成器对象实现了"),o("code",[e._v("Iterable")]),e._v("接口，它们默认的迭代器是自引用的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {}\n\nconsole.log(generatorFn);\n// f* generatorFn() {}\nconsole.log(generatorFn()[Symbol.iterator]);\n// f [Symbol.iterator]() {native code}\nconsole.log(generatorFn());\n// generatorFn {<suspended>}\nconsole.log(generatorFn()[Symbol.iterator]());\n// generatorFn {<suspended>}\n\nconst g = generatorFn();\n\nconsole.log(g === g[Symbol.iterator]());\n// true\n")])])]),o("h3",{attrs:{id:"_7-3-2-通过yield中断执行"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-2-通过yield中断执行"}},[e._v("#")]),e._v(" 7.3.2 　通过"),o("code",[e._v("yield")]),e._v("中断执行")]),e._v(" "),o("p",[o("code",[e._v("yield")]),e._v("关键字可以让生成器停止和开始执行，也是生成器最有用的地方。生成器函数在遇到"),o("code",[e._v("yield")]),e._v("关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留。停止执行的生成器函数只能通过在生成器对象上调用"),o("code",[e._v("next()")]),e._v("方法来恢复执行：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  yield;\n}\n\nlet generatorObject = generatorFn();\n\nconsole.log(generatorObject.next());  // { done: false, value: undefined }\nconsole.log(generatorObject.next());  // { done: true, value: undefined }\n")])])]),o("p",[e._v("此时的"),o("code",[e._v("yield")]),e._v("关键字有点像函数的中间返回语句，它生成的值会出现在"),o("code",[e._v("next()")]),e._v("方法返回的对象里。通过"),o("code",[e._v("yield")]),e._v("关键字退出的生成器函数会处在"),o("code",[e._v("done: false")]),e._v("状态；通过"),o("code",[e._v("return")]),e._v("关键字退出的生成器函数会处于"),o("code",[e._v("done: true")]),e._v("状态。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  yield 'foo';\n  yield 'bar';\n  return 'baz';\n}\n\nlet generatorObject = generatorFn();\n\nconsole.log(generatorObject.next());  // { done: false, value: 'foo' }\nconsole.log(generatorObject.next());  // { done: false, value: 'bar' }\nconsole.log(generatorObject.next());  // { done: true, value: 'baz' }\n")])])]),o("p",[e._v("生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器对象上调用"),o("code",[e._v("next()")]),e._v("不会影响其他生成器：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  yield 'foo';\n  yield 'bar';\n  return 'baz';\n}\n\nlet generatorObject1 = generatorFn();\nlet generatorObject2 = generatorFn();\n\n\nconsole.log(generatorObject1.next()); // { done: false, value: 'foo' }\nconsole.log(generatorObject2.next()); // { done: false, value: 'foo' }\nconsole.log(generatorObject2.next()); // { done: false, value: 'bar' }\nconsole.log(generatorObject1.next()); // { done: false, value: 'bar' }\n")])])]),o("p",[o("code",[e._v("yield")]),e._v("关键字只能在生成器函数内部使用，用在其他地方会抛出错误。类似函数的"),o("code",[e._v("return")]),e._v("关键字，"),o("code",[e._v("yield")]),e._v("关键字必须直接位于生成器函数定义中，出现在嵌套的非生成器函数中会抛出语法错误：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 有效\nfunction* validGeneratorFn() {\n  yield;\n}\n\n// 无效\nfunction* invalidGeneratorFnA() {\n  function a() {\n    yield;\n  }\n}\n\n// 无效\nfunction* invalidGeneratorFnB() {\n  const b = () => {\n    yield;\n  }\n}\n\n// 无效\nfunction* invalidGeneratorFnC() {\n  (() => {\n    yield;\n  })();\n}\n")])])]),o("ol",[o("li",[o("p",[o("strong",[e._v("生成器对象作为可迭代对象")])]),e._v(" "),o("p",[e._v("在生成器对象上显式调用"),o("code",[e._v("next()")]),e._v("方法的用处并不大。其实，如果把生成器对象当成可迭代对象，那么使用起来会更方便：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nfor (const x of generatorFn()) {\n  console.log(x);\n}\n// 1\n// 2\n// 3\n")])])]),o("p",[e._v("在需要自定义迭代对象时，这样使用生成器对象会特别有用。比如，我们需要定义一个可迭代对象，而它会产生一个迭代器，这个迭代器会执行指定的次数。使用生成器，可以通过一个简单的循环来实现：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* nTimes(n) {\n  while(n--) {\n    yield;\n  }\n}\n\nfor (let _ of nTimes(3)) {\n  console.log('foo');\n}\n// foo\n// foo\n// foo\n")])])]),o("p",[e._v("传给生成器的函数可以控制迭代循环的次数。在"),o("code",[e._v("n")]),e._v("为 0 时，"),o("code",[e._v("while")]),e._v("条件为假，循环退出，生成器函数返回。")])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("使用 yield 实现输入和输出")])]),e._v(" "),o("p",[e._v("除了可以作为函数的中间返回语句使用，"),o("code",[e._v("yield")]),e._v("关键字还可以作为函数的中间参数使用。上一次让生成器函数暂停的"),o("code",[e._v("yield")]),e._v("关键字会接收到传给"),o("code",[e._v("next()")]),e._v("方法的第一个值。这里有个地方不太好理解——第一次调用"),o("code",[e._v("next()")]),e._v("传入的值不会被使用，因为这一次调用是为了开始执行生成器函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn(initial) {\n  console.log(initial);\n  console.log(yield);\n  console.log(yield);\n}\n\nlet generatorObject = generatorFn('foo');\n\ngeneratorObject.next('bar');  // foo\ngeneratorObject.next('baz');  // baz\ngeneratorObject.next('qux');  // qux\n")])])]),o("p",[o("code",[e._v("yield")]),e._v("关键字可以同时用于输入和输出，如下例所示：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  return yield 'foo';\n}\n\nlet generatorObject = generatorFn();\n\nconsole.log(generatorObject.next());       // { done: false, value: 'foo' }\nconsole.log(generatorObject.next('bar'));  // { done: true, value: 'bar' }\n")])])]),o("p",[e._v("因为函数必须对整个表达式求值才能确定要返回的值，所以它在遇到"),o("code",[e._v("yield")]),e._v("关键字时暂停执行并计算出要产生的值："),o("code",[e._v('"foo"')]),e._v("。下一次调用"),o("code",[e._v("next()")]),e._v("传入了"),o("code",[e._v('"bar"')]),e._v("，作为交给同一个"),o("code",[e._v("yield")]),e._v("的值。然后这个值被确定为本次生成器函数要返回的值。")]),e._v(" "),o("p",[o("code",[e._v("yield")]),e._v("关键字并非只能使用一次。比如，以下代码就定义了一个无穷计数生成器函数：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  for (let i = 0;;++i) {\n    yield i;\n  }\n}\n\nlet generatorObject = generatorFn();\n\nconsole.log(generatorObject.next().value);  // 0\nconsole.log(generatorObject.next().value);  // 1\nconsole.log(generatorObject.next().value);  // 2\nconsole.log(generatorObject.next().value);  // 3\nconsole.log(generatorObject.next().value);  // 4\nconsole.log(generatorObject.next().value);  // 5\n...\n")])])]),o("p",[e._v("假设我们想定义一个生成器函数，它会根据配置的值迭代相应次数并产生迭代的索引。初始化一个新数组可以实现这个需求，但不用数组也可以实现同样的行为：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* nTimes(n) {\n  for (let i = 0; i < n; ++i) {\n    yield i;\n  }\n}\n\nfor (let x of nTimes(3)) {\n  console.log(x);\n}\n// 0\n// 1\n// 2\n")])])]),o("p",[e._v("另外，使用"),o("code",[e._v("while")]),e._v("循环也可以，而且代码稍微简洁一点：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* nTimes(n) {\n  let i = 0;\n  while(n--) {\n    yield i++;\n  }\n}\n\nfor (let x of nTimes(3)) {\n  console.log(x);\n}\n// 0\n// 1\n// 2\n")])])]),o("p",[e._v("这样使用生成器也可以实现范围和填充数组：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* range(start, end) {\n  while(end > start) {\n    yield start++;\n  }\n}\n\nfor (const x of range(4, 7)) {\n  console.log(x);\n}\n// 4\n// 5\n// 6\n\nfunction* zeroes(n) {\n  while(n--) {\n    yield 0;\n  }\n}\n\nconsole.log(Array.from(zeroes(8))); // [0, 0, 0, 0, 0, 0, 0, 0]\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[o("strong",[e._v("产生可迭代对象")])]),e._v(" "),o("p",[e._v("可以使用星号增强"),o("code",[e._v("yield")]),e._v("的行为，让它能够迭代一个可迭代对象，从而一次产出一个值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 等价的generatorFn：\n// function* generatorFn() {\n//   for (const x of [1, 2, 3]) {\n//     yield x;\n//   }\n// }\nfunction* generatorFn() {\n  yield* [1, 2, 3];\n}\n\nlet generatorObject = generatorFn();\n\nfor (const x of generatorFn()) {\n  console.log(x);\n}\n// 1\n// 2\n// 3\n")])])]),o("p",[e._v("与生成器函数的星号类似，"),o("code",[e._v("yield")]),e._v("星号两侧的空格不影响其行为：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  yield* [1, 2];\n  yield *[3, 4];\n  yield * [5, 6];\n}\n\nfor (const x of generatorFn()) {\n  console.log(x);\n}\n// 1\n// 2\n// 3\n// 4\n// 5\n// 6\n")])])]),o("p",[e._v("因为"),o("code",[e._v("yield*")]),e._v("实际上只是将一个可迭代对象序列化为一连串可以单独产出的值，所以这跟把"),o("code",[e._v("yield")]),e._v("放到一个循环里没什么不同。下面两个生成器函数的行为是等价的：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFnA() {\n  for (const x of [1, 2, 3]) {\n    yield x;\n  }\n}\n\nfor (const x of generatorFnA()) {\n  console.log(x);\n}\n// 1\n// 2\n// 3\n\nfunction* generatorFnB() {\n  yield* [1, 2, 3];\n}\n\nfor (const x of generatorFnB()) {\n  console.log(x);\n}\n// 1\n// 2\n// 3\n")])])]),o("p",[o("code",[e._v("yield*")]),e._v("的值是关联迭代器返回"),o("code",[e._v("done: true")]),e._v("时的"),o("code",[e._v("value")]),e._v("属性。对于普通迭代器来说，这个值是"),o("code",[e._v("undefined")]),e._v("：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  console.log('iter value:', yield* [1, 2, 3]);\n}\n\nfor (const x of generatorFn()) {\n  console.log('value:', x);\n}\n// value: 1\n// value: 2\n// value: 3\n// iter value: undefined\n")])])]),o("p",[e._v("对于生成器函数产生的迭代器来说，这个值就是生成器函数返回的值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* innerGeneratorFn() {\n  yield 'foo';\n  return 'bar';\n}\nfunction* outerGeneratorFn(genObj) {\n  console.log('iter value:', yield* innerGeneratorFn());\n}\n\nfor (const x of outerGeneratorFn()) {\n  console.log('value:', x);\n}\n// value: foo\n// iter value: bar\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[o("p",[o("strong",[e._v("使用 yield*实现递归算法")])]),e._v(" "),o("p",[o("code",[e._v("yield*")]),e._v("最有用的地方是实现递归操作，此时生成器可以产生自身。看下面的例子：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* nTimes(n) {\n  if (n > 0) {\n    yield* nTimes(n - 1);\n    yield n - 1;\n  }\n}\n\nfor (const x of nTimes(3)) {\n  console.log(x);\n}\n// 0\n// 1\n// 2\n")])])]),o("p",[e._v("在这个例子中，每个生成器首先都会从新创建的生成器对象产出每个值，然后再产出一个整数。结果就是生成器函数会递归地减少计数器值，并实例化另一个生成器对象。从最顶层来看，这就相当于创建一个可迭代对象并返回递增的整数。")]),e._v(" "),o("p",[e._v("使用递归生成器结构和"),o("code",[e._v("yield*")]),e._v("可以优雅地表达递归算法。下面是一个图的实现，用于生成一个随机的双向图：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Node {\n  constructor(id) {\n    this.id = id;\n    this.neighbors = new Set();\n  }\n\n  connect(node) {\n    if (node !== this) {\n      this.neighbors.add(node);\n      node.neighbors.add(this);\n    }\n  }\n}\n\nclass RandomGraph {\n  constructor(size) {\n    this.nodes = new Set();\n\n    // 创建节点\n    for (let i = 0; i < size; ++i) {\n      this.nodes.add(new Node(i));\n    }\n\n    // 随机连接节点\n    const threshold = 1 / size;\n    for (const x of this.nodes) {\n      for (const y of this.nodes) {\n        if (Math.random() < threshold) {\n          x.connect(y);\n        }\n      }\n    }\n  }\n\n  // 这个方法仅用于调试\n  print() {\n    for (const node of this.nodes) {\n      const ids = [...node.neighbors]\n                      .map((n) => n.id)\n                      .join(',');\n\n      console.log('${node.id}: ${ids}');\n    }\n  }\n}\n\nconst g = new RandomGraph(6);\n\ng.print();\n// 示例输出：\n// 0: 2,3,5\n// 1: 2,3,4,5\n// 2: 1,3\n// 3: 0,1,2,4\n// 4: 2,3\n// 5: 0,4\n")])])]),o("p",[e._v("图数据结构非常适合递归遍历，而递归生成器恰好非常合用。为此，生成器函数必须接收一个可迭代对象，产出该对象中的每一个值，并且对每个值进行递归。这个实现可以用来测试某个图是否连通，即是否没有不可到达的节点。只要从一个节点开始，然后尽力访问每个节点就可以了。结果就得到了一个非常简洁的深度优先遍历：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Node {\n  constructor(id) {\n    ...\n  }\n\n  connect(node) {\n    ...\n  }\n}\n\nclass RandomGraph {\n  constructor(size) {\n    ...\n  }\n\n  print() {\n    ...\n  }\n\n  isConnected() {\n    const visitedNodes = new Set();\n\n    function* traverse(nodes) {\n      for (const node of nodes) {\n        if (!visitedNodes.has(node)) {\n          yield node;\n          yield* traverse(node.neighbors);\n        }\n      }\n    }\n\n    // 取得集合中的第一个节点\n    const firstNode = this.nodes[Symbol.iterator]().next().value;\n\n    // 使用递归生成器迭代每个节点\n    for (const node of traverse([firstNode])) {\n      visitedNodes.add(node);\n    }\n\n    return visitedNodes.size === this.nodes.size;\n  }\n}\n")])])])])]),e._v(" "),o("h3",{attrs:{id:"_7-3-3-生成器作为默认迭代器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-3-生成器作为默认迭代器"}},[e._v("#")]),e._v(" 7.3.3 　生成器作为默认迭代器")]),e._v(" "),o("p",[e._v("因为生成器对象实现了"),o("code",[e._v("Iterable")]),e._v("接口，而且生成器函数和默认迭代器被调用之后都产生迭代器，所以生成器格外适合作为默认迭代器。下面是一个简单的例子，这个类的默认迭代器可以用一行代码产出类的内容：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Foo {\n  constructor() {\n    this.values = [1, 2, 3];\n  }\n  * [Symbol.iterator]() {\n    yield* this.values;\n  }\n}\n\nconst f = new Foo();\nfor (const x of f) {\n  console.log(x);\n}\n// 1\n// 2\n// 3\n")])])]),o("p",[e._v("这里，"),o("code",[e._v("for-of")]),e._v("循环调用了默认迭代器（它恰好又是一个生成器函数）并产生了一个生成器对象。这个生成器对象是可迭代的，所以完全可以在迭代中使用。")]),e._v(" "),o("h3",{attrs:{id:"_7-3-4-提前终止生成器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-4-提前终止生成器"}},[e._v("#")]),e._v(" 7.3.4 　提前终止生成器")]),e._v(" "),o("p",[e._v("与迭代器类似，生成器也支持“可关闭”的概念。一个实现"),o("code",[e._v("Iterator")]),e._v("接口的对象一定有"),o("code",[e._v("next()")]),e._v("方法，还有一个可选的"),o("code",[e._v("return()")]),e._v("方法用于提前终止迭代器。生成器对象除了有这两个方法，还有第三个方法："),o("code",[e._v("throw()")]),e._v("。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {}\n\nconst g = generatorFn();\n\nconsole.log(g);         // generatorFn {<suspended>}\nconsole.log(g.next);    // f next() { [native code] }\nconsole.log(g.return);  // f return() { [native code] }\nconsole.log(g.throw);   // f throw() { [native code] }\n")])])]),o("p",[o("code",[e._v("return()")]),e._v("和"),o("code",[e._v("throw()")]),e._v("方法都可以用于强制生成器进入关闭状态。")]),e._v(" "),o("ol",[o("li",[o("p",[o("strong",[e._v("return()")])]),e._v(" "),o("p",[o("code",[e._v("return()")]),e._v("方法会强制生成器进入关闭状态。提供给"),o("code",[e._v("return()")]),e._v("方法的值，就是终止迭代器对象的值：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  for (const x of [1, 2, 3]) {\n    yield x;\n  }\n}\n\nconst g = generatorFn();\n\nconsole.log(g);            // generatorFn {<suspended>}\nconsole.log(g.return(4));  // { done: true, value: 4 }\nconsole.log(g);            // generatorFn {<closed>}\n")])])]),o("p",[e._v("与迭代器不同，所有生成器对象都有"),o("code",[e._v("return()")]),e._v("方法，只要通过它进入关闭状态，就无法恢复了。后续调用"),o("code",[e._v("next()")]),e._v("会显示"),o("code",[e._v("done: true")]),e._v("状态，而提供的任何返回值都不会被存储或传播：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  for (const x of [1, 2, 3]) {\n    yield x;\n  }\n}\n\nconst g = generatorFn();\n\nconsole.log(g.next());     // { done: false, value: 1 }\nconsole.log(g.return(4));  // { done: true, value: 4 }\nconsole.log(g.next());     // { done: true, value: undefined }\nconsole.log(g.next());     // { done: true, value: undefined }\nconsole.log(g.next());     // { done: true, value: undefined }\n")])])]),o("p",[o("code",[e._v("for-of")]),e._v("循环等内置语言结构会忽略状态为"),o("code",[e._v("done: true")]),e._v("的"),o("code",[e._v("IteratorObject")]),e._v("内部返回的值。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  for (const x of [1, 2, 3]) {\n    yield x;\n  }\n}\n\nconst g = generatorFn();\n\nfor (const x of g) {\n  if (x > 1) {\n    g.return(4);\n  }\n  console.log(x);\n}\n// 1\n// 2\n")])])])])]),e._v(" "),o("ol",{attrs:{start:"2"}},[o("li",[o("p",[o("strong",[e._v("throw()")])]),e._v(" "),o("p",[o("code",[e._v("throw()")]),e._v("方法会在暂停的时候将一个提供的错误注入到生成器对象中。如果错误未被处理，生成器就会关闭：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  for (const x of [1, 2, 3]) {\n    yield x;\n  }\n}\n\nconst g = generatorFn();\n\nconsole.log(g);   // generatorFn {<suspended>}\ntry {\n  g.throw('foo');\n} catch (e) {\n  console.log(e); // foo\n}\nconsole.log(g);   // generatorFn {<closed>}\n")])])]),o("p",[e._v("不过，假如生成器函数"),o("strong",[e._v("内部")]),e._v("处理了这个错误，那么生成器就不会关闭，而且还可以恢复执行。错误处理会跳过对应的"),o("code",[e._v("yield")]),e._v("，因此在这个例子中会跳过一个值。比如：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("function* generatorFn() {\n  for (const x of [1, 2, 3]) {\n    try {\n      yield x;\n    } catch(e) {}\n  }\n}\n\nconst g = generatorFn();\n\nconsole.log(g.next()); // { done: false, value: 1}\ng.throw('foo');\nconsole.log(g.next()); // { done: false, value: 3}\n")])])]),o("p",[e._v("在这个例子中，生成器在"),o("code",[e._v("try")]),e._v("/"),o("code",[e._v("catch")]),e._v("块中的"),o("code",[e._v("yield")]),e._v("关键字处暂停执行。在暂停期间，"),o("code",[e._v("throw()")]),e._v("方法向生成器对象内部注入了一个错误：字符串"),o("code",[e._v('"foo"')]),e._v("。这个错误会被"),o("code",[e._v("yield")]),e._v("关键字抛出。因为错误是在生成器的"),o("code",[e._v("try")]),e._v("/"),o("code",[e._v("catch")]),e._v("块中抛出的，所以仍然在生成器内部被捕获。可是，由于"),o("code",[e._v("yield")]),e._v("抛出了那个错误，生成器就不会再产出值"),o("code",[e._v("2")]),e._v("。此时，生成器函数继续执行，在下一次迭代再次遇到"),o("code",[e._v("yield")]),e._v("关键字时产出了值"),o("code",[e._v("3")]),e._v("。")]),e._v(" "),o("blockquote",[o("p",[o("strong",[e._v("注意")]),e._v("　如果生成器对象还没有开始执行，那么调用"),o("code",[e._v("throw()")]),e._v("抛出的错误不会在函数内部被捕获，因为这相当于在函数块外部抛出了错误。")])])])]),e._v(" "),o("h2",{attrs:{id:"_7-4-小结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-小结"}},[e._v("#")]),e._v(" 7.4 　小结")]),e._v(" "),o("p",[e._v("迭代是一种所有编程语言中都可以看到的模式。ECMAScript 6 正式支持迭代模式并引入了两个新的语言特性：迭代器和生成器。")]),e._v(" "),o("p",[e._v("迭代器是一个可以由任意对象实现的接口，支持连续获取对象产出的每一个值。任何实现"),o("code",[e._v("Iterable")]),e._v("接口的对象都有一个"),o("code",[e._v("Symbol.iterator")]),e._v("属性，这个属性引用默认迭代器。默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个实现"),o("code",[e._v("Iterator")]),e._v("接口的对象。")]),e._v(" "),o("p",[e._v("迭代器必须通过连续调用"),o("code",[e._v("next()")]),e._v("方法才能连续取得值，这个方法返回一个"),o("code",[e._v("IteratorObject")]),e._v("。这个对象包含一个"),o("code",[e._v("done")]),e._v("属性和一个"),o("code",[e._v("value")]),e._v("属性。前者是一个布尔值，表示是否还有更多值可以访问；后者包含迭代器返回的当前值。这个接口可以通过手动反复调用"),o("code",[e._v("next()")]),e._v("方法来消费，也可以通过原生消费者，比如"),o("code",[e._v("for-of")]),e._v("循环来自动消费。")]),e._v(" "),o("p",[e._v("生成器是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了"),o("code",[e._v("Iterable")]),e._v("接口，因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持"),o("code",[e._v("yield")]),e._v("关键字，这个关键字能够暂停执行生成器函数。使用"),o("code",[e._v("yield")]),e._v("关键字还可以通过"),o("code",[e._v("next()")]),e._v("方法接收输入和产生输出。在加上星号之后，"),o("code",[e._v("yield")]),e._v("关键字可以将跟在它后面的可迭代对象序列化为一连串值。")])])}),[],!1,null,null,null);n.default=r.exports}}]);