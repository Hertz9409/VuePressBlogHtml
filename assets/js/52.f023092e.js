(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{512:function(e,t,a){"use strict";a.r(t);var v=a(27),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"第-3-章-语言基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-语言基础"}},[e._v("#")]),e._v(" 第 3 章　语言基础")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("本章内容")])]),e._v(" "),a("ul",[a("li",[e._v("语法")]),e._v(" "),a("li",[e._v("数据类型")]),e._v(" "),a("li",[e._v("流控制语句")]),e._v(" "),a("li",[e._v("理解函数")])])]),e._v(" "),a("p",[e._v("任何语言的核心所描述的都是这门语言在最基本的层面上如何工作，涉及语法、操作符、数据类型以及内置功能，在此基础之上才可以构建复杂的解决方案。如前所述，ECMA-262 以一个名为 ECMAScript 的伪语言的形式，定义了 JavaScript 的所有这些方面。")]),e._v(" "),a("p",[e._v("ECMA-262 第 5 版（ES5）定义的 ECMAScript，是目前为止实现得最为广泛（即受浏览器支持最好）的一个版本。第 6 版（ES6）在浏览器中的实现（即受支持）程度次之。到 2017 年底，大多数主流浏览器几乎或全部实现了这一版的规范。为此，本章接下来的内容主要基于 ECMAScript 第 6 版。")]),e._v(" "),a("h2",{attrs:{id:"_3-1-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-语法"}},[e._v("#")]),e._v(" 3.1 　语法")]),e._v(" "),a("p",[e._v("ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 和 Perl。熟悉这些语言的开发者，应该很容易理解 ECMAScript 宽松的语法。")]),e._v(" "),a("h3",{attrs:{id:"_3-1-1-区分大小写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-区分大小写"}},[e._v("#")]),e._v(" 3.1.1 　区分大小写")]),e._v(" "),a("p",[e._v("首先要知道的是，ECMAScript 中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量"),a("code",[e._v("test")]),e._v("和变量"),a("code",[e._v("Test")]),e._v("是两个不同的变量。类似地，"),a("code",[e._v("typeof")]),e._v("不能作为函数名，因为它是一个关键字（后面会介绍）。但"),a("code",[e._v("Typeof")]),e._v("是一个完全有效的函数名。")]),e._v(" "),a("h3",{attrs:{id:"_3-1-2-标识符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-标识符"}},[e._v("#")]),e._v(" 3.1.2 　标识符")]),e._v(" "),a("p",[e._v("所谓"),a("strong",[e._v("标识符")]),e._v("，就是变量、函数、属性或函数参数的名称。标识符可以由一或多个下列字符组成：")]),e._v(" "),a("ul",[a("li",[e._v("第一个字符必须是一个字母、下划线（"),a("code",[e._v("_")]),e._v("）或美元符号（"),a("code",[e._v("$")]),e._v("）；")]),e._v(" "),a("li",[e._v("剩下的其他字符可以是字母、下划线、美元符号或数字。")])]),e._v(" "),a("p",[e._v("标识符中的字母可以是扩展 ASCII（Extended ASCII）中的字母，也可以是 Unicode 的字母字符，如 À 和 Æ（但不推荐使用）。")]),e._v(" "),a("p",[e._v("按照惯例，ECMAScript 标识符使用驼峰大小写形式，即第一个单词的首字母小写，后面每个单词的首字母大写，如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("firstSecond\nmyCar\ndoSomethingImportant\n")])])]),a("p",[e._v("虽然这种写法并不是强制性的，但因为这种形式跟 ECMAScript 内置函数和对象的命名方式一致，所以算是最佳实践。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　关键字、保留字、"),a("code",[e._v("true")]),e._v("、"),a("code",[e._v("false")]),e._v("和"),a("code",[e._v("null")]),e._v("不能作为标识符。具体内容请参考 3.2 节。")])]),e._v(" "),a("h3",{attrs:{id:"_3-1-3-注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-注释"}},[e._v("#")]),e._v(" 3.1.3 　注释")]),e._v(" "),a("p",[e._v("ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 单行注释\n")])])]),a("p",[e._v("块注释以一个斜杠和一个星号（"),a("code",[e._v("/*")]),e._v("）开头，以它们的反向组合（"),a("code",[e._v("*/")]),e._v("）结尾，如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/* 这是多行\n注释 */\n")])])]),a("h3",{attrs:{id:"_3-1-4-严格模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-严格模式"}},[e._v("#")]),e._v(" 3.1.4 　严格模式")]),e._v(" "),a("p",[e._v("ECMAScript 5 增加了严格模式（strict mode）的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。要对整个脚本启用严格模式，在脚本开头加上这一行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"use strict";\n')])])]),a("p",[e._v("虽然看起来像个没有赋值给任何变量的字符串，但它其实是一个预处理指令。任何支持的 JavaScript 引擎看到它都会切换到严格模式。选择这种语法形式的目的是不破坏 ECMAScript 3 语法。")]),e._v(" "),a("p",[e._v("也可以单独指定一个函数在严格模式下执行，只要把这个预处理指令放到函数体开头即可：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function doSomething() {\n  "use strict";\n  // 函数体\n}\n')])])]),a("p",[e._v("严格模式会影响 JavaScript 执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。")]),e._v(" "),a("h3",{attrs:{id:"_3-1-5-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-语句"}},[e._v("#")]),e._v(" 3.1.5 　语句")]),e._v(" "),a("p",[e._v("ECMAScript 中的语句以分号结尾。省略分号意味着由解析器确定语句在哪里结尾，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let sum = a + b      // 没有分号也有效，但不推荐\nlet diff = a - b;    // 加分号有效，推荐\n")])])]),a("p",[e._v("即使语句末尾的分号不是必需的，也应该加上。记着加分号有助于防止省略造成的问题，比如可以避免输入内容不完整。此外，加分号也便于开发者通过删除空行来压缩代码（如果没有结尾的分号，只删除空行，则会导致语法错误）。加分号也有助于在某些情况下提升性能，因为解析器会尝试在合适的位置补上分号以纠正语法错误。")]),e._v(" "),a("p",[e._v("多条语句可以合并到一个 C 语言风格的代码块中。代码块由一个左花括号（"),a("code",[e._v("{")]),e._v("）标识开始，一个右花括号（"),a("code",[e._v("}")]),e._v("）标识结束：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (test) {\n  test = false;\n  console.log(test);\n}\n")])])]),a("p",[e._v("if 之类的控制语句只在执行多条语句时要求必须有代码块。不过，最佳实践是始终在控制语句中使用代码块，即使要执行的只有一条语句，如下例所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 有效，但容易导致错误，应该避免\nif (test)\n  console.log(test);\n\n// 推荐\nif (test) {  console.log(test);\n}\n")])])]),a("p",[e._v("在控制语句中使用代码块可以让内容更清晰，在需要修改代码时也可以减少出错的可能性。")]),e._v(" "),a("h2",{attrs:{id:"_3-2-关键字与保留字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-关键字与保留字"}},[e._v("#")]),e._v(" 3.2 　关键字与保留字")]),e._v(" "),a("p",[e._v("ECMA-262 描述了一组保留的"),a("strong",[e._v("关键字")]),e._v("，这些关键字有特殊用途，比如表示控制语句的开始和结束，或者执行特定的操作。按照规定，保留的关键字不能用作标识符或属性名。ECMA-262 第 6 版规定的所有关键字如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("break       do          in            typeof\ncase        else        instanceof    var\ncatch       export      new           void\nclass       extends     return        while\nconst       finally     super         with\ncontinue    for         switch        yield\ndebugger    function    this\ndefault     if          throw\ndelete      import      try\n")])])]),a("p",[e._v("规范中也描述了一组"),a("strong",[e._v("未来的保留字")]),e._v("，同样不能用作标识符或属性名。虽然保留字在语言中没有特定用途，但它们是保留给将来做关键字用的。")]),e._v(" "),a("p",[e._v("以下是 ECMA-262 第 6 版为将来保留的所有词汇。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("始终保留:\n\nenum\n\n\n严格模式下保留:\n\nimplements  package     public\ninterface   protected   static\nlet         private\n\n\n模块代码中保留:\n\nawait\n")])])]),a("p",[e._v("这些词汇不能用作标识符，但现在还可以用作对象的属性名。一般来说，最好还是不要使用关键字和保留字作为标识符和属性名，以确保兼容过去和未来的 ECMAScript 版本。")]),e._v(" "),a("h2",{attrs:{id:"_3-3-变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-变量"}},[e._v("#")]),e._v(" 3.3 　变量")]),e._v(" "),a("p",[e._v("ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量："),a("code",[e._v("var")]),e._v("、"),a("code",[e._v("const")]),e._v("和"),a("code",[e._v("let")]),e._v("。其中，"),a("code",[e._v("var")]),e._v("在 ECMAScript 的所有版本中都可以使用，而"),a("code",[e._v("const")]),e._v("和"),a("code",[e._v("let")]),e._v("只能在 ECMAScript 6 及更晚的版本中使用。")]),e._v(" "),a("h3",{attrs:{id:"_3-3-1-var关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-var关键字"}},[e._v("#")]),e._v(" 3.3.1 　"),a("code",[e._v("var")]),e._v("关键字")]),e._v(" "),a("p",[e._v("要定义变量，可以使用"),a("code",[e._v("var")]),e._v("操作符（注意"),a("code",[e._v("var")]),e._v("是一个关键字），后跟变量名（即标识符，如前所述）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var message;\n")])])]),a("p",[e._v("这行代码定义了一个名为"),a("code",[e._v("message")]),e._v("的变量，可以用它保存任何类型的值。（不初始化的情况下，变量会保存一个特殊值"),a("code",[e._v("undefined")]),e._v("，下一节讨论数据类型时会谈到。）ECMAScript 实现变量初始化，因此可以同时定义变量并设置它的值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var message = "hi";\n')])])]),a("p",[e._v("这里，"),a("code",[e._v("message")]),e._v("被定义为一个保存字符串值"),a("code",[e._v("hi")]),e._v("的变量。像这样初始化变量不会将它标识为字符串类型，只是一个简单的赋值而已。随后，不仅可以改变保存的值，也可以改变值的类型：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var message = "hi";\nmessage = 100;  // 合法，但不推荐\n')])])]),a("p",[e._v("在这个例子中，变量"),a("code",[e._v("message")]),e._v("首先被定义为一个保存字符串值"),a("code",[e._v("hi")]),e._v("的变量，然后又被重写为保存了数值 100。虽然不推荐改变变量保存值的类型，但这在 ECMAScript 中是完全有效的。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("var 声明作用域")])]),e._v(" "),a("p",[e._v("关键的问题在于，使用"),a("code",[e._v("var")]),e._v("操作符定义的变量会成为包含它的函数的局部变量。比如，使用"),a("code",[e._v("var")]),e._v("在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function test() {\n  var message = "hi"; // 局部变量\n}\ntest();\nconsole.log(message); // 出错！\n')])])]),a("p",[e._v("这里，"),a("code",[e._v("message")]),e._v("变量是在函数内部使用"),a("code",[e._v("var")]),e._v("定义的。函数叫"),a("code",[e._v("test()")]),e._v("，调用它会创建这个变量并给它赋值。调用之后变量随即被销毁，因此示例中的最后一行会导致错误。不过，在函数内定义变量时省略"),a("code",[e._v("var")]),e._v("操作符，可以创建一个全局变量：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function test() {\n  message = "hi";     // 全局变量\n}\ntest();\nconsole.log(message); // "hi"\n')])])]),a("p",[e._v("去掉之前的"),a("code",[e._v("var")]),e._v("操作符之后，"),a("code",[e._v("message")]),e._v("就变成了全局变量。只要调用一次函数"),a("code",[e._v("test()")]),e._v("，就会定义这个变量，并且可以在函数外部访问到。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　虽然可以通过省略"),a("code",[e._v("var")]),e._v("操作符定义全局变量，但不推荐这么做。在局部作用域中定义的全局变量很难维护，也会造成困惑。这是因为不能一下子断定省略"),a("code",[e._v("var")]),e._v("是不是有意而为之。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出"),a("code",[e._v("ReferenceError")]),e._v("。")])]),e._v(" "),a("p",[e._v("如果需要定义多个变量，可以在一条语句中用逗号分隔每个变量（及可选的初始化）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var message = "hi",\n    found = false,\n    age = 29;\n')])])]),a("p",[e._v("这里定义并初始化了 3 个变量。因为 ECMAScript 是松散类型的，所以使用不同数据类型初始化的变量可以用一条语句来声明。插入换行和空格缩进并不是必需的，但这样有利于阅读理解。")]),e._v(" "),a("p",[e._v("在严格模式下，不能定义名为"),a("code",[e._v("eval")]),e._v("和"),a("code",[e._v("arguments")]),e._v("的变量，否则会导致语法错误。")])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("var 声明提升")])]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("var")]),e._v("时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function foo() {\n  console.log(age);\n  var age = 26;\n}\nfoo();  // undefined\n")])])]),a("p",[e._v("之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function foo() {\n  var age;\n  console.log(age);\n  age = 26;\n}\nfoo();  // undefined\n")])])]),a("p",[e._v("这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用"),a("code",[e._v("var")]),e._v("声明同一个变量也没有问题：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function foo() {\n  var age = 16;\n  var age = 26;\n  var age = 36;\n  console.log(age);\n}\nfoo();  // 36\n")])])])])]),e._v(" "),a("h3",{attrs:{id:"_3-3-2-let声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-let声明"}},[e._v("#")]),e._v(" 3.3.2 　"),a("code",[e._v("let")]),e._v("声明")]),e._v(" "),a("p",[a("code",[e._v("let")]),e._v("跟"),a("code",[e._v("var")]),e._v("的作用差不多，但有着非常重要的区别。最明显的区别是，"),a("code",[e._v("let")]),e._v("声明的范围是块作用域，而"),a("code",[e._v("var")]),e._v("声明的范围是函数作用域。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (true) {\n  var name = 'Matt';\n  console.log(name); // Matt\n}\nconsole.log(name);   // Matt\n\nif (true) {\n  let age = 26;\n  console.log(age);   // 26\n}\nconsole.log(age);     // ReferenceError: age没有定义\n")])])]),a("p",[e._v("在这里，"),a("code",[e._v("age")]),e._v("变量之所以不能在"),a("code",[e._v("if")]),e._v("块外部被引用，是因为它的作用域仅限于该块内部。块作用域是函数作用域的子集，因此适用于"),a("code",[e._v("var")]),e._v("的作用域限制同样也适用于"),a("code",[e._v("let")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("let")]),e._v("也不允许同一个块作用域中出现冗余声明。这样会导致报错：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name;\nvar name;\n\nlet age;\nlet age;  // SyntaxError；标识符age已经声明过了\n")])])]),a("p",[e._v("当然，JavaScript 引擎会记录用于变量声明的标识符及其所在的块作用域，因此嵌套使用相同的标识符不会报错，而这是因为同一个块中没有重复声明：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name = 'Nicholas';\nconsole.log(name);    // 'Nicholas'\nif (true) {\n  var name = 'Matt';\n  console.log(name);  // 'Matt'\n}\n\nlet age = 30;\nconsole.log(age);    // 30\nif (true) {\n  let age = 26;\n  console.log(age);  // 26\n}\n")])])]),a("p",[e._v("对声明冗余报错不会因混用"),a("code",[e._v("let")]),e._v("和"),a("code",[e._v("var")]),e._v("而受影响。这两个关键字声明的并不是不同类型的变量，它们只是指出变量在相关作用域如何存在。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name;\nlet name; // SyntaxError\n\nlet age;\nvar age; // SyntaxError\n")])])]),a("ol",[a("li",[a("p",[a("strong",[e._v("暂时性死区")])]),e._v(" "),a("p",[a("code",[e._v("let")]),e._v("与"),a("code",[e._v("var")]),e._v("的另一个重要的区别，就是"),a("code",[e._v("let")]),e._v("声明的变量不会在作用域中被提升。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// name会被提升\nconsole.log(name); // undefined\nvar name = 'Matt';\n\n// age不会被提升\nconsole.log(age); // ReferenceError：age没有定义\nlet age = 26;\n")])])]),a("p",[e._v("在解析代码时，JavaScript 引擎也会注意出现在块后面的"),a("code",[e._v("let")]),e._v("声明，只不过在此之前不能以任何方式来引用未声明的变量。在"),a("code",[e._v("let")]),e._v("声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在此阶段引用任何后面才声明的变量都会抛出"),a("code",[e._v("ReferenceError")]),e._v("。")])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("全局声明")])]),e._v(" "),a("p",[e._v("与"),a("code",[e._v("var")]),e._v("关键字不同，使用"),a("code",[e._v("let")]),e._v("在全局作用域中声明的变量不会成为"),a("code",[e._v("window")]),e._v("对象的属性（"),a("code",[e._v("var")]),e._v("声明的变量则会）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name = 'Matt';\nconsole.log(window.name); // 'Matt'\n\nlet age = 26;\nconsole.log(window.age);  // undefined\n")])])]),a("p",[e._v("不过，"),a("code",[e._v("let")]),e._v("声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免"),a("code",[e._v("SyntaxError")]),e._v("，必须确保页面不会重复声明同一个变量。")])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("条件声明")])]),e._v(" "),a("p",[e._v("在使用"),a("code",[e._v("var")]),e._v("声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。因为"),a("code",[e._v("let")]),e._v("的作用域是块，所以不可能检查前面是否已经使用"),a("code",[e._v("let")]),e._v("声明过同名变量，同时也就不可能在没有声明的情况下声明它。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script>\n  var name = 'Nicholas';\n  let age = 26;\n<\/script>\n\n<script>\n  // 假设脚本不确定页面中是否已经声明了同名变量\n  // 那它可以假设还没有声明过\n\n  var name = 'Matt';\n  // 这里没问题，因为可以被作为一个提升声明来处理\n  // 不需要检查之前是否声明过同名变量\n\n  let age = 36;\n  // 如果age之前声明过，这里会报错\n<\/script>\n")])])]),a("p",[e._v("使用"),a("code",[e._v("try")]),e._v("/"),a("code",[e._v("catch")]),e._v("语句或"),a("code",[e._v("typeof")]),e._v("操作符也不能解决，因为条件块中"),a("code",[e._v("let")]),e._v("声明的作用域仅限于该块。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script>\n  let name = 'Nicholas';\n  let age = 36;\n<\/script>\n\n<script>\n  // 假设脚本不确定页面中是否已经声明了同名变量\n  // 那它可以假设还没有声明过\n\n  if (typeof name === 'undefined') {\n    let name;\n  }\n  // name被限制在if {} 块的作用域内\n  // 因此这个赋值形同全局赋值\n  name = 'Matt';\n\n  try (age) {\n    // 如果age没有声明过，则会报错\n  }\n  catch(error) {\n    let age;\n  }\n  // age被限制在catch {}块的作用域内\n  // 因此这个赋值形同全局赋值\n  age = 26;\n<\/script>\n")])])]),a("p",[e._v("为此，对于"),a("code",[e._v("let")]),e._v("这个新的 ES6 声明关键字，不能依赖条件声明模式。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　不能使用"),a("code",[e._v("let")]),e._v("进行条件式声明是件好事，因为条件声明是一种反模式，它让程序变得更难理解。如果你发现自己在使用这个模式，那一定有更好的替代方式。")])])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("for 循环中的 let 声明")])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("let")]),e._v("出现之前，"),a("code",[e._v("for")]),e._v("循环定义的迭代变量会渗透到循环体外部：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (var i = 0; i < 5; ++i) {\n  // 循环逻辑\n}\nconsole.log(i); // 5\n")])])]),a("p",[e._v("改成使用"),a("code",[e._v("let")]),e._v("之后，这个问题就消失了，因为迭代变量的作用域仅限于"),a("code",[e._v("for")]),e._v("循环块内部：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (let i = 0; i < 5; ++i) {\n  // 循环逻辑\n}\nconsole.log(i); // ReferenceError: i没有定义\n")])])]),a("p",[e._v("在使用"),a("code",[e._v("var")]),e._v("的时候，最常见的问题就是对迭代变量的奇特声明和修改：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (var i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 你可能以为会输出0、1、2、3、4\n// 实际上会输出5、5、5、5、5\n")])])]),a("p",[e._v("之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的"),a("code",[e._v("i")]),e._v("都是同一个变量，因而输出的都是同一个最终值。")]),e._v(" "),a("p",[e._v("而在使用"),a("code",[e._v("let")]),e._v("声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。每个"),a("code",[e._v("setTimeout")]),e._v("引用的都是不同的变量实例，所以"),a("code",[e._v("console.log")]),e._v("输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (let i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 会输出0、1、2、3、4\n")])])]),a("p",[e._v("这种每次迭代声明一个独立变量实例的行为适用于所有风格的"),a("code",[e._v("for")]),e._v("循环，包括"),a("code",[e._v("for-in")]),e._v("和"),a("code",[e._v("for-of")]),e._v("循环。")])])]),e._v(" "),a("h3",{attrs:{id:"_3-3-3-const声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-const声明"}},[e._v("#")]),e._v(" 3.3.3 　"),a("code",[e._v("const")]),e._v("声明")]),e._v(" "),a("p",[a("code",[e._v("const")]),e._v("的行为与"),a("code",[e._v("let")]),e._v("基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改"),a("code",[e._v("const")]),e._v("声明的变量会导致运行时错误。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const age = 26;\nage = 36; // TypeError: 给常量赋值\n// const也不允许重复声明\nconst name = 'Matt';\nconst name = 'Nicholas'; // SyntaxError\n\n// const声明的作用域也是块\nconst name = 'Matt';\nif (true) {\n  const name = 'Nicholas';\n}\nconsole.log(name); // Matt\n")])])]),a("p",[a("code",[e._v("const")]),e._v("声明的限制只适用于它指向的变量的引用。换句话说，如果"),a("code",[e._v("const")]),e._v("变量引用的是一个对象，那么修改这个对象内部的属性并不违反"),a("code",[e._v("const")]),e._v("的限制。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const person = {};\nperson.name = 'Matt';  // ok\n")])])]),a("p",[e._v("即使 JavaScript 引擎会为"),a("code",[e._v("for")]),e._v("循环中的"),a("code",[e._v("let")]),e._v("声明分别创建独立的变量实例，而且"),a("code",[e._v("const")]),e._v("变量跟"),a("code",[e._v("let")]),e._v("变量很相似，也不能用"),a("code",[e._v("const")]),e._v("来声明迭代变量（因为迭代变量会自增）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (const i = 0; i < 10; ++i) {} // TypeError：给常量赋值\n")])])]),a("p",[e._v("不过，如果你只想用"),a("code",[e._v("const")]),e._v("声明一个不会被修改的"),a("code",[e._v("for")]),e._v("循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对"),a("code",[e._v("for-of")]),e._v("和"),a("code",[e._v("for-in")]),e._v("循环特别有意义：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let i = 0;\nfor (const j = 7; i < 5; ++i) {\n  console.log(j);\n}\n// 7, 7, 7, 7, 7\n\nfor (const key in {a: 1, b: 2}) {\n  console.log(key);\n}\n// a, b\n\nfor (const value of [1,2,3,4,5]) {\n  console.log(value);\n}\n// 1, 2, 3, 4, 5\n")])])]),a("h3",{attrs:{id:"_3-3-4-声明风格及最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-声明风格及最佳实践"}},[e._v("#")]),e._v(" 3.3.4 　声明风格及最佳实践")]),e._v(" "),a("p",[e._v("ECMAScript 6 增加"),a("code",[e._v("let")]),e._v("和"),a("code",[e._v("const")]),e._v("从客观上为这门语言更精确地声明作用域和语义提供了更好的支持。行为怪异的"),a("code",[e._v("var")]),e._v("所造成的各种问题，已经让 JavaScript 社区为之苦恼了很多年。随着这两个新关键字的出现，新的有助于提升代码质量的最佳实践也逐渐显现。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("不使用 var")])]),e._v(" "),a("p",[e._v("有了"),a("code",[e._v("let")]),e._v("和"),a("code",[e._v("const")]),e._v("，大多数开发者会发现自己不再需要"),a("code",[e._v("var")]),e._v("了。限制自己只使用"),a("code",[e._v("let")]),e._v("和"),a("code",[e._v("const")]),e._v("有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。")])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("const 优先，let 次之")])]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("const")]),e._v("声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用"),a("code",[e._v("const")]),e._v("来声明变量，只在提前知道未来会有修改时，再使用"),a("code",[e._v("let")]),e._v("。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。")])])]),e._v(" "),a("h2",{attrs:{id:"_3-4-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-数据类型"}},[e._v("#")]),e._v(" 3.4 　数据类型")]),e._v(" "),a("p",[e._v("ECMAScript 有 6 种简单数据类型（也称为"),a("strong",[e._v("原始类型")]),e._v("）："),a("code",[e._v("Undefined")]),e._v("、"),a("code",[e._v("Null")]),e._v("、"),a("code",[e._v("Boolean")]),e._v("、"),a("code",[e._v("Number")]),e._v("、"),a("code",[e._v("String")]),e._v("和"),a("code",[e._v("Symbol")]),e._v("。"),a("code",[e._v("Symbol")]),e._v("（符号）是 ECMAScript 6 新增的。还有一种复杂数据类型叫"),a("code",[e._v("Object")]),e._v("（对象）。"),a("code",[e._v("Object")]),e._v("是一种无序名值对的集合。因为在 ECMAScript 中不能定义自己的数据类型，所有值都可以用上述 7 种数据类型之一来表示。只有 7 种数据类型似乎不足以表示全部数据。但 ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。")]),e._v(" "),a("h3",{attrs:{id:"_3-4-1-typeof操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-typeof操作符"}},[e._v("#")]),e._v(" 3.4.1 　"),a("code",[e._v("typeof")]),e._v("操作符")]),e._v(" "),a("p",[e._v("因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。"),a("code",[e._v("typeof")]),e._v("操作符就是为此而生的。对一个值使用"),a("code",[e._v("typeof")]),e._v("操作符会返回下列字符串之一：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v('"undefined"')]),e._v("表示值未定义；")]),e._v(" "),a("li",[a("code",[e._v('"boolean"')]),e._v("表示值为布尔值；")]),e._v(" "),a("li",[a("code",[e._v('"string"')]),e._v("表示值为字符串；")]),e._v(" "),a("li",[a("code",[e._v('"number"')]),e._v("表示值为数值；")]),e._v(" "),a("li",[a("code",[e._v('"object"')]),e._v("表示值为对象（而不是函数）或"),a("code",[e._v("null")]),e._v("；")]),e._v(" "),a("li",[a("code",[e._v('"function"')]),e._v("表示值为函数；")]),e._v(" "),a("li",[a("code",[e._v('"symbol"')]),e._v("表示值为符号。")])]),e._v(" "),a("p",[e._v("下面是使用"),a("code",[e._v("typeof")]),e._v("操作符的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "some string";\nconsole.log(typeof message);    // "string"\nconsole.log(typeof(message));   // "string"\nconsole.log(typeof 95);         // "number"\n')])])]),a("p",[e._v("在这个例子中，我们把一个变量（"),a("code",[e._v("message")]),e._v("）和一个数值字面量传给了"),a("code",[e._v("typeof")]),e._v("操作符。注意，因为"),a("code",[e._v("typeof")]),e._v("是一个操作符而不是函数，所以不需要参数（但可以使用参数）。")]),e._v(" "),a("p",[e._v("注意"),a("code",[e._v("typeof")]),e._v("在某些情况下返回的结果可能会让人费解，但技术上讲还是正确的。比如，调用"),a("code",[e._v("typeof null")]),e._v("返回的是"),a("code",[e._v('"object"')]),e._v("。这是因为特殊值"),a("code",[e._v("null")]),e._v("被认为是一个对空对象的引用。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　严格来讲，函数在 ECMAScript 中被认为是对象，并不代表一种数据类型。可是，函数也有自己特殊的属性。为此，就有必要通过"),a("code",[e._v("typeof")]),e._v("操作符来区分函数和其他对象。")])]),e._v(" "),a("h3",{attrs:{id:"_3-4-2-undefined类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-undefined类型"}},[e._v("#")]),e._v(" 3.4.2 　"),a("code",[e._v("Undefined")]),e._v("类型")]),e._v(" "),a("p",[a("code",[e._v("Undefined")]),e._v("类型只有一个值，就是特殊值"),a("code",[e._v("undefined")]),e._v("。当使用"),a("code",[e._v("var")]),e._v("或"),a("code",[e._v("let")]),e._v("声明了变量但没有初始化时，就相当于给变量赋予了"),a("code",[e._v("undefined")]),e._v("值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let message;\nconsole.log(message == undefined); // true\n")])])]),a("p",[e._v("在这个例子中，变量"),a("code",[e._v("message")]),e._v("在声明的时候并未初始化。而在比较它和"),a("code",[e._v("undefined")]),e._v("的字面值时，两者是相等的。这个例子等同于如下示例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let message = undefined;\nconsole.log(message == undefined); // true\n")])])]),a("p",[e._v("这里，变量"),a("code",[e._v("message")]),e._v("显式地以"),a("code",[e._v("undefined")]),e._v("来初始化。但这是不必要的，因为默认情况下，任何未经初始化的变量都会取得"),a("code",[e._v("undefined")]),e._v("值。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　一般来说，永远不用显式地给某个变量设置"),a("code",[e._v("undefined")]),e._v("值。字面值"),a("code",[e._v("undefined")]),e._v("主要用于比较，而且在 ECMA-262 第 3 版之前是不存在的。增加这个特殊值的目的就是为了正式明确空对象指针（"),a("code",[e._v("null")]),e._v("）和未初始化变量的区别。")])]),e._v(" "),a("p",[e._v("注意，包含"),a("code",[e._v("undefined")]),e._v("值的变量跟未定义变量是有区别的。请看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message;    // 这个变量被声明了，只是值为undefined\n\n// 确保没有声明过这个变量\n// let age\n\nconsole.log(message); // "undefined"\nconsole.log(age);     // 报错\n')])])]),a("p",[e._v("在上面的例子中，第一个"),a("code",[e._v("console.log")]),e._v("会指出变量"),a("code",[e._v("message")]),e._v("的值，即"),a("code",[e._v('"undefined"')]),e._v("。而第二个"),a("code",[e._v("console.log")]),e._v("要输出一个未声明的变量"),a("code",[e._v("age")]),e._v("的值，因此会导致报错。对未声明的变量，只能执行一个有用的操作，就是对它调用"),a("code",[e._v("typeof")]),e._v("。（对未声明的变量调用"),a("code",[e._v("delete")]),e._v("也不会报错，但这个操作没什么用，实际上在严格模式下会抛出错误。）")]),e._v(" "),a("p",[e._v("在对未初始化的变量调用"),a("code",[e._v("typeof")]),e._v("时，返回的结果是"),a("code",[e._v('"undefined"')]),e._v("，但对未声明的变量调用它时，返回的结果还是"),a("code",[e._v('"undefined"')]),e._v("，这就有点让人看不懂了。比如下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message; // 这个变量被声明了，只是值为undefined\n\n// make sure this variable isn\'t declared\n// let age\n\nconsole.log(typeof message); // "undefined"\nconsole.log(typeof age);     // "undefined"\n')])])]),a("p",[e._v("无论是声明还是未声明，"),a("code",[e._v("typeof")]),e._v("返回的都是字符串"),a("code",[e._v('"undefined"')]),e._v("。逻辑上讲这是对的，因为虽然严格来讲这两个变量存在根本性差异，但它对任何一个变量都不可能执行什么真正的操作。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　即使未初始化的变量会被自动赋予"),a("code",[e._v("undefined")]),e._v("值，但我们仍然建议在声明变量的同时进行初始化。这样，当"),a("code",[e._v("typeof")]),e._v("返回"),a("code",[e._v('"undefined"')]),e._v("时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。")])]),e._v(" "),a("p",[a("code",[e._v("undefined")]),e._v("是一个假值。因此，如果需要，可以用更简洁的方式检测它。不过要记住，也有很多其他可能的值同样是假值。所以一定要明确自己想检测的就是"),a("code",[e._v("undefined")]),e._v("这个字面值，而不仅仅是假值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let message; // 这个变量被声明了，只是值为undefined\n// age没有声明\n\nif (message) {\n  // 这个块不会执行\n}\n\nif (!message) {\n  // 这个块会执行\n}\n\nif (age) {\n  // 这里会报错\n}\n")])])]),a("h3",{attrs:{id:"_3-4-3-null类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-null类型"}},[e._v("#")]),e._v(" 3.4.3 　"),a("code",[e._v("Null")]),e._v("类型")]),e._v(" "),a("p",[a("code",[e._v("Null")]),e._v("类型同样只有一个值，即特殊值"),a("code",[e._v("null")]),e._v("。逻辑上讲，"),a("code",[e._v("null")]),e._v("值表示一个空对象指针，这也是给"),a("code",[e._v("typeof")]),e._v("传一个"),a("code",[e._v("null")]),e._v("会返回"),a("code",[e._v('"object"')]),e._v("的原因：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let car = null;\nconsole.log(typeof car);  // "object"\n')])])]),a("p",[e._v("在定义将来要保存对象值的变量时，建议使用"),a("code",[e._v("null")]),e._v("来初始化，不要使用其他值。这样，只要检查这个变量的值是不是"),a("code",[e._v("null")]),e._v("就可以知道这个变量是否在后来被重新赋予了一个对象的引用，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (car != null) {\n  // car是一个对象的引用\n}\n")])])]),a("p",[a("code",[e._v("undefined")]),e._v("值是由"),a("code",[e._v("null")]),e._v("值派生而来的，因此 ECMA-262 将它们定义为表面上相等，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(null == undefined);  // true\n")])])]),a("p",[e._v("用等于操作符（"),a("code",[e._v("==")]),e._v("）比较"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("始终返回"),a("code",[e._v("true")]),e._v("。但要注意，这个操作符会为了比较而转换它的操作数（本章后面将详细介绍）。")]),e._v(" "),a("p",[e._v("即使"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("有关系，它们的用途也是完全不一样的。如前所述，永远不必显式地将变量值设置为"),a("code",[e._v("undefined")]),e._v("。但"),a("code",[e._v("null")]),e._v("不是这样的。任何时候，只要变量要保存对象，而当时又没有那个对象可保存，就要用"),a("code",[e._v("null")]),e._v("来填充该变量。这样就可以保持"),a("code",[e._v("null")]),e._v("是空对象指针的语义，并进一步将其与"),a("code",[e._v("undefined")]),e._v("区分开来。")]),e._v(" "),a("p",[a("code",[e._v("null")]),e._v("是一个假值。因此，如果需要，可以用更简洁的方式检测它。不过要记住，也有很多其他可能的值同样是假值。所以一定要明确自己想检测的就是"),a("code",[e._v("null")]),e._v("这个字面值，而不仅仅是假值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let message = null;\nlet age;\n\nif (message) {\n  // 这个块不会执行\n}\n\nif (!message) {\n  // 这个块会执行\n}\n\nif (age) {\n  // 这个块不会执行\n}\n\nif (!age) {\n  // 这个块会执行\n}\n")])])]),a("h3",{attrs:{id:"_3-4-4-boolean类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-4-boolean类型"}},[e._v("#")]),e._v(" 3.4.4 　"),a("code",[e._v("Boolean")]),e._v("类型")]),e._v(" "),a("p",[a("code",[e._v("Boolean")]),e._v("（布尔值）类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值："),a("code",[e._v("true")]),e._v("和"),a("code",[e._v("false")]),e._v("。这两个布尔值不同于数值，因此"),a("code",[e._v("true")]),e._v("不等于 1，"),a("code",[e._v("false")]),e._v("不等于 0。下面是给变量赋布尔值的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let found = true;\nlet lost = false;\n")])])]),a("p",[e._v("注意，布尔值字面量"),a("code",[e._v("true")]),e._v("和"),a("code",[e._v("false")]),e._v("是区分大小写的，因此"),a("code",[e._v("True")]),e._v("和"),a("code",[e._v("False")]),e._v("（及其他大小混写形式）是有效的标识符，但不是布尔值。")]),e._v(" "),a("p",[e._v("虽然布尔值只有两个，但所有其他 ECMAScript 类型的值都有相应布尔值的等价形式。要将一个其他类型的值转换为布尔值，可以调用特定的"),a("code",[e._v("Boolean()")]),e._v("转型函数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "Hello world!";\nlet messageAsBoolean = Boolean(message);\n')])])]),a("p",[e._v("在这个例子中，字符串"),a("code",[e._v("message")]),e._v("会被转换为布尔值并保存在变量"),a("code",[e._v("messageAsBoolean")]),e._v("中。"),a("code",[e._v("Boolean()")]),e._v("转型函数可以在任意类型的数据上调用，而且始终返回一个布尔值。什么值能转换为"),a("code",[e._v("true")]),e._v("或"),a("code",[e._v("false")]),e._v("的规则取决于数据类型和实际的值。下表总结了不同类型与布尔值之间的转换规则。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("数据类型")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("转换为"),a("code",[e._v("true")]),e._v("的值")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("转换为"),a("code",[e._v("false")]),e._v("的值")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Boolean")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("String")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("非空字符串")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('""')]),e._v("（空字符串）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Number")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("非零数值（包括无穷值）")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("0")]),e._v("、"),a("code",[e._v("NaN")]),e._v("（参见后面的相关内容）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Object")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("任意对象")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("null")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("Undefined")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("N/A")]),e._v("（不存在）")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("undefined")])])])])]),e._v(" "),a("p",[e._v("理解以上转换非常重要，因为像"),a("code",[e._v("if")]),e._v("等流控制语句会自动执行其他类型值到布尔值的转换，例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let message = "Hello world!";\nif (message) {\n  console.log("Value is true");\n}\n')])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("console.log")]),e._v("会输出字符串"),a("code",[e._v('"Value is true"')]),e._v("，因为字符串"),a("code",[e._v("message")]),e._v("会被自动转换为等价的布尔值"),a("code",[e._v("true")]),e._v("。由于存在这种自动转换，理解流控制语句中使用的是什么变量就非常重要。错误地使用对象而不是布尔值会明显改变应用程序的执行流。")]),e._v(" "),a("h3",{attrs:{id:"_3-4-5-number类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-5-number类型"}},[e._v("#")]),e._v(" 3.4.5 　"),a("code",[e._v("Number")]),e._v("类型")]),e._v(" "),a("p",[e._v("ECMAScript 中最有意思的数据类型或许就是"),a("code",[e._v("Number")]),e._v("了。"),a("code",[e._v("Number")]),e._v("类型使用 IEEE 754 格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。")]),e._v(" "),a("p",[e._v("最基本的数值字面量格式是十进制整数，直接写出来即可：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let intNum = 55;  // 整数\n")])])]),a("p",[e._v("整数也可以用八进制（以 8 为基数）或十六进制（以 16 为基数）字面量表示。对于八进制字面量，第一个数字必须是零（0），然后是相应的八进制数字（数值 0~7）。如果字面量中包含的数字超出了应有的范围，就会忽略前缀的零，后面的数字序列会被当成十进制数，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let octalNum1 = 070;  // 八进制的56\nlet octalNum2 = 079;  // 无效的八进制值，当成79处理\nlet octalNum3 = 08;   // 无效的八进制值，当成8处理\n")])])]),a("p",[e._v("八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误。"),a("strong",[e._v("1")])]),e._v(" "),a("p",[a("strong",[e._v("1")]),e._v("ECMAScript 2015 或 ES6 中的八进制值通过前缀"),a("code",[e._v("0o")]),e._v("来表示；严格模式下，前缀"),a("code",[e._v("0")]),e._v("会被视为语法错误，如果要表示八进制值，应该使用前缀"),a("code",[e._v("0o")]),e._v("。——译者注")]),e._v(" "),a("p",[e._v("要创建十六进制字面量，必须让真正的数值前缀"),a("code",[e._v("0x")]),e._v("（区分大小写），然后是十六进制数字（0~9 以及 A~F）。十六进制数字中的字母大小写均可。下面是几个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let hexNum1 = 0xA;   // 十六进制10\nlet hexNum2 = 0x1f;  // 十六进制31\n")])])]),a("p",[e._v("使用八进制和十六进制格式创建的数值在所有数学操作中都被视为十进制数值。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　由于 JavaScript 保存数值的方式，实际中可能存在正零（+0）和负零（-0）。正零和负零在所有情况下都被认为是等同的，这里特地说明一下。")])]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("浮点值")])]),e._v(" "),a("p",[e._v("要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let floatNum1 = 1.1;\nlet floatNum2 = 0.1;\nlet floatNum3 = .1;   // 有效，但不推荐\n")])])]),a("p",[e._v("因为存储浮点值使用的内存空间是存储整数值的两倍，所以 ECMAScript 总是想方设法把值转换为整数。在小数点后面没有数字的情况下，数值就会变成整数。类似地，如果数值本身就是整数，只是小数点后面跟着 0（如 1.0），那它也会被转换为整数，如下例所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let floatNum1 = 1.;   // 小数点后面没有数字，当成整数1处理\nlet floatNum2 = 10.0; // 小数点后面是零，当成整数10处理\n")])])]),a("p",[e._v("对于非常大或非常小的数值，浮点值可以用科学记数法来表示。科学记数法用于表示一个应该乘以 10 的给定次幂的数值。ECMAScript 中科学记数法的格式要求是一个数值（整数或浮点数）后跟一个大写或小写的字母 e，再加上一个要乘的 10 的多少次幂。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let floatNum = 3.125e7; // 等于31250000\n")])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("floatNum")]),e._v("等于 31 250 000，只不过科学记数法显得更简洁。这种表示法实际上相当于说：“以 3.125 作为系数，乘以 10 的 7 次幂。”")]),e._v(" "),a("p",[e._v("科学记数法也可以用于表示非常小的数值，例如 0.000 000 000 000 000 03。这个数值用科学记数法可以表示为 3e-17。默认情况下，ECMAScript 会将小数点后至少包含 6 个零的浮点值转换为科学记数法（例如，0.000 000 3 会被转换为 3e-7）。")]),e._v(" "),a("p",[e._v("浮点值的精确度最高可达 17 位小数，但在算术计算中远不如整数精确。例如，0.1 加 0.2 得到的不是 0.3，而是 0.300 000 000 000 000 04。由于这种微小的舍入错误，导致很难测试特定的浮点值。比如下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (a + b == 0.3) {      // 别这么干！\n  console.log("You got 0.3.");\n}\n')])])]),a("p",[e._v("这里检测两个数值之和是否等于 0.3。如果两个数值分别是 0.05 和 0.25，或者 0.15 和 0.15，那没问题。但如果是 0.1 和 0.2，如前所述，测试将失败。因此永远不要测试某个特定的浮点值。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　之所以存在这种舍入错误，是因为使用了 IEEE 754 数值，这种错误并非 ECMAScript 所独有。其他使用相同格式的语言也有这个问题。")])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("值的范围")])]),e._v(" "),a("p",[e._v("由于内存的限制，ECMAScript 并不支持表示这个世界上的所有数值。ECMAScript 可以表示的最小数值保存在"),a("code",[e._v("Number.MIN_VALUE")]),e._v("中，这个值在多数浏览器中是 5e-324；可以表示的最大数值保存在"),a("code",[e._v("Number.MAX_VALUE")]),e._v("中，这个值在多数浏览器中是 1.797 693 134 862 315 7e+308。如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的"),a("code",[e._v("Infinity")]),e._v("（无穷）值。任何无法表示的负数以"),a("code",[e._v("-Infinity")]),e._v("（负无穷大）表示，任何无法表示的正数以"),a("code",[e._v("Infinity")]),e._v("（正无穷大）表示。")]),e._v(" "),a("p",[e._v("如果计算返回正"),a("code",[e._v("Infinity")]),e._v("或负"),a("code",[e._v("Infinity")]),e._v("，则该值将不能再进一步用于任何计算。这是因为"),a("code",[e._v("Infinity")]),e._v("没有可用于计算的数值表示形式。要确定一个值是不是有限大（即介于 JavaScript 能表示的最小值和最大值之间），可以使用"),a("code",[e._v("isFinite()")]),e._v("函数，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = Number.MAX_VALUE + Number.MAX_VALUE;\nconsole.log(isFinite(result));  // false\n")])])]),a("p",[e._v("虽然超出有限数值范围的计算并不多见，但总归还是有可能的。因此在计算非常大或非常小的数值时，有必要监测一下计算结果是否超出范围。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　使用"),a("code",[e._v("Number.NEGATIVE_INFINITY")]),e._v("和"),a("code",[e._v("Number.POSITIVE_INFINITY")]),e._v("也可以获取正、负"),a("code",[e._v("Infinity")]),e._v("。没错，这两个属性包含的值分别就是"),a("code",[e._v("-Infinity")]),e._v("和"),a("code",[e._v("Infinity")]),e._v("。")])])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("NaN")])]),e._v(" "),a("p",[e._v("有一个特殊的数值叫"),a("code",[e._v("NaN")]),e._v("，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用 0 除任意数值在其他语言中通常都会导致错误，从而中止代码执行。但在 ECMAScript 中，0、+0 或-0 相除会返回"),a("code",[e._v("NaN")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(0/0);    // NaN\nconsole.log(-0/+0);  // NaN\n")])])]),a("p",[e._v("如果分子是非 0 值，分母是有符号 0 或无符号 0，则会返回"),a("code",[e._v("Infinity")]),e._v("或"),a("code",[e._v("-Infinity")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(5/0);   // Infinity\nconsole.log(5/-0);  // -Infinity\n")])])]),a("p",[a("code",[e._v("NaN")]),e._v("有几个独特的属性。首先，任何涉及"),a("code",[e._v("NaN")]),e._v("的操作始终返回"),a("code",[e._v("NaN")]),e._v("（如"),a("code",[e._v("NaN/10")]),e._v("），在连续多步计算时这可能是个问题。其次，"),a("code",[e._v("NaN")]),e._v("不等于包括"),a("code",[e._v("NaN")]),e._v("在内的任何值。例如，下面的比较操作会返回"),a("code",[e._v("false")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(NaN == NaN); // false\n")])])]),a("p",[e._v("为此，ECMAScript 提供了"),a("code",[e._v("isNaN()")]),e._v("函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给"),a("code",[e._v("isNaN()")]),e._v("后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串"),a("code",[e._v('"10"')]),e._v("或布尔值。任何不能转换为数值的值都会导致这个函数返回"),a("code",[e._v("true")]),e._v("。举例如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('console.log(isNaN(NaN));     // true\nconsole.log(isNaN(10));      // false，10是数值\nconsole.log(isNaN("10"));    // false，可以转换为数值10\nconsole.log(isNaN("blue"));  // true，不可以转换为数值\nconsole.log(isNaN(true));    // false，可以转换为数值1\n')])])]),a("p",[e._v("上述的例子测试了 5 个不同的值。首先测试的是"),a("code",[e._v("NaN")]),e._v("本身，显然会返回"),a("code",[e._v("true")]),e._v("。接着测试了数值 10 和字符串"),a("code",[e._v('"10"')]),e._v("，都返回"),a("code",[e._v("false")]),e._v("，因为它们的数值都是 10。字符串"),a("code",[e._v('"blue"')]),e._v("不能转换为数值，因此函数返回"),a("code",[e._v("true")]),e._v("。布尔值"),a("code",[e._v("true")]),e._v("可以转换为数值 1，因此返回"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　虽然不常见，但"),a("code",[e._v("isNaN()")]),e._v("可以用于测试对象。此时，首先会调用对象的"),a("code",[e._v("valueOf()")]),e._v("方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用"),a("code",[e._v("toString()")]),e._v("方法，并测试其返回值。这通常是 ECMAScript 内置函数和操作符的工作方式，本章后面会讨论。")])])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("数值转换")])]),e._v(" "),a("p",[e._v("有 3 个函数可以将非数值转换为数值："),a("code",[e._v("Number()")]),e._v("、"),a("code",[e._v("parseInt()")]),e._v("和"),a("code",[e._v("parseFloat()")]),e._v("。"),a("code",[e._v("Number()")]),e._v("是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这 3 个函数执行的操作也不同。")]),e._v(" "),a("p",[a("code",[e._v("Number()")]),e._v("函数基于如下规则执行转换。")]),e._v(" "),a("ul",[a("li",[e._v("布尔值，"),a("code",[e._v("true")]),e._v("转换为 1，"),a("code",[e._v("false")]),e._v("转换为 0。")]),e._v(" "),a("li",[e._v("数值，直接返回。")]),e._v(" "),a("li",[a("code",[e._v("null")]),e._v("，返回 0。")]),e._v(" "),a("li",[a("code",[e._v("undefined")]),e._v("，返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("字符串，应用以下规则。\n"),a("ul",[a("li",[e._v("如果字符串包含数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值。因此，"),a("code",[e._v('Number("1")')]),e._v("返回 1，"),a("code",[e._v('Number("123")')]),e._v("返回 123，"),a("code",[e._v('Number("011")')]),e._v("返回 11（忽略前面的零）。")]),e._v(" "),a("li",[e._v("如果字符串包含有效的浮点值格式如"),a("code",[e._v('"1.1"')]),e._v("，则会转换为相应的浮点值（同样，忽略前面的零）。")]),e._v(" "),a("li",[e._v("如果字符串包含有效的十六进制格式如"),a("code",[e._v('"0xf"')]),e._v("，则会转换为与该十六进制值对应的十进制整数值。")]),e._v(" "),a("li",[e._v("如果是空字符串（不包含字符），则返回 0。")]),e._v(" "),a("li",[e._v("如果字符串包含除上述情况之外的其他字符，则返回"),a("code",[e._v("NaN")]),e._v("。")])])]),e._v(" "),a("li",[e._v("对象，调用"),a("code",[e._v("valueOf()")]),e._v("方法，并按照上述规则转换返回的值。如果转换结果是"),a("code",[e._v("NaN")]),e._v("，则调用"),a("code",[e._v("toString()")]),e._v("方法，再按照转换字符串的规则转换。")])]),e._v(" "),a("p",[e._v("从不同数据类型到数值的转换有时候会比较复杂，看一看"),a("code",[e._v("Number()")]),e._v("的转换规则就知道了。下面是几个具体的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = Number("Hello world!");  // NaN\nlet num2 = Number("");              // 0\nlet num3 = Number("000011");        // 11\nlet num4 = Number(true);            // 1\n')])])]),a("p",[e._v("可以看到，字符串"),a("code",[e._v('"Hello world"')]),e._v("转换之后是"),a("code",[e._v("NaN")]),e._v("，因为它找不到对应的数值。空字符串转换后是 0。字符串"),a("code",[e._v("000011")]),e._v("转换后是"),a("code",[e._v("11")]),e._v("，因为前面的零被忽略了。最后，"),a("code",[e._v("true")]),e._v("转换为 1。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　本章后面会讨论到的一元加操作符与"),a("code",[e._v("Number()")]),e._v("函数遵循相同的转换规则。")])]),e._v(" "),a("p",[e._v("考虑到用"),a("code",[e._v("Number()")]),e._v("函数转换字符串时相对复杂且有点反常规，通常在需要得到整数时可以优先使用"),a("code",[e._v("parseInt()")]),e._v("函数。"),a("code",[e._v("parseInt()")]),e._v("函数更专注于字符串是否包含数值模式。字符串最前面的空格会被忽略，从第一个非空格字符开始转换。如果第一个字符不是数值字符、加号或减号，"),a("code",[e._v("parseInt()")]),e._v("立即返回"),a("code",[e._v("NaN")]),e._v("。这意味着空字符串也会返回"),a("code",[e._v("NaN")]),e._v("（这一点跟"),a("code",[e._v("Number()")]),e._v("不一样，它返回 0）。如果第一个字符是数值字符、加号或减号，则继续依次检测每个字符，直到字符串末尾，或碰到非数值字符。比如，"),a("code",[e._v('"1234blue"')]),e._v("会被转换为 1234，因为"),a("code",[e._v('"blue"')]),e._v("会被完全忽略。类似地，"),a("code",[e._v('"22.5"')]),e._v("会被转换为 22，因为小数点不是有效的整数字符。")]),e._v(" "),a("p",[e._v("假设字符串中的第一个字符是数值字符，"),a("code",[e._v("parseInt()")]),e._v("函数也能识别不同的整数格式（十进制、八进制、十六进制）。换句话说，如果字符串以"),a("code",[e._v('"0x"')]),e._v("开头，就会被解释为十六进制整数。如果字符串以"),a("code",[e._v('"0"')]),e._v("开头，且紧跟着数值字符，就会被解释为八进制整数。")]),e._v(" "),a("p",[e._v("下面几个转换示例有助于理解上述规则：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = parseInt("1234blue");  // 1234\nlet num2 = parseInt("");          // NaN\nlet num3 = parseInt("0xA");       // 10，解释为十六进制整数\nlet num4 = parseInt(22.5);        // 22\nlet num5 = parseInt("70");        // 70，解释为十进制值\nlet num6 = parseInt("0xf");       // 15，解释为十六进制整数\n')])])]),a("p",[e._v("不同的数值格式很容易混淆，因此"),a("code",[e._v("parseInt()")]),e._v("也接收第二个参数，用于指定底数（进制数）。如果知道要解析的值是十六进制，那么可以传入 16 作为第二个参数，以便正确解析：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = parseInt("0xAF", 16); // 175\n')])])]),a("p",[e._v("事实上，如果提供了十六进制参数，那么字符串前面的"),a("code",[e._v('"0x"')]),e._v("可以省掉：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = parseInt("AF", 16);  // 175\nlet num2 = parseInt("AF");      // NaN\n')])])]),a("p",[e._v("在这个例子中，第一个转换是正确的，而第二个转换失败了。区别在于第一次传入了进制数作为参数，告诉"),a("code",[e._v("parseInt()")]),e._v("要解析的是一个十六进制字符串。而第二个转换检测到第一个字符就是非数值字符，随即自动停止并返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("p",[e._v("通过第二个参数，可以极大扩展转换后获得的结果类型。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = parseInt("10", 2);   // 2，按二进制解析\nlet num2 = parseInt("10", 8);   // 8，按八进制解析\nlet num3 = parseInt("10", 10);  // 10，按十进制解析\nlet num4 = parseInt("10", 16);  // 16，按十六进制解析\n')])])]),a("p",[e._v("因为不传底数参数相当于让"),a("code",[e._v("parseInt()")]),e._v("自己决定如何解析，所以为避免解析出错，建议始终传给它第二个参数。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　多数情况下解析的应该都是十进制数，此时第二个参数就要传入 10。")])]),e._v(" "),a("p",[a("code",[e._v("parseFloat()")]),e._v("函数的工作方式跟"),a("code",[e._v("parseInt()")]),e._v("函数类似，都是从位置 0 开始检测每个字符。同样，它也是解析到字符串末尾或者解析到一个无效的浮点数值字符为止。这意味着第一次出现的小数点是有效的，但第二次出现的小数点就无效了，此时字符串的剩余字符都会被忽略。因此，"),a("code",[e._v('"22.34.5"')]),e._v("将转换成 22.34。")]),e._v(" "),a("p",[a("code",[e._v("parseFloat()")]),e._v("函数的另一个不同之处在于，它始终忽略字符串开头的零。这个函数能识别前面讨论的所有浮点格式，以及十进制格式（开头的零始终被忽略）。十六进制数值始终会返回 0。因为"),a("code",[e._v("parseFloat()")]),e._v("只解析十进制值，因此不能指定底数。最后，如果字符串表示整数（没有小数点或者小数点后面只有一个零），则"),a("code",[e._v("parseFloat()")]),e._v("返回整数。下面是几个示例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = parseFloat("1234blue");  // 1234，按整数解析\nlet num2 = parseFloat("0xA");       // 0\nlet num3 = parseFloat("22.5");      // 22.5\nlet num4 = parseFloat("22.34.5");   // 22.34\nlet num5 = parseFloat("0908.5");    // 908.5\nlet num6 = parseFloat("3.125e7");   // 31250000\n')])])])])]),e._v(" "),a("h3",{attrs:{id:"_3-4-6-string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-6-string类型"}},[e._v("#")]),e._v(" 3.4.6 　"),a("code",[e._v("String")]),e._v("类型")]),e._v(" "),a("p",[a("code",[e._v("String")]),e._v("（字符串）数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号（\"）、单引号（'）或反引号（`）标示，因此下面的代码都是合法的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let firstName = \"John\";\nlet lastName = 'Jacob';\nlet lastName = `Jingleheimerschmidt`\n")])])]),a("p",[e._v("跟某些语言中使用不同的引号会改变对字符串的解释方式不同，ECMAScript 语法中表示字符串的引号没有区别。不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let firstName = 'Nicholas\"; // 语法错误：开头和结尾的引号必须是同一种\n")])])]),a("ol",[a("li",[a("p",[a("strong",[e._v("字符字面量")])]),e._v(" "),a("p",[e._v("字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("字面量")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("含义")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\n")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("换行")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\t")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("制表")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\b")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("退格")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\r")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("回车")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\f")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("换页")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\\\\\\\")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("反斜杠（"),a("code",[e._v("\\")]),e._v("）")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\'")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("单引号（"),a("code",[e._v("'")]),e._v("），在字符串以单引号标示时使用，例如"),a("code",[e._v("'He said, \\'hey.\\''")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('\\"')])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("双引号（"),a("code",[e._v('"')]),e._v("），在字符串以双引号标示时使用，例如"),a("code",[e._v('"He said, \\"hey.\\""')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\\\\\`` | 反引号（")]),e._v(" `"),a("code",[e._v("），在字符串以反引号标示时使用，例如")]),e._v("`He said, \\`hey.\\```")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\x*nn*")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("以十六进制编码"),a("code",[e._v("*nn*")]),e._v("表示的字符（其中"),a("code",[e._v("*n*")]),e._v("是十六进制数字 0~F），例如"),a("code",[e._v("\\x41")]),e._v("等于"),a("code",[e._v('"A"')])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("\\u*nnnn*")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("以十六进制编码"),a("code",[e._v("*nnnn*")]),e._v("表示的 Unicode 字符（其中"),a("code",[e._v("*n*")]),e._v("是十六进制数字 0~F），例如"),a("code",[e._v("\\u03a3")]),e._v("等于希腊字符"),a("code",[e._v('"Σ"')])])])])]),e._v(" "),a("p",[e._v("这些字符字面量可以出现在字符串中的任意位置，且可以作为单个字符被解释：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let text = "This is the letter sigma: \\u03a3.";\n')])])]),a("p",[e._v("在这个例子中，即使包含 6 个字符长的转义序列，变量"),a("code",[e._v("text")]),e._v("仍然是 28 个字符长。因为转义序列表示一个字符，所以只算一个字符。")]),e._v(" "),a("p",[e._v("字符串的长度可以通过其"),a("code",[e._v("length")]),e._v("属性获取：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(text.length); // 28\n")])])]),a("p",[e._v("这个属性返回字符串中 16 位字符的个数。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　如果字符串中包含双字节字符，那么"),a("code",[e._v("length")]),e._v("属性返回的值可能不是准确的字符数。第 5 章将具体讨论如何解决这个问题。")])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("字符串的特点")])]),e._v(" "),a("p",[e._v("ECMAScript 中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let lang = "Java";\nlang = lang + "Script";\n')])])]),a("p",[e._v("这里，变量"),a("code",[e._v("lang")]),e._v("一开始包含字符串"),a("code",[e._v('"Java"')]),e._v("。紧接着，"),a("code",[e._v("lang")]),e._v("被重新定义为包含"),a("code",[e._v('"Java"')]),e._v("和"),a("code",[e._v('"Script"')]),e._v("的组合，也就是"),a("code",[e._v('"JavaScript"')]),e._v("。整个过程首先会分配一个足够容纳 10 个字符的空间，然后填充上"),a("code",[e._v('"Java"')]),e._v("和"),a("code",[e._v('"Script"')]),e._v("。最后销毁原始的字符串"),a("code",[e._v('"Java"')]),e._v("和字符串"),a("code",[e._v('"Script"')]),e._v("，因为这两个字符串都没有用了。所有处理都是在后台发生的，而这也是一些早期的浏览器（如 Firefox 1.0 之前的版本和 IE6.0）在拼接字符串时非常慢的原因。这些浏览器在后来的版本中都有针对性地解决了这个问题。")])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("转换为字符串")])]),e._v(" "),a("p",[e._v("有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的"),a("code",[e._v("toString()")]),e._v("方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let age = 11;\nlet ageAsString = age.toString();      // 字符串"11"\nlet found = true;\nlet foundAsString = found.toString();  // 字符串"true"\n')])])]),a("p",[a("code",[e._v("toString()")]),e._v("方法可见于数值、布尔值、对象和字符串值。（没错，字符串值也有"),a("code",[e._v("toString()")]),e._v("方法，该方法只是简单地返回自身的一个副本。）"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("值没有"),a("code",[e._v("toString()")]),e._v("方法。")]),e._v(" "),a("p",[e._v("多数情况下，"),a("code",[e._v("toString()")]),e._v("不接收任何参数。不过，在对数值调用这个方法时，"),a("code",[e._v("toString()")]),e._v("可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，"),a("code",[e._v("toString()")]),e._v("返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = 10;\nconsole.log(num.toString());     // "10"\nconsole.log(num.toString(2));    // "1010"\nconsole.log(num.toString(8));    // "12"\nconsole.log(num.toString(10));   // "10"\nconsole.log(num.toString(16));   // "a"\n')])])]),a("p",[e._v("这个例子展示了传入底数参数时，"),a("code",[e._v("toString()")]),e._v("输出的字符串值也会随之改变。数值 10 可以输出为任意数值格式。注意，默认情况下（不传参数）的输出与传入参数 10 得到的结果相同。")]),e._v(" "),a("p",[e._v("如果你不确定一个值是不是"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("，可以使用"),a("code",[e._v("String()")]),e._v("转型函数，它始终会返回表示相应类型值的字符串。"),a("code",[e._v("String()")]),e._v("函数遵循如下规则。")]),e._v(" "),a("ul",[a("li",[e._v("如果值有"),a("code",[e._v("toString()")]),e._v("方法，则调用该方法（不传参数）并返回结果。")]),e._v(" "),a("li",[e._v("如果值是"),a("code",[e._v("null")]),e._v("，返回"),a("code",[e._v('"null"')]),e._v("。")]),e._v(" "),a("li",[e._v("如果值是"),a("code",[e._v("undefined")]),e._v("，返回"),a("code",[e._v('"undefined"')]),e._v("。")])]),e._v(" "),a("p",[e._v("下面看几个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let value1 = 10;\nlet value2 = true;\nlet value3 = null;\nlet value4;\n\nconsole.log(String(value1));  // "10"\nconsole.log(String(value2));  // "true"\nconsole.log(String(value3));  // "null"\nconsole.log(String(value4));  // "undefined"\n')])])]),a("p",[e._v("这里展示了将 4 个值转换为字符串的情况：一个数值、一个布尔值、一个"),a("code",[e._v("null")]),e._v("和一个"),a("code",[e._v("undefined")]),e._v("。数值和布尔值的转换结果与调用"),a("code",[e._v("toString()")]),e._v("相同。因为"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("没有"),a("code",[e._v("toString()")]),e._v("方法，所以"),a("code",[e._v("String()")]),e._v("方法就直接返回了这两个值的字面量文本。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　用加号操作符给一个值加上一个空字符串"),a("code",[e._v('""')]),e._v("也可以将其转换为字符串（加号操作符本章后面会介绍）。")])])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("模板字面量")])]),e._v(" "),a("p",[e._v("ECMAScript 6 新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let myMultiLineString = 'first line\\nsecond line';\nlet myMultiLineTemplateLiteral = `first line\nsecond line`;\n\nconsole.log(myMultiLineString);\n// first line\n// second line\"\n\nconsole.log(myMultiLineTemplateLiteral);\n// first line\n// second line\n\nconsole.log(myMultiLineString === myMultiLinetemplateLiteral); // true\n")])])]),a("p",[e._v("顾名思义，模板字面量在定义模板时特别有用，比如下面这个 HTML 模板：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let pageHTML = `\n<div>\n  <a href="#">\n    <span>Jake</span>\n  </a>\n</div>`;\n')])])]),a("p",[e._v("由于模板字面量会保持反引号内部的空格，因此在使用时要格外注意。格式正确的模板字符串可能会看起来缩进不当：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 这个模板字面量在换行符之后有25个空格符\nlet myTemplateLiteral = `first line\n                         second line`;\nconsole.log(myTemplateLiteral.length);  // 47\n\n// 这个模板字面量以一个换行符开头\nlet secondTemplateLiteral = `\nfirst line\nsecond line`;\nconsole.log(secondTemplateLiteral[0] === '\\n'); // true\n\n// 这个模板字面量没有意料之外的字符\nlet thirdTemplateLiteral = `first line\nsecond line`;\nconsole.log(thirdTemplateLiteral[0]);\n// first line\n// second line\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[a("strong",[e._v("字符串插值")])]),e._v(" "),a("p",[e._v("模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。")]),e._v(" "),a("p",[e._v("字符串插值通过在"),a("code",[e._v("${}")]),e._v("中使用一个 JavaScript 表达式实现：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let value = 5;\nlet exponent = 'second';\n// 以前，字符串插值是这样实现的：\nlet interpolatedString =\n  value + ' to the ' + exponent + ' power is ' + (value * value);\n\n// 现在，可以用模板字面量这样实现：\nlet interpolatedTemplateLiteral =\n  `${ value } to the ${ exponent } power is ${ value * value }`;\n\nconsole.log(interpolatedString);           // 5 to the second power is 25\nconsole.log(interpolatedTemplateLiteral);  // 5 to the second power is 25\n")])])]),a("p",[e._v("所有插入的值都会使用"),a("code",[e._v("toString()")]),e._v("强制转型为字符串，而且任何 JavaScript 表达式都可以用于插值。嵌套的模板字符串无须转义：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(`Hello, ${ `World` }!`);  // Hello, World!\n")])])]),a("p",[e._v("将表达式转换为字符串时会调用"),a("code",[e._v("toString()")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let foo = { toString: () => 'World' };\nconsole.log(`Hello, ${ foo }!`);      // Hello, World!\n")])])]),a("p",[e._v("在插值表达式中可以调用函数和方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function capitalize(word) {\n  return `${ word[0].toUpperCase() }${ word.slice(1) }`;\n}\nconsole.log(`${ capitalize('hello') }, ${ capitalize('world') }!`); // Hello, World!\n")])])]),a("p",[e._v("此外，模板也可以插入自己之前的值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let value = '';\nfunction append() {\n  value = `${value}abc`\n  console.log(value);\n}\nappend();  // abc\nappend();  // abcabc\nappend();  // abcabcabc\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[a("strong",[e._v("模板字面量标签函数")])]),e._v(" "),a("p",[e._v("模板字面量也支持定义"),a("strong",[e._v("标签函数")]),e._v("（tag function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。")]),e._v(" "),a("p",[e._v("标签函数本身是一个常规函数，通过前缀到模板字面量来应用自定义行为，如下例所示。标签函数接收到的参数依次是原始字符串数组和对每个表达式求值的结果。这个函数的返回值是对模板字面量求值得到的字符串。")]),e._v(" "),a("p",[e._v("最好通过一个例子来理解：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let a = 6;\nlet b = 9;\n\nfunction simpleTag(strings, aValExpression, bValExpression, sumExpression) {\n  console.log(strings);\n  console.log(aValExpression);\n  console.log(bValExpression);\n  console.log(sumExpression);\n\n  return \'foobar\';\n}\n\nlet untaggedResult = `${ a } + ${ b } = ${ a + b }`;\nlet taggedResult = simpleTag`${ a } + ${ b } = ${ a + b }`;\n// ["", " + ", " = ", ""]\n// 6\n// 9\n// 15\n\nconsole.log(untaggedResult);   // "6 + 9 = 15"\nconsole.log(taggedResult);     // "foobar"\n')])])]),a("p",[e._v("因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest operator）将它们收集到一个数组中：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let a = 6;\nlet b = 9;\n\nfunction simpleTag(strings, ...expressions) {\n  console.log(strings);\n  for(const expression of expressions) {\n    console.log(expression);\n  }\n\n  return \'foobar\';\n}\nlet taggedResult = simpleTag`${ a } + ${ b } = ${ a + b }`;\n// ["", " + ", " = ", ""]\n// 6\n// 9\n// 15\n\nconsole.log(taggedResult);  // "foobar"\n')])])]),a("p",[e._v("对于有"),a("img",{attrs:{src:"https://private.codecogs.com/gif.latex?n",alt:"n"}}),e._v("个插值的模板字面量，传给标签函数的表达式参数的个数始终是"),a("img",{attrs:{src:"https://private.codecogs.com/gif.latex?n",alt:"n"}}),e._v("，而传给标签函数的第一个参数所包含的字符串个数则始终是"),a("img",{attrs:{src:"https://private.codecogs.com/gif.latex?n+1",alt:"n+1"}}),e._v("。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let a = 6;\nlet b = 9;\n\nfunction zipTag(strings, ...expressions) {\n  return strings[0] +\n         expressions.map((e, i) => `${e}${strings[i + 1]}`)\n                    .join(\'\');\n}\n\nlet untaggedResult =    `${ a } + ${ b } = ${ a + b }`;\nlet taggedResult = zipTag`${ a } + ${ b } = ${ a + b }`;\n\nconsole.log(untaggedResult);  // "6 + 9 = 15"\nconsole.log(taggedResult);    // "6 + 9 = 15"\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("p",[a("strong",[e._v("原始字符串")])]),e._v(" "),a("p",[e._v("使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示。为此，可以使用默认的"),a("code",[e._v("String.raw")]),e._v("标签函数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Unicode示例\n// \\u00A9是版权符号\nconsole.log(`\\u00A9`);            // ©\nconsole.log(String.raw`\\u00A9`);  // \\u00A9\n\n// 换行符示例\nconsole.log(`first line\\nsecond line`);\n// first line\n// second line\n\nconsole.log(String.raw`first line\\nsecond line`); // "first line\\nsecond line"\n\n// 对实际的换行符来说是不行的\n// 它们不会被转换成转义序列的形式\nconsole.log(`first line\nsecond line`);\n// first line\n// second line\n\nconsole.log(String.raw`first line\nsecond line`);\n// first line\n// second line\n')])])]),a("p",[e._v("另外，也可以通过标签函数的第一个参数，即字符串数组的"),a("code",[e._v(".raw")]),e._v("属性取得每个字符串的原始内容：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function printRaw(strings) {\n  console.log('Actual characters:');\n  for (const string of strings) {\n    console.log(string);\n  }\n\n  console.log('Escaped characters;');\n  for (const rawString of strings.raw) {\n    console.log(rawString);\n  }\n}\n\nprintRaw`\\u00A9${ 'and' }\\n`;\n// Actual characters:\n// ©\n//（换行符）\n// Escaped characters:\n// \\u00A9\n// \\n\n")])])])])]),e._v(" "),a("h3",{attrs:{id:"_3-4-7-symbol类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-7-symbol类型"}},[e._v("#")]),e._v(" 3.4.7 　"),a("code",[e._v("Symbol")]),e._v("类型")]),e._v(" "),a("p",[a("code",[e._v("Symbol")]),e._v("（符号）是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。")]),e._v(" "),a("p",[e._v("尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为 Object API 提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("符号的基本用法")])]),e._v(" "),a("p",[e._v("符号需要使用"),a("code",[e._v("Symbol()")]),e._v("函数初始化。因为符号本身是原始类型，所以"),a("code",[e._v("typeof")]),e._v("操作符对符号返回"),a("code",[e._v("symbol")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let sym = Symbol();\nconsole.log(typeof sym); // symbol\n")])])]),a("p",[e._v("调用"),a("code",[e._v("Symbol()")]),e._v("函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let genericSymbol = Symbol();\nlet otherGenericSymbol = Symbol();\n\nlet fooSymbol = Symbol('foo');\nlet otherFooSymbol = Symbol('foo');\n\nconsole.log(genericSymbol == otherGenericSymbol);  // false\nconsole.log(fooSymbol == otherFooSymbol);          // false\n")])])]),a("p",[e._v("符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建"),a("code",[e._v("Symbol()")]),e._v("实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let genericSymbol = Symbol();\nconsole.log(genericSymbol);  // Symbol()\n\nlet fooSymbol = Symbol('foo');\nconsole.log(fooSymbol);      // Symbol(foo);\n")])])]),a("p",[e._v("最重要的是，"),a("code",[e._v("Symbol()")]),e._v("函数不能用作构造函数，与"),a("code",[e._v("new")]),e._v("关键字一起使用。这样做是为了避免创建符号包装对象，像使用"),a("code",[e._v("Boolean")]),e._v("、"),a("code",[e._v("String")]),e._v("或"),a("code",[e._v("Number")]),e._v("那样，它们都支持构造函数且可用于初始化包含原始值的包装对象：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let myBoolean = new Boolean();\nconsole.log(typeof myBoolean); // "object"\n\nlet myString = new String();\nconsole.log(typeof myString);  // "object"\n\nlet myNumber = new Number();\nconsole.log(typeof myNumber);  // "object"\n\nlet mySymbol = new Symbol(); // TypeError: Symbol is not a constructor\n')])])]),a("p",[e._v("如果你确实想使用符号包装对象，可以借用"),a("code",[e._v("Object()")]),e._v("函数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let mySymbol = Symbol();\nlet myWrappedSymbol = Object(mySymbol);\nconsole.log(typeof myWrappedSymbol);   // "object"\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("使用全局符号注册表")])]),e._v(" "),a("p",[e._v("如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。")]),e._v(" "),a("p",[e._v("为此，需要使用"),a("code",[e._v("Symbol.for()")]),e._v("方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let fooGlobalSymbol = Symbol.for('foo');\nconsole.log(typeof fooGlobalSymbol); // symbol\n")])])]),a("p",[a("code",[e._v("Symbol.for()")]),e._v("对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let fooGlobalSymbol = Symbol.for('foo');       // 创建新符号\nlet otherFooGlobalSymbol = Symbol.for('foo');  // 重用已有符号\n\nconsole.log(fooGlobalSymbol === otherFooGlobalSymbol);  // true\n")])])]),a("p",[e._v("即使采用相同的符号描述，在全局注册表中定义的符号跟使用"),a("code",[e._v("Symbol()")]),e._v("定义的符号也并不等同：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let localSymbol = Symbol('foo');\nlet globalSymbol = Symbol.for('foo');\n\nconsole.log(localSymbol === globalSymbol); // false\n")])])]),a("p",[e._v("全局注册表中的符号必须使用字符串键来创建，因此作为参数传给"),a("code",[e._v("Symbol.for()")]),e._v("的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let emptyGlobalSymbol = Symbol.for();\nconsole.log(emptyGlobalSymbol);    // Symbol(undefined)\n")])])]),a("p",[e._v("还可以使用"),a("code",[e._v("Symbol.keyFor()")]),e._v("来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回"),a("code",[e._v("undefined")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 创建全局符号\nlet s = Symbol.for('foo');\nconsole.log(Symbol.keyFor(s));   // foo\n\n// 创建普通符号\nlet s2 = Symbol('bar');\nconsole.log(Symbol.keyFor(s2));  // undefined\n")])])]),a("p",[e._v("如果传给"),a("code",[e._v("Symbol.keyFor()")]),e._v("的不是符号，则该方法抛出"),a("code",[e._v("TypeError")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Symbol.keyFor(123); // TypeError: 123 is not a symbol\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("使用符号作为属性")])]),e._v(" "),a("p",[e._v("凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和"),a("code",[e._v("Object.defineProperty()")]),e._v("/"),a("code",[e._v("Object.definedProperties()")]),e._v("定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let s1 = Symbol('foo'),\n    s2 = Symbol('bar'),\n    s3 = Symbol('baz'),\n    s4 = Symbol('qux');\n\nlet o = {\n  [s1]: 'foo val'\n};\n// 这样也可以：o[s1] = 'foo val';\n\nconsole.log(o);\n// {Symbol(foo): foo val}\n\nObject.defineProperty(o, s2, {value: 'bar val'});\n\nconsole.log(o);\n// {Symbol(foo): foo val, Symbol(bar): bar val}\n\nObject.defineProperties(o, {\n  [s3]: {value: 'baz val'},\n  [s4]: {value: 'qux val'}\n});\n\nconsole.log(o);\n// {Symbol(foo): foo val, Symbol(bar): bar val,\n//  Symbol(baz): baz val, Symbol(qux): qux val}\n")])])]),a("p",[e._v("类似于"),a("code",[e._v("Object.getOwnPropertyNames()")]),e._v("返回对象实例的常规属性数组，"),a("code",[e._v("Object.getOwnPropertySymbols()")]),e._v("返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。"),a("code",[e._v("Object.getOwnPropertyDescriptors()")]),e._v("会返回同时包含常规和符号属性描述符的对象。"),a("code",[e._v("Reflect.ownKeys()")]),e._v("会返回两种类型的键：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let s1 = Symbol('foo'),\n    s2 = Symbol('bar');\n\nlet o = {\n  [s1]: 'foo val',\n  [s2]: 'bar val',\n  baz: 'baz val',\n  qux: 'qux val'\n};\n\nconsole.log(Object.getOwnPropertySymbols(o));\n// [Symbol(foo), Symbol(bar)]\n\nconsole.log(Object.getOwnPropertyNames(o));\n// [\"baz\", \"qux\"]\n\nconsole.log(Object.getOwnPropertyDescriptors(o));\n// {baz: {...}, qux: {...}, Symbol(foo): {...}, Symbol(bar): {...}}\n\nconsole.log(Reflect.ownKeys(o));\n// [\"baz\", \"qux\", Symbol(foo), Symbol(bar)]\n")])])]),a("p",[e._v("因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let o = {\n  [Symbol('foo')]: 'foo val',\n  [Symbol('bar')]: 'bar val'\n};\n\nconsole.log(o);\n// {Symbol(foo): \"foo val\", Symbol(bar): \"bar val\"}\n\nlet barSymbol = Object.getOwnPropertySymbols(o)\n              .find((symbol) => symbol.toString().match(/bar/));\n\nconsole.log(barSymbol);\n// Symbol(bar)\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("常用内置符号")])]),e._v(" "),a("p",[e._v("ECMAScript 6 也引入了一批"),a("strong",[e._v("常用内置符号")]),e._v("（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以"),a("code",[e._v("Symbol")]),e._v("工厂函数字符串属性的形式存在。")]),e._v(" "),a("p",[e._v("这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道"),a("code",[e._v("for-of")]),e._v("循环会在相关对象上使用"),a("code",[e._v("Symbol.iterator")]),e._v("属性，那么就可以通过在自定义对象上重新定义"),a("code",[e._v("Symbol.iterator")]),e._v("的值，来改变"),a("code",[e._v("for-of")]),e._v("在迭代该对象时的行为。")]),e._v(" "),a("p",[e._v("这些内置符号也没有什么特别之处，它们就是全局函数"),a("code",[e._v("Symbol")]),e._v("的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　在提到 ECMAScript 规范时，经常会引用符号在规范中的名称，前缀为"),a("code",[e._v("@@")]),e._v("。比如，"),a("code",[e._v("@@iterator")]),e._v("指的就是"),a("code",[e._v("Symbol.iterator")]),e._v("。")])])])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[a("strong",[e._v("Symbol.asyncIterator")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的"),a("code",[e._v("AsyncIterator")]),e._v("。由"),a("code",[e._v("for-await-of")]),e._v("语句使用”。换句话说，这个符号表示实现异步迭代器 API 的函数。")]),e._v(" "),a("p",[a("code",[e._v("for-await-of")]),e._v("循环会利用这个函数执行异步迭代操作。循环时，它们会调用以"),a("code",[e._v("Symbol.asyncIterator")]),e._v("为键的函数，并期望这个函数会返回一个实现迭代器 API 的对象。很多时候，返回的对象是实现该 API 的"),a("code",[e._v("AsyncGenerator")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Foo {\n  async *[Symbol.asyncIterator]() {}\n}\n\nlet f = new Foo();\n\nconsole.log(f[Symbol.asyncIterator]());\n// AsyncGenerator {<suspended>}\n")])])]),a("p",[e._v("技术上，这个由"),a("code",[e._v("Symbol.asyncIterator")]),e._v("函数生成的对象应该通过其"),a("code",[e._v("next()")]),e._v("方法陆续返回"),a("code",[e._v("Promise")]),e._v("实例。可以通过显式地调用"),a("code",[e._v("next()")]),e._v("方法返回，也可以隐式地通过异步生成器函数返回：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Emitter {\n  constructor(max) {\n    this.max = max;\n    this.asyncIdx = 0;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    while(this.asyncIdx < this.max) {\n      yield new Promise((resolve) => resolve(this.asyncIdx++));\n    }\n  }\n}\n\nasync function asyncCount() {\n  let emitter = new Emitter(5);\n\n  for await(const x of emitter) {\n    console.log(x);\n  }\n}\n\nasyncCount();\n// 0\n// 1\n// 2\n// 3\n// 4\n")])])]),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("Symbol.asyncIterator")]),e._v("是 ES2018 规范定义的，因此只有版本非常新的浏览器支持它。关于异步迭代和"),a("code",[e._v("for-await-of")]),e._v("循环的细节，参见附录 A。")])])])]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[a("strong",[e._v("Symbol.hasInstance")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由"),a("code",[e._v("instanceof")]),e._v("操作符使用”。"),a("code",[e._v("instanceof")]),e._v("操作符可以用来确定一个对象实例的原型链上是否有原型。"),a("code",[e._v("instanceof")]),e._v("的典型使用场景如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Foo() {}\nlet f = new Foo();\nconsole.log(f instanceof Foo); // true\n\nclass Bar {}\nlet b = new Bar();\nconsole.log(b instanceof Bar); // true\n")])])]),a("p",[e._v("在 ES6 中，"),a("code",[e._v("instanceof")]),e._v("操作符会使用"),a("code",[e._v("Symbol.hasInstance")]),e._v("函数来确定关系。以"),a("code",[e._v("Symbol.hasInstance")]),e._v("为键的函数会执行同样的操作，只是操作数对调了一下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Foo() {}\nlet f = new Foo();\nconsole.log(Foo[Symbol.hasInstance](f)); // true\n\nclass Bar {}\nlet b = new Bar();\nconsole.log(Bar[Symbol.hasInstance](b)); // true\n")])])]),a("p",[e._v("这个属性定义在"),a("code",[e._v("Function")]),e._v("的原型上，因此默认在所有函数和类上都可以调用。由于"),a("code",[e._v("instanceof")]),e._v("操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Bar {}\nclass Baz extends Bar {\n  static [Symbol.hasInstance]() {\n    return false;\n  }\n}\n\nlet b = new Baz();\nconsole.log(Bar[Symbol.hasInstance](b)); // true\nconsole.log(b instanceof Bar);           // true\nconsole.log(Baz[Symbol.hasInstance](b)); // false\nconsole.log(b instanceof Baz);           // false\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("p",[a("strong",[e._v("Symbol.isConcatSpreadable")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个布尔值，如果是"),a("code",[e._v("true")]),e._v("，则意味着对象应该用"),a("code",[e._v("Array.prototype.concat()")]),e._v("打平其数组元素”。ES6 中的"),a("code",[e._v("Array.prototype.concat()")]),e._v("方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖"),a("code",[e._v("Symbol.isConcatSpreadable")]),e._v("的值可以修改这个行为。")]),e._v(" "),a("p",[e._v("数组对象默认情况下会被打平到已有的数组，"),a("code",[e._v("false")]),e._v("或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，"),a("code",[e._v("true")]),e._v("或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在"),a("code",[e._v("Symbol.isConcatSpreadable")]),e._v("被设置为"),a("code",[e._v("true")]),e._v("的情况下将被忽略。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let initial = ['foo'];\n\nlet array = ['bar'];\nconsole.log(array[Symbol.isConcatSpreadable]);  // undefined\nconsole.log(initial.concat(array));             // ['foo', 'bar']\narray[Symbol.isConcatSpreadable] = false;\nconsole.log(initial.concat(array));             // ['foo', Array(1)]\n\nlet arrayLikeObject = { length: 1, 0: 'baz' };\nconsole.log(arrayLikeObject[Symbol.isConcatSpreadable]);  // undefined\nconsole.log(initial.concat(arrayLikeObject));             // ['foo', {...}]\narrayLikeObject[Symbol.isConcatSpreadable] = true;\nconsole.log(initial.concat(arrayLikeObject));             // ['foo', 'baz']\n\nlet otherObject = new Set().add('qux');\nconsole.log(otherObject[Symbol.isConcatSpreadable]);  // undefined\nconsole.log(initial.concat(otherObject));             // ['foo', Set(1)]\notherObject[Symbol.isConcatSpreadable] = true;\nconsole.log(initial.concat(otherObject));             // ['foo']\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[a("p",[a("strong",[e._v("Symbol.iterator")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由"),a("code",[e._v("for-of")]),e._v("语句使用”。换句话说，这个符号表示实现迭代器 API 的函数。")]),e._v(" "),a("p",[a("code",[e._v("for-of")]),e._v("循环这样的语言结构会利用这个函数执行迭代操作。循环时，它们会调用以"),a("code",[e._v("Symbol.iterator")]),e._v("为键的函数，并默认这个函数会返回一个实现迭代器 API 的对象。很多时候，返回的对象是实现该 API 的"),a("code",[e._v("Generator")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Foo {\n  *[Symbol.iterator]() {}\n}\n\nlet f = new Foo();\n\nconsole.log(f[Symbol.iterator]());\n// Generator {<suspended>}\n")])])]),a("p",[e._v("技术上，这个由"),a("code",[e._v("Symbol.iterator")]),e._v("函数生成的对象应该通过其"),a("code",[e._v("next()")]),e._v("方法陆续返回值。可以通过显式地调用"),a("code",[e._v("next()")]),e._v("方法返回，也可以隐式地通过生成器函数返回：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Emitter {\n  constructor(max) {\n    this.max = max;\n    this.idx = 0;\n  }\n\n  *[Symbol.iterator]() {\n    while(this.idx < this.max) {\n      yield this.idx++;\n    }\n  }\n}\n\nfunction count() {\n  let emitter = new Emitter(5);\n\n  for (const x of emitter) {\n    console.log(x);\n  }\n}\n\ncount();\n// 0\n// 1\n// 2\n// 3\n// 4\n")])])]),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　迭代器的相关内容将在第 7 章详细介绍。")])])])]),e._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("p",[a("strong",[e._v("Symbol.match")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由"),a("code",[e._v("String.prototype.match()")]),e._v("方法使用”。"),a("code",[e._v("String.prototype.match()")]),e._v("方法会使用以"),a("code",[e._v("Symbol.match")]),e._v("为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个"),a("code",[e._v("String")]),e._v("方法的有效参数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('console.log(RegExp.prototype[Symbol.match]);\n// f [Symbol.match]() { [native code] }\n\nconsole.log(\'foobar\'.match(/bar/));\n// ["bar", index: 3, input: "foobar", groups: undefined]\n')])])]),a("p",[e._v("给这个方法传入非正则表达式值会导致该值被转换为"),a("code",[e._v("RegExp")]),e._v("对象。如果想改变这种行为，让方法直接使用参数，则可以重新定义"),a("code",[e._v("Symbol.match")]),e._v("函数以取代默认对正则表达式求值的行为，从而让"),a("code",[e._v("match()")]),e._v("方法使用非正则表达式实例。"),a("code",[e._v("Symbol.match")]),e._v("函数接收一个参数，就是调用"),a("code",[e._v("match()")]),e._v("方法的字符串实例。返回的值没有限制：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class FooMatcher {\n  static [Symbol.match](target) {\n    return target.includes('foo');\n  }\n}\n\nconsole.log('foobar'.match(FooMatcher)); // true\nconsole.log('barbaz'.match(FooMatcher)); // false\n\nclass StringMatcher {\n  constructor(str) {\n    this.str = str;\n  }\n\n  [Symbol.match](target) {\n    return target.includes(this.str);\n  }\n}\n\nconsole.log('foobar'.match(new StringMatcher('foo'))); // true\nconsole.log('barbaz'.match(new StringMatcher('qux'))); // false\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[a("p",[a("strong",[e._v("Symbol.replace")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法替换一个字符串中匹配的子串。由"),a("code",[e._v("String.prototype.replace()")]),e._v("方法使用”。"),a("code",[e._v("String.prototype.replace()")]),e._v("方法会使用以"),a("code",[e._v("Symbol.replace")]),e._v("为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个"),a("code",[e._v("String")]),e._v("方法的有效参数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(RegExp.prototype[Symbol.replace]);\n// f [Symbol.replace]() { [native code] }\n\nconsole.log('foobarbaz'.replace(/bar/, 'qux'));\n// 'fooquxbaz'\n")])])]),a("p",[e._v("给这个方法传入非正则表达式值会导致该值被转换为"),a("code",[e._v("RegExp")]),e._v("对象。如果想改变这种行为，让方法直接使用参数，可以重新定义"),a("code",[e._v("Symbol.replace")]),e._v("函数以取代默认对正则表达式求值的行为，从而让"),a("code",[e._v("replace()")]),e._v("方法使用非正则表达式实例。"),a("code",[e._v("Symbol.replace")]),e._v("函数接收两个参数，即调用"),a("code",[e._v("replace()")]),e._v("方法的字符串实例和替换字符串。返回的值没有限制：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class FooReplacer {\n  static [Symbol.replace](target, replacement) {\n    return target.split('foo').join(replacement);\n  }\n}\n\nconsole.log('barfoobaz'.replace(FooReplacer, 'qux'));\n// \"barquxbaz\"\n\nclass StringReplacer {\n  constructor(str) {\n    this.str = str;\n  }\n\n  [Symbol.replace](target, replacement) {\n    return target.split(this.str).join(replacement);\n  }\n}\n\nconsole.log('barfoobaz'.replace(new StringReplacer('foo'), 'qux'));\n// \"barquxbaz\"\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"11"}},[a("li",[a("p",[a("strong",[e._v("Symbol.search")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由"),a("code",[e._v("String.prototype.search()")]),e._v("方法使用”。"),a("code",[e._v("String.prototype.search()")]),e._v("方法会使用以"),a("code",[e._v("Symbol.search")]),e._v("为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个"),a("code",[e._v("String")]),e._v("方法的有效参数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(RegExp.prototype[Symbol.search]);\n// f [Symbol.search]() { [native code] }\n\nconsole.log('foobar'.search(/bar/));\n// 3\n")])])]),a("p",[e._v("给这个方法传入非正则表达式值会导致该值被转换为"),a("code",[e._v("RegExp")]),e._v("对象。如果想改变这种行为，让方法直接使用参数，可以重新定义"),a("code",[e._v("Symbol.search")]),e._v("函数以取代默认对正则表达式求值的行为，从而让"),a("code",[e._v("search()")]),e._v("方法使用非正则表达式实例。"),a("code",[e._v("Symbol.search")]),e._v("函数接收一个参数，就是调用"),a("code",[e._v("match()")]),e._v("方法的字符串实例。返回的值没有限制：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class FooSearcher {\n  static [Symbol.search](target) {\n    return target.indexOf('foo');\n  }\n}\n\nconsole.log('foobar'.search(FooSearcher)); // 0\nconsole.log('barfoo'.search(FooSearcher)); // 3\nconsole.log('barbaz'.search(FooSearcher)); // -1\n\nclass StringSearcher {\n  constructor(str) {\n    this.str = str;\n  }\n\n  [Symbol.search](target) {\n    return target.indexOf(this.str);\n  }\n}\n\nconsole.log('foobar'.search(new StringSearcher('foo'))); // 0\nconsole.log('barfoo'.search(new StringSearcher('foo'))); // 3\nconsole.log('barbaz'.search(new StringSearcher('qux'))); // -1\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"12"}},[a("li",[a("p",[a("strong",[e._v("Symbol.species")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用"),a("code",[e._v("Symbol.species")]),e._v("定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Bar extends Array {}\nclass Baz extends Array {\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\n\nlet bar = new Bar();\nconsole.log(bar instanceof Array); // true\nconsole.log(bar instanceof Bar);   // true\nbar = bar.concat('bar');\nconsole.log(bar instanceof Array); // true\nconsole.log(bar instanceof Bar);   // true\n\nlet baz = new Baz();\nconsole.log(baz instanceof Array); // true\nconsole.log(baz instanceof Baz);   // true\nbaz = baz.concat('baz');\nconsole.log(baz instanceof Array); // true\nconsole.log(baz instanceof Baz);   // false\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[a("p",[a("strong",[e._v("Symbol.split")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由"),a("code",[e._v("String.prototype.split()")]),e._v("方法使用”。"),a("code",[e._v("String.prototype.split()")]),e._v("方法会使用以"),a("code",[e._v("Symbol.split")]),e._v("为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个"),a("code",[e._v("String")]),e._v("方法的有效参数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(RegExp.prototype[Symbol.split]);\n// f [Symbol.split]() { [native code] }\n\nconsole.log('foobarbaz'.split(/bar/));\n// ['foo', 'baz']\n")])])]),a("p",[e._v("给这个方法传入非正则表达式值会导致该值被转换为"),a("code",[e._v("RegExp")]),e._v("对象。如果想改变这种行为，让方法直接使用参数，可以重新定义"),a("code",[e._v("Symbol.split")]),e._v("函数以取代默认对正则表达式求值的行为，从而让"),a("code",[e._v("split()")]),e._v("方法使用非正则表达式实例。"),a("code",[e._v("Symbol.split")]),e._v("函数接收一个参数，就是调用"),a("code",[e._v("match()")]),e._v("方法的字符串实例。返回的值没有限制：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class FooSplitter {\n  static [Symbol.split](target) {\n    return target.split('foo');\n  }\n}\n\nconsole.log('barfoobaz'.split(FooSplitter));\n// [\"bar\", \"baz\"]\n\nclass StringSplitter {\n  constructor(str) {\n    this.str = str;\n  }\n\n  [Symbol.split](target) {\n    return target.split(this.str);\n  }\n}\n\nconsole.log('barfoobaz'.split(new StringSplitter('foo')));\n// [\"bar\", \"baz\"]\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"14"}},[a("li",[a("p",[a("strong",[e._v("Symbol.toPrimitive")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由"),a("code",[e._v("ToPrimitive")]),e._v("抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的"),a("code",[e._v("Symbol.toPrimitive")]),e._v("属性上定义一个函数可以改变默认行为。")]),e._v(" "),a("p",[e._v("根据提供给这个函数的参数（"),a("code",[e._v("string")]),e._v("、"),a("code",[e._v("number")]),e._v("或"),a("code",[e._v("default")]),e._v("），可以控制返回的原始值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Foo {}\nlet foo = new Foo();\n\nconsole.log(3 + foo);       // \"3[object Object]\"\nconsole.log(3 - foo);       // NaN\nconsole.log(String(foo));   // \"[object Object]\"\n\nclass Bar {\n  constructor() {\n    this[Symbol.toPrimitive] = function(hint) {\n      switch (hint) {\n        case 'number':\n          return 3;\n        case 'string':\n          return 'string bar';\n        case 'default':\n        default:\n          return 'default bar';\n      }\n    }\n  }\n}\nlet bar = new Bar();\n\nconsole.log(3 + bar);     // \"3default bar\"\nconsole.log(3 - bar);     // 0\nconsole.log(String(bar)); // \"string bar\"\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"15"}},[a("li",[a("p",[a("strong",[e._v("Symbol.toStringTag")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法"),a("code",[e._v("Object.prototype.toString()")]),e._v("使用”。")]),e._v(" "),a("p",[e._v("通过"),a("code",[e._v("toString()")]),e._v("方法获取对象标识时，会检索由"),a("code",[e._v("Symbol.toStringTag")]),e._v("指定的实例标识符，默认为"),a("code",[e._v('"Object"')]),e._v("。内置类型已经指定了这个值，但自定义类实例还需要明确定义：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let s = new Set();\n\nconsole.log(s);                      // Set(0) {}\nconsole.log(s.toString());           // [object Set]\nconsole.log(s[Symbol.toStringTag]);  // Set\n\nclass Foo {}\nlet foo = new Foo();\n\nconsole.log(foo);                      // Foo {}\nconsole.log(foo.toString());           // [object Object]\nconsole.log(foo[Symbol.toStringTag]);  // undefined\n\nclass Bar {\n  constructor() {\n    this[Symbol.toStringTag] = 'Bar';\n  }\n}\nlet bar = new Bar();\n\nconsole.log(bar);                      // Bar {}\nconsole.log(bar.toString());           // [object Bar]\nconsole.log(bar[Symbol.toStringTag]);  // Bar\n")])])])])]),e._v(" "),a("ol",{attrs:{start:"16"}},[a("li",[a("p",[a("strong",[e._v("Symbol.unscopables")])]),e._v(" "),a("p",[e._v("根据 ECMAScript 规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的"),a("code",[e._v("with")]),e._v("环境绑定中排除”。设置这个符号并让其映射对应属性的键值为"),a("code",[e._v("true")]),e._v("，就可以阻止该属性出现在"),a("code",[e._v("with")]),e._v("环境绑定中，如下例所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let o = { foo: 'bar' };\n\nwith (o) {\n  console.log(foo); // bar\n}\n\no[Symbol.unscopables] = {\n  foo: true\n};\n\nwith (o) {\n  console.log(foo); // ReferenceError\n}\n")])])]),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　不推荐使用"),a("code",[e._v("with")]),e._v("，因此也不推荐使用"),a("code",[e._v("Symbol.unscopables")]),e._v("。")])])])]),e._v(" "),a("h3",{attrs:{id:"_3-4-8-object类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-8-object类型"}},[e._v("#")]),e._v(" 3.4.8 　"),a("code",[e._v("Object")]),e._v("类型")]),e._v(" "),a("p",[e._v("ECMAScript 中的对象其实就是一组数据和功能的集合。对象通过"),a("code",[e._v("new")]),e._v("操作符后跟对象类型的名称来创建。开发者可以通过创建"),a("code",[e._v("Object")]),e._v("类型的实例来创建自己的对象，然后再给对象添加属性和方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let o = new Object();\n")])])]),a("p",[e._v("这个语法类似 Java，但 ECMAScript 只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let o = new Object;  // 合法，但不推荐\n")])])]),a("p",[a("code",[e._v("Object")]),e._v("的实例本身并不是很有用，但理解与它相关的概念非常重要。类似 Java 中的"),a("code",[e._v("java.lang.Object")]),e._v("，ECMAScript 中的"),a("code",[e._v("Object")]),e._v("也是派生其他对象的基类。"),a("code",[e._v("Object")]),e._v("类型的所有属性和方法在派生的对象上同样存在。")]),e._v(" "),a("p",[e._v("每个"),a("code",[e._v("Object")]),e._v("实例都有如下属性和方法。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("constructor")]),e._v("：用于创建当前对象的函数。在前面的例子中，这个属性的值就是"),a("code",[e._v("Object()")]),e._v("函数。")]),e._v(" "),a("li",[a("code",[e._v("hasOwnProperty(*propertyName*)")]),e._v("：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如"),a("code",[e._v('o.hasOwnProperty("name")')]),e._v("）。")]),e._v(" "),a("li",[a("code",[e._v("isPrototypeof(*object*)")]),e._v("：用于判断当前对象是否为另一个对象的原型。（第 5 章将详细介绍原型。）")]),e._v(" "),a("li",[a("code",[e._v("propertyIsEnumerable(*propertyName*)")]),e._v("：用于判断给定的属性是否可以使用（本章稍后讨论的）"),a("code",[e._v("for-in")]),e._v("语句枚举。与"),a("code",[e._v("hasOwnProperty()")]),e._v("一样，属性名必须是字符串。")]),e._v(" "),a("li",[a("code",[e._v("toLocaleString()")]),e._v("：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。")]),e._v(" "),a("li",[a("code",[e._v("toString()")]),e._v("：返回对象的字符串表示。")]),e._v(" "),a("li",[a("code",[e._v("valueOf()")]),e._v("：返回对象对应的字符串、数值或布尔值表示。通常与"),a("code",[e._v("toString()")]),e._v("的返回值相同。")])]),e._v(" "),a("p",[e._v("因为在 ECMAScript 中"),a("code",[e._v("Object")]),e._v("是所有对象的基类，所以任何对象都有这些属性和方法。第 5 章和第 6 章将介绍对象间的继承机制。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　严格来讲，ECMA-262 中对象的行为不一定适合 JavaScript 中的其他对象。比如浏览器环境中的 BOM 和 DOM 对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受 ECMA-262 约束，所以它们可能会也可能不会继承"),a("code",[e._v("Object")]),e._v("。")])]),e._v(" "),a("h2",{attrs:{id:"_3-5-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-操作符"}},[e._v("#")]),e._v(" 3.5 　操作符")]),e._v(" "),a("p",[e._v("ECMA-262 描述了一组可用于操作数据值的"),a("strong",[e._v("操作符")]),e._v("，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript 中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用"),a("code",[e._v("valueOf()")]),e._v("和"),a("code",[e._v("/")]),e._v("或"),a("code",[e._v("toString()")]),e._v("方法来取得可以计算的值。")]),e._v(" "),a("h3",{attrs:{id:"_3-5-1-一元操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-一元操作符"}},[e._v("#")]),e._v(" 3.5.1 　一元操作符")]),e._v(" "),a("p",[e._v("只操作一个值的操作符叫"),a("strong",[e._v("一元操作符")]),e._v("（unary operator）。一元操作符是 ECMAScript 中最简单的操作符。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("递增/递减操作符")])]),e._v(" "),a("p",[e._v("递增和递减操作符直接照搬自 C 语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加 1，把两个加号（"),a("code",[e._v("++")]),e._v("）放到变量前头即可：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let age = 29;\n++age;\n")])])]),a("p",[e._v("在这个例子中，前缀递增操作符把"),a("code",[e._v("age")]),e._v("的值变成了 30（给之前的值 29 加 1）。因此，它实际上等于如下表达式：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let age = 29;\nage = age + 1;\n")])])]),a("p",[e._v("前缀递减操作符也类似，只不过是从一个数值减 1。使用前缀递减操作符，只要把两个减号（"),a("code",[e._v("--")]),e._v("）放到变量前头即可：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let age = 29;\n--age;\n")])])]),a("p",[e._v("执行操作后，变量"),a("code",[e._v("age")]),e._v("的值变成了 28（从 29 减 1）。")]),e._v(" "),a("p",[e._v("无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有"),a("strong",[e._v("副作用")]),e._v("。）请看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let age = 29;\nlet anotherAge = --age + 2;\n\nconsole.log(age);         // 28\nconsole.log(anotherAge);  // 30\n")])])]),a("p",[e._v("在这个例子中，变量"),a("code",[e._v("anotherAge")]),e._v("以"),a("code",[e._v("age")]),e._v("减 1 后的值再加 2 进行初始化。因为递减操作先发生，所以"),a("code",[e._v("age")]),e._v("的值先变成 28，然后再加 2，结果是 30。")]),e._v(" "),a("p",[e._v("前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num1 = 2;\nlet num2 = 20;\nlet num3 = --num1 + num2;\nlet num4 = num1 + num2;\nconsole.log(num3);  // 21\nconsole.log(num4);  // 21\n")])])]),a("p",[e._v("这里，"),a("code",[e._v("num3")]),e._v("等于 21 是因为"),a("code",[e._v("num1")]),e._v("先减 1 之后才加"),a("code",[e._v("num2")]),e._v("。变量"),a("code",[e._v("num4")]),e._v("也是 21，那是因为加法使用的也是递减后的值。")]),e._v(" "),a("p",[e._v("递增和递减的后缀版语法一样（分别是"),a("code",[e._v("++")]),e._v("和"),a("code",[e._v("--")]),e._v("），只不过要放在变量后面。后缀版与前缀版的主要区别在于，后缀版递增和递减在语句被求值后才发生。在某些情况下，这种差异没什么影响，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let age = 29;\nage++;\n")])])]),a("p",[e._v("把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num1 = 2;\nlet num2 = 20;\nlet num3 = num1-- + num2;\nlet num4 = num1 + num2;\nconsole.log(num3);  // 22\nconsole.log(num4);  // 21\n")])])]),a("p",[e._v("这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，"),a("code",[e._v("num3")]),e._v("和"),a("code",[e._v("num4")]),e._v("的值都是 21。而在这个例子中，"),a("code",[e._v("num3")]),e._v("的值是 22，"),a("code",[e._v("num4")]),e._v("的值是 21。这里的不同之处在于，计算"),a("code",[e._v("num3")]),e._v("时使用的是"),a("code",[e._v("num1")]),e._v("的原始值（2），而计算"),a("code",[e._v("num4")]),e._v("时使用的是"),a("code",[e._v("num1")]),e._v("递减后的值（1）。")]),e._v(" "),a("p",[e._v("这 4 个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。")]),e._v(" "),a("ul",[a("li",[e._v("对于字符串，如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值。")]),e._v(" "),a("li",[e._v("对于字符串，如果不是有效的数值形式，则将变量的值设置为"),a("code",[e._v("NaN")]),e._v("。变量类型从字符串变成数值。")]),e._v(" "),a("li",[e._v("对于布尔值，如果是"),a("code",[e._v("false")]),e._v("，则转换为 0 再应用改变。变量类型从布尔值变成数值。")]),e._v(" "),a("li",[e._v("对于布尔值，如果是"),a("code",[e._v("true")]),e._v("，则转换为 1 再应用改变。变量类型从布尔值变成数值。")]),e._v(" "),a("li",[e._v("对于浮点值，加 1 或减 1。")]),e._v(" "),a("li",[e._v("如果是对象，则调用其（第 5 章会详细介绍的）"),a("code",[e._v("valueOf()")]),e._v("方法取得可以操作的值。对得到的值应用上述规则。如果是"),a("code",[e._v("NaN")]),e._v("，则调用"),a("code",[e._v("toString()")]),e._v("并再次应用其他规则。变量类型从对象变成数值。")])]),e._v(" "),a("p",[e._v("下面的例子演示了这些规则：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let s1 = "2";\nlet s2 = "z";\nlet b = false;\nlet f = 1.1;\nlet o = {\n  valueOf() {\n    return -1;\n  }\n};\n\ns1++;  // 值变成数值3\ns2++;  // 值变成NaN\nb++;   // 值变成数值1\nf--;   // 值变成0.10000000000000009（因为浮点数不精确）\no--;   // 值变成-2\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("一元加和减")])]),e._v(" "),a("p",[a("strong",[e._v("一元加和减操作符")]),e._v("对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号（"),a("code",[e._v("+")]),e._v("）表示，放在变量前头，对数值没有任何影响：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 25;\nnum = +num;\nconsole.log(num); // 25\n")])])]),a("p",[e._v("如果将一元减应用到非数值，则会执行与使用"),a("code",[e._v("Number()")]),e._v("转型函数一样的类型转换：布尔值"),a("code",[e._v("false")]),e._v("和"),a("code",[e._v("true")]),e._v("转换为 0 和 1，字符串根据特殊规则进行解析，对象会调用它们的"),a("code",[e._v("valueOf()")]),e._v("和/或"),a("code",[e._v("toString()")]),e._v("方法以得到可以转换的值。")]),e._v(" "),a("p",[e._v("下面的例子演示了一元加在应用到不同数据类型时的行为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let s1 = "01";\nlet s2 = "1.1";\nlet s3 = "z";\nlet b = false;\nlet f = 1.1;\nlet o = {\n  valueOf() {\n    return -1;\n  }\n};\n\ns1 = +s1;  // 值变成数值1\ns2 = +s2;  // 值变成数值1.1\ns3 = +s3;  // 值变成NaN\nb = +b;    // 值变成数值0\nf = +f;    // 不变，还是1.1\no = +o;    // 值变成数值-1\n')])])]),a("p",[e._v("一元减由一个减号（"),a("code",[e._v("-")]),e._v("）表示，放在变量前头，主要用于把数值变成负值，如把 1 转换为-1。示例如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 25;\nnum = -num;\nconsole.log(num);  // -25\n")])])]),a("p",[e._v("对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let s1 = "01";\nlet s2 = "1.1";\nlet s3 = "z";\nlet b = false;\nlet f = 1.1;\nlet o = {\n  valueOf() {\n    return -1;\n  }\n};\n\ns1 = -s1;  // 值变成数值-1\ns2 = -s2;  // 值变成数值-1.1\ns3 = -s3;  // 值变成NaN\nb = -b;    // 值变成数值0\nf = -f;    // 变成-1.1\no = -o;    // 值变成数值1\n')])])]),a("p",[e._v("一元加和减操作符主要用于基本的算术，但也可以像上面的例子那样，用于数据类型转换。")])])]),e._v(" "),a("h3",{attrs:{id:"_3-5-2-位操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2-位操作符"}},[e._v("#")]),e._v(" 3.5.2 　位操作符")]),e._v(" "),a("p",[e._v("接下来要介绍的操作符用于数值的底层操作，也就是操作内存中表示数据的比特（位）。ECMAScript 中的所有数值都以 IEEE 754 64 位格式存储，但位操作并不直接应用到 64 位表示，而是先把值转换为 32 位整数，再进行位操作，之后再把结果转换为 64 位。对开发者而言，就好像只有 32 位整数一样，因为 64 位整数存储格式是不可见的。既然知道了这些，就只需要考虑 32 位整数即可。")]),e._v(" "),a("p",[e._v("有符号整数使用 32 位的前 31 位表示整数值。第 32 位表示数值的符号，如 0 表示正，1 表示负。这一位称为"),a("strong",[e._v("符号位")]),e._v("（sign bit），它的值决定了数值其余部分的格式。正值以真正的二进制格式存储，即 31 位中的每一位都代表 2 的幂。第一位（称为第 0 位）表示 20，第二位表示 21，依此类推。如果一个位是空的，则以 0 填充，相当于忽略不计。比如，数值 18 的二进制格式为 00000000000000000000000000010010，或更精简的 10010。后者是用到的 5 个有效位，决定了实际的值（如图 3-1 所示）。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/004.png",alt:"img"}})]),e._v(" "),a("p",[a("strong",[e._v("图　 3-1")])]),e._v(" "),a("p",[e._v("负值以一种称为"),a("strong",[e._v("二补数")]),e._v("的二进制编码存储。一个数值的二补数通过如下 3 个步骤计算得到：")]),e._v(" "),a("p",[e._v("(1) 确定绝对值的二进制表示（如，对于-18，先确定 18 的二进制表示）；")]),e._v(" "),a("p",[e._v("(2) 找到数值的一补数，换句话说，就是每个 0 都变成 1，每个 1 都变成 0；")]),e._v(" "),a("p",[e._v("(3) 给结果加 1。")]),e._v(" "),a("p",[e._v("基于上述步骤确定-18 的二进制表示，首先从 18 的二进制表示开始：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0000  0000  0000  0000  0000  0000  0001  0010\n")])])]),a("p",[e._v("然后，计算一补数，即反转每一位的二进制值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1111  1111  1111  1111  1111  1111  1110  1101\n")])])]),a("p",[e._v("最后，给一补数加 1：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1111  1111  1111  1111  1111  1111  1110  1101\n                        1\n----------------------------------------------\n1111  1111  1111  1111  1111  1111  1110  1110\n")])])]),a("p",[e._v("那么，-18 的二进制表示就是 11111111111111111111111111101110。要注意的是，在处理有符号整数时，我们无法访问第 31 位。")]),e._v(" "),a("p",[e._v("ECMAScript 会帮我们记录这些信息。在把负值输出为一个二进制字符串时，我们会得到一个前面加了减号的绝对值，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = -18;\nconsole.log(num.toString(2)); // "-10010"\n')])])]),a("p",[e._v("在将-18 转换为二进制字符串时，结果得到-10010。转换过程会求得二补数，然后再以更符合逻辑的形式表示出来。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　默认情况下，ECMAScript 中的所有整数都表示为有符号数。不过，确实存在无符号整数。对无符号整数来说，第 32 位不表示符号，因为只有正值。无符号整数比有符号整数的范围更大，因为符号位被用来表示数值了。")])]),e._v(" "),a("p",[e._v("在对 ECMAScript 中的数值应用位操作符时，后台会发生转换：64 位数值会转换为 32 位数值，然后执行位操作，最后再把结果从 32 位转换为 64 位存储起来。整个过程就像处理 32 位数值一样，这让二进制操作变得与其他语言中类似。但这个转换也导致了一个奇特的副作用，即特殊值"),a("code",[e._v("NaN")]),e._v("和"),a("code",[e._v("Infinity")]),e._v("在位操作中都会被当成 0 处理。")]),e._v(" "),a("p",[e._v("如果将位操作符应用到非数值，那么首先会使用"),a("code",[e._v("Number()")]),e._v("函数将该值转换为数值（这个过程是自动的），然后再应用位操作。最终结果是数值。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("按位非")])]),e._v(" "),a("p",[e._v("按位非操作符用波浪符（"),a("code",[e._v("~")]),e._v("）表示，它的作用是返回数值的一补数。按位非是 ECMAScript 中为数不多的几个二进制数学操作符之一。看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num1 = 25;      // 二进制00000000000000000000000000011001\nlet num2 = ~num1;   // 二进制11111111111111111111111111100110\nconsole.log(num2);  // -26\n")])])]),a("p",[e._v("这里，按位非操作符作用到了数值 25，得到的结果是-26。由此可以看出，按位非的最终效果是对数值取反并减 1，就像执行如下操作的结果一样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = 25;\nlet num2 = -num1 - 1;\nconsole.log(num2);   // "-26"\n')])])]),a("p",[e._v("实际上，尽管两者返回的结果一样，但位操作的速度快得多。这是因为位操作是在数值的底层表示上完成的。")])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("按位与")])]),e._v(" "),a("p",[e._v("按位与操作符用和号（"),a("code",[e._v("&")]),e._v("）表示，有两个操作数。本质上，按位与就是将两个数的每一个位对齐，然后基于真值表中的规则，对每一位执行相应的与操作。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("第一个数值的位")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("第二个数值的位")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("结果")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")])])])]),e._v(" "),a("p",[e._v("按位与操作在两个位都是 1 时返回 1，在任何一位是 0 时返回 0。")]),e._v(" "),a("p",[e._v("下面看一个例子，我们对数值 25 和 3 求与操作，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 25 & 3;\nconsole.log(result); // 1\n")])])]),a("p",[e._v("25 和 3 的按位与操作的结果是 1。为什么呢？看下面的二进制计算过程：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" 25 = 0000 0000 0000 0000 0000 0000 0001 1001\n  3 = 0000 0000 0000 0000 0000 0000 0000 0011\n---------------------------------------------\nAND = 0000 0000 0000 0000 0000 0000 0000 0001\n")])])]),a("p",[e._v("如上所示，25 和 3 的二进制表示中，只有第 0 位上的两个数都是 1。于是结果数值的所有其他位都会以 0 填充，因此结果就是 1。")])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("按位或")])]),e._v(" "),a("p",[e._v("按位或操作符用管道符（"),a("code",[e._v("|")]),e._v("）表示，同样有两个操作数。按位或遵循如下真值表：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("第一个数值的位")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("第二个数值的位")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("结果")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")])])])]),e._v(" "),a("p",[e._v("按位或操作在至少一位是 1 时返回 1，两位都是 0 时返回 0。")]),e._v(" "),a("p",[e._v("仍然用按位与的示例，如果对 25 和 3 执行按位或，代码如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 25 | 3;\nconsole.log(result); // 27\n")])])]),a("p",[e._v("可见 25 和 3 的按位或操作的结果是 27：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" 25 = 0000 0000 0000 0000 0000 0000 0001 1001\n  3 = 0000 0000 0000 0000 0000 0000 0000 0011\n---------------------------------------------\n OR = 0000 0000 0000 0000 0000 0000 0001 1011\n")])])]),a("p",[e._v("在参与计算的两个数中，有 4 位都是 1，因此它们直接对应到结果上。二进制码 11011 等于 27。")])])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[e._v("按位异或")])]),e._v(" "),a("p",[e._v("按位异或用脱字符（"),a("code",[e._v("^")]),e._v("）表示，同样有两个操作数。下面是按位异或的真值表：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("第一个数的位")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("第二个数的位")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("结果")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("1")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[e._v("0")])])])]),e._v(" "),a("p",[e._v("按位异或与按位或的区别是，它只在一位上是 1 的时候返回 1（两位都是 1 或 0，则返回 0）。")]),e._v(" "),a("p",[e._v("对数值 25 和 3 执行按位异或操作：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 25 ^ 3;\nconsole.log(result); // 26\n")])])]),a("p",[e._v("可见，25 和 3 的按位异或操作结果为 26，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" 25 = 0000 0000 0000 0000 0000 0000 0001 1001\n  3 = 0000 0000 0000 0000 0000 0000 0000 0011\n---------------------------------------------\nXOR = 0000 0000 0000 0000 0000 0000 0001 1010\n")])])]),a("p",[e._v("两个数在 4 位上都是 1，但两个数的第 0 位都是 1，因此那一位在结果中就变成了 0。其余位上的 1 在另一个数上没有对应的 1，因此会直接传递到结果中。二进制码 11010 等于 26。（注意，这比对同样两个值执行按位或操作得到的结果小 1。）")])])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[a("strong",[e._v("左移")])]),e._v(" "),a("p",[e._v("左移操作符用两个小于号（"),a("code",[e._v("<<")]),e._v("）表示，会按照指定的位数将数值的所有位向左移动。比如，如果数值 2（二进制 10）向左移 5 位，就会得到 64（二进制 1000000），如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let oldValue = 2;              // 等于二进制10\nlet newValue = oldValue << 5;  // 等于二进制1000000，即十进制64\n")])])]),a("p",[e._v("注意在移位后，数值右端会空出 5 位。左移会以 0 填充这些空位，让结果是完整的 32 位数值（见图 3-2）。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/005.png",alt:"{%}"}})]),e._v(" "),a("p",[a("strong",[e._v("图　 3-2")])]),e._v(" "),a("p",[e._v("注意，左移会保留它所操作数值的符号。比如，如果-2 左移 5 位，将得到-64，而不是正 64。")])])]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[a("strong",[e._v("有符号右移")])]),e._v(" "),a("p",[e._v("有符号右移由两个大于号（"),a("code",[e._v(">>")]),e._v("）表示，会将数值的所有 32 位都向右移，同时保留符号（正或负）。有符号右移实际上是左移的逆运算。比如，如果将 64 右移 5 位，那就是 2：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let oldValue = 64;             // 等于二进制1000000\nlet newValue = oldValue >> 5;  // 等于二进制10，即十进制2\n")])])]),a("p",[e._v("同样，移位后就会出现空位。不过，右移后空位会出现在左侧，且在符号位之后（见图 3-3）。ECMAScript 会用符号位的值来填充这些空位，以得到完整的数值。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://www.ituring.com.cn/figures/2020/JavaScriptWebDeve4th/006.png",alt:"{%}"}})]),e._v(" "),a("p",[a("strong",[e._v("图　 3-3")])])])]),e._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("p",[a("strong",[e._v("无符号右移")])]),e._v(" "),a("p",[e._v("无符号右移用 3 个大于号表示（"),a("code",[e._v(">>>")]),e._v("），会将数值的所有 32 位都向右移。对于正数，无符号右移与有符号右移结果相同。仍然以前面有符号右移的例子为例，64 向右移动 5 位，会变成 2：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let oldValue = 64;              // 等于二进制1000000\nlet newValue = oldValue >>> 5;  // 等于二进制10，即十进制2\n")])])]),a("p",[e._v("对于负数，有时候差异会非常大。与有符号右移不同，无符号右移会给空位补 0，而不管符号位是什么。对正数来说，这跟有符号右移效果相同。但对负数来说，结果就差太多了。无符号右移操作符将负数的二进制表示当成正数的二进制表示来处理。因为负数是其绝对值的二补数，所以右移之后结果变得非常之大，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let oldValue = -64;              // 等于二进制11111111111111111111111111000000\nlet newValue = oldValue >>> 5;   // 等于十进制134217726\n")])])]),a("p",[e._v("在对-64 无符号右移 5 位后，结果是 134 217 726。这是因为-64 的二进制表示是 11111111111111111111111111000000，无符号右移却将它当成正值，也就是 4 294 967 232。把这个值右移 5 位后，结果是 00000111111111111111111111111110，即 134 217 726。")])])]),e._v(" "),a("h3",{attrs:{id:"_3-5-3-布尔操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-3-布尔操作符"}},[e._v("#")]),e._v(" 3.5.3 　布尔操作符")]),e._v(" "),a("p",[e._v("对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像"),a("code",[e._v("if-else")]),e._v("和循环这样的语句也没什么用了。布尔操作符一共有 3 个：逻辑非、逻辑与和逻辑或。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("逻辑非")])]),e._v(" "),a("p",[e._v("逻辑非操作符由一个叹号（"),a("code",[e._v("!")]),e._v("）表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。")]),e._v(" "),a("ul",[a("li",[e._v("如果操作数是对象，则返回"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("li",[e._v("如果操作数是空字符串，则返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("li",[e._v("如果操作数是非空字符串，则返回"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("li",[e._v("如果操作数是数值 0，则返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("li",[e._v("如果操作数是非 0 数值（包括"),a("code",[e._v("Infinity")]),e._v("），则返回"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("li",[e._v("如果操作数是"),a("code",[e._v("null")]),e._v("，则返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("li",[e._v("如果操作数是"),a("code",[e._v("NaN")]),e._v("，则返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("li",[e._v("如果操作数是"),a("code",[e._v("undefined")]),e._v("，则返回"),a("code",[e._v("true")]),e._v("。")])]),e._v(" "),a("p",[e._v("以下示例验证了上述行为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('console.log(!false);   // true\nconsole.log(!"blue");  // false\nconsole.log(!0);       // true\nconsole.log(!NaN);     // true\nconsole.log(!"");      // true\nconsole.log(!12345);   // false\n')])])]),a("p",[e._v("逻辑非操作符也可以用于把任意值转换为布尔值。同时使用两个叹号（"),a("code",[e._v("!!")]),e._v("），相当于调用了转型函数"),a("code",[e._v("Boolean()")]),e._v("。无论操作数是什么类型，第一个叹号总会返回布尔值。第二个叹号对该布尔值取反，从而给出变量真正对应的布尔值。结果与对同一个值使用"),a("code",[e._v("Boolean()")]),e._v("函数是一样的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('console.log(!!"blue"); // true\nconsole.log(!!0);      // false\nconsole.log(!!NaN);    // false\nconsole.log(!!"");     // false\nconsole.log(!!12345);  // true\n')])])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("逻辑与")])]),e._v(" "),a("p",[e._v("逻辑与操作符由两个和号（"),a("code",[e._v("&&")]),e._v("）表示，应用到两个值，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = true && false;\n")])])]),a("p",[e._v("逻辑与操作符遵循如下真值表：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("第一个操作数")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("第二个操作数")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("结果")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])])])]),e._v(" "),a("p",[e._v("逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，而是遵循如下规则。")]),e._v(" "),a("ul",[a("li",[e._v("如果第一个操作数是对象，则返回第二个操作数。")]),e._v(" "),a("li",[e._v("如果第二个操作数是对象，则只有第一个操作数求值为"),a("code",[e._v("true")]),e._v("才会返回该对象。")]),e._v(" "),a("li",[e._v("如果两个操作数都是对象，则返回第二个操作数。")]),e._v(" "),a("li",[e._v("如果有一个操作数是"),a("code",[e._v("null")]),e._v("，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有一个操作数是"),a("code",[e._v("NaN")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有一个操作数是"),a("code",[e._v("undefined")]),e._v("，则返回"),a("code",[e._v("undefined")]),e._v("。")])]),e._v(" "),a("p",[e._v("逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是"),a("code",[e._v("false")]),e._v("，那么无论第二个操作数是什么值，结果也不可能等于"),a("code",[e._v("true")]),e._v("。看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let found = true;\nlet result = (found && someUndeclaredVariable); // 这里会出错\nconsole.log(result); // 不会执行这一行\n")])])]),a("p",[e._v("上面的代码之所以会出错，是因为"),a("code",[e._v("someUndeclaredVariable")]),e._v("没有事先声明，所以当逻辑与操作符对它求值时就会报错。变量"),a("code",[e._v("found")]),e._v("的值是"),a("code",[e._v("true")]),e._v("，逻辑与操作符会继续求值变量"),a("code",[e._v("someUndeclaredVariable")]),e._v("。但是由于"),a("code",[e._v("someUndeclaredVariable")]),e._v("没有定义，不能对它应用逻辑与操作符，因此就报错了。假如变量"),a("code",[e._v("found")]),e._v("的值是"),a("code",[e._v("false")]),e._v("，那么就不会报错了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let found = false;\nlet result = (found && someUndeclaredVariable);  // 不会出错\nconsole.log(result);  // 会执行\n")])])]),a("p",[e._v("这里，"),a("code",[e._v("console.log")]),e._v("会成功执行。即使变量"),a("code",[e._v("someUndeclaredVariable")]),e._v("没有定义，由于第一个操作数是"),a("code",[e._v("false")]),e._v("，逻辑与操作符也不会对它求值，因为此时对"),a("code",[e._v("&&")]),e._v("右边的操作数求值是没有意义的。在使用逻辑与操作符时，一定别忘了它的这个短路的特性。")])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("逻辑或")])]),e._v(" "),a("p",[e._v("逻辑或操作符由两个管道符（"),a("code",[e._v("||")]),e._v("）表示，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = true || false;\n")])])]),a("p",[e._v("逻辑或操作符遵循如下真值表：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("第一个操作数")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("第二个操作数")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("结果")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])])])]),e._v(" "),a("p",[e._v("与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。它遵循如下规则。")]),e._v(" "),a("ul",[a("li",[e._v("如果第一个操作数是对象，则返回第一个操作数。")]),e._v(" "),a("li",[e._v("如果第一个操作数求值为"),a("code",[e._v("false")]),e._v("，则返回第二个操作数。")]),e._v(" "),a("li",[e._v("如果两个操作数都是对象，则返回第一个操作数。")]),e._v(" "),a("li",[e._v("如果两个操作数都是"),a("code",[e._v("null")]),e._v("，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("li",[e._v("如果两个操作数都是"),a("code",[e._v("NaN")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果两个操作数都是"),a("code",[e._v("undefined")]),e._v("，则返回"),a("code",[e._v("undefined")]),e._v("。")])]),e._v(" "),a("p",[e._v("同样与逻辑与类似，逻辑或操作符也具有短路的特性。只不过对逻辑或而言，第一个操作数求值为"),a("code",[e._v("true")]),e._v("，第二个操作数就不会再被求值了。看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let found = true;\nlet result = (found || someUndeclaredVariable); // 不会出错\nconsole.log(result); // 会执行\n")])])]),a("p",[e._v("跟前面的例子一样，变量"),a("code",[e._v("someUndeclaredVariable")]),e._v("也没有定义。但是，因为变量"),a("code",[e._v("found")]),e._v("的值为"),a("code",[e._v("true")]),e._v("，所以逻辑或操作符不会对变量"),a("code",[e._v("someUndeclaredVariable")]),e._v("求值，而直接返回"),a("code",[e._v("true")]),e._v("。假如把"),a("code",[e._v("found")]),e._v("的值改为"),a("code",[e._v("false")]),e._v("，那就会报错了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let found = false;\nlet result = (found || someUndeclaredVariable); // 这里会出错\nconsole.log(result); // 不会执行这一行\n")])])]),a("p",[e._v("利用这个行为，可以避免给变量赋值"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let myObject = preferredObject || backupObject;\n")])])]),a("p",[e._v("在这个例子中，变量"),a("code",[e._v("myObject")]),e._v("会被赋予两个值中的一个。其中，"),a("code",[e._v("preferredObject")]),e._v("变量包含首选的值，"),a("code",[e._v("backupObject")]),e._v("变量包含备用的值。如果"),a("code",[e._v("preferredObject")]),e._v("不是"),a("code",[e._v("null")]),e._v("，则它的值就会赋给"),a("code",[e._v("myObject")]),e._v("；如果"),a("code",[e._v("preferredObject")]),e._v("是"),a("code",[e._v("null")]),e._v("，则"),a("code",[e._v("backupObject")]),e._v("的值就会赋给"),a("code",[e._v("myObject")]),e._v("。这种模式在 ECMAScript 代码中经常用于变量赋值，本书后面的代码示例中也会经常用到。")])])]),e._v(" "),a("h3",{attrs:{id:"_3-5-4-乘性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-4-乘性操作符"}},[e._v("#")]),e._v(" 3.5.4 　乘性操作符")]),e._v(" "),a("p",[e._v("ECMAScript 定义了 3 个乘性操作符：乘法、除法和取模。这些操作符跟它们在 Java、C 语言及 Perl 中对应的操作符作用一样，但在处理非数值时，它们也会包含一些自动的类型转换。如果乘性操作符有不是数值的操作数，则该操作数会在后台被使用"),a("code",[e._v("Number()")]),e._v("转型函数转换为数值。这意味着空字符串会被当成 0，而布尔值"),a("code",[e._v("true")]),e._v("会被当成 1。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("乘法操作符")])]),e._v(" "),a("p",[e._v("乘法操作符由一个星号（"),a("code",[e._v("*")]),e._v("）表示，可以用于计算两个数值的乘积。其语法类似于 C 语言，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 34 * 56;\n")])])]),a("p",[e._v("不过，乘法操作符在处理特殊值时也有一些特殊的行为。")]),e._v(" "),a("ul",[a("li",[e._v("如果操作数都是数值，则执行常规的乘法运算，即两个正值相乘是正值，两个负值相乘也是正值，正负符号不同的值相乘得到负值。如果 ECMAScript 不能表示乘积，则返回"),a("code",[e._v("Infinity")]),e._v("或"),a("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有任一操作数是"),a("code",[e._v("NaN")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("乘以 0，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("乘以非 0 的有限数值，则根据第二个操作数的符号返回"),a("code",[e._v("Infinity")]),e._v("或"),a("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("乘以"),a("code",[e._v("Infinity")]),e._v("，则返回"),a("code",[e._v("Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有不是数值的操作数，则先在后台用"),a("code",[e._v("Number()")]),e._v("将其转换为数值，然后再应用上述规则。")])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("除法操作符")])]),e._v(" "),a("p",[e._v("除法操作符由一个斜杠（"),a("code",[e._v("/")]),e._v("）表示，用于计算第一个操作数除以第二个操作数的商，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 66 / 11;\n")])])]),a("p",[e._v("跟乘法操作符一样，除法操作符针对特殊值也有一些特殊的行为。")]),e._v(" "),a("ul",[a("li",[e._v("如果操作数都是数值，则执行常规的除法运算，即两个正值相除是正值，两个负值相除也是正值，符号不同的值相除得到负值。如果 ECMAScript 不能表示商，则返回"),a("code",[e._v("Infinity")]),e._v("或"),a("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有任一操作数是"),a("code",[e._v("NaN")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("除以"),a("code",[e._v("Infinity")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是 0 除以 0，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是非 0 的有限值除以 0，则根据第一个操作数的符号返回"),a("code",[e._v("Infinity")]),e._v("或"),a("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("除以任何数值，则根据第二个操作数的符号返回"),a("code",[e._v("Infinity")]),e._v("或"),a("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有不是数值的操作数，则先在后台用"),a("code",[e._v("Number()")]),e._v("函数将其转换为数值，然后再应用上述规则。")])])])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[e._v("取模操作符")])]),e._v(" "),a("p",[e._v("取模（余数）操作符由一个百分比符号（"),a("code",[e._v("%")]),e._v("）表示，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 26 % 5; // 等于1\n")])])]),a("p",[e._v("与其他乘性操作符一样，取模操作符对特殊值也有一些特殊的行为。")]),e._v(" "),a("ul",[a("li",[e._v("如果操作数是数值，则执行常规除法运算，返回余数。")]),e._v(" "),a("li",[e._v("如果被除数是无限值，除数是有限值，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果被除数是有限值，除数是 0，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("除以"),a("code",[e._v("Infinity")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果被除数是有限值，除数是无限值，则返回被除数。")]),e._v(" "),a("li",[e._v("如果被除数是 0，除数不是 0，则返回 0。")]),e._v(" "),a("li",[e._v("如果有不是数值的操作数，则先在后台用"),a("code",[e._v("Number()")]),e._v("函数将其转换为数值，然后再应用上述规则。")])])])]),e._v(" "),a("h3",{attrs:{id:"_3-5-5-指数操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-5-指数操作符"}},[e._v("#")]),e._v(" 3.5.5 　指数操作符")]),e._v(" "),a("p",[e._v("ECMAScript 7 新增了指数操作符，"),a("code",[e._v("Math.pow()")]),e._v("现在有了自己的操作符"),a("code",[e._v("**")]),e._v("，结果是一样的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(Math.pow(3, 2);    // 9\nconsole.log(3 ** 2);           // 9\n\nconsole.log(Math.pow(16, 0.5); // 4\nconsole.log(16** 0.5);         // 4\n")])])]),a("p",[e._v("不仅如此，指数操作符也有自己的指数赋值操作符"),a("code",[e._v("**=")]),e._v("，该操作符执行指数运算和结果的赋值操作：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let squared = 3;\nsquared **= 2;\nconsole.log(squared); // 9\n\nlet sqrt = 16;\nsqrt **= 0.5;\nconsole.log(sqrt); // 4\n")])])]),a("h3",{attrs:{id:"_3-5-6-加性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-6-加性操作符"}},[e._v("#")]),e._v(" 3.5.6 　加性操作符")]),e._v(" "),a("p",[e._v("加性操作符，即加法和减法操作符，一般都是编程语言中最简单的操作符。不过，在 ECMAScript 中，这两个操作符拥有一些特殊的行为。与乘性操作符类似，加性操作符在后台会发生不同数据类型的转换。只不过对这两个操作符来说，转换规则不是那么直观。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("加法操作符")])]),e._v(" "),a("p",[e._v("加法操作符（"),a("code",[e._v("+")]),e._v("）用于求两个数的和，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 1 + 2;\n")])])]),a("p",[e._v("如果两个操作数都是数值，加法操作符执行加法运算并根据如下规则返回结果：")]),e._v(" "),a("ul",[a("li",[e._v("如果有任一操作数是"),a("code",[e._v("NaN")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("；")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("加"),a("code",[e._v("Infinity")]),e._v("，则返回"),a("code",[e._v("Infinity")]),e._v("；")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("-Infinity")]),e._v("加"),a("code",[e._v("-Infinity")]),e._v("，则返回"),a("code",[e._v("-Infinity")]),e._v("；")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("加"),a("code",[e._v("-Infinity")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("；")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("+0")]),e._v("加"),a("code",[e._v("+0")]),e._v("，则返回"),a("code",[e._v("+0")]),e._v("；")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("-0")]),e._v("加"),a("code",[e._v("+0")]),e._v("，则返回"),a("code",[e._v("+0")]),e._v("；")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("-0")]),e._v("加"),a("code",[e._v("-0")]),e._v("，则返回"),a("code",[e._v("-0")]),e._v("。")])]),e._v(" "),a("p",[e._v("不过，如果有一个操作数是字符串，则要应用如下规则：")]),e._v(" "),a("ul",[a("li",[e._v("如果两个操作数都是字符串，则将第二个字符串拼接到第一个字符串后面；")]),e._v(" "),a("li",[e._v("如果只有一个操作数是字符串，则将另一个操作数转换为字符串，再将两个字符串拼接在一起。")])]),e._v(" "),a("p",[e._v("如果有任一操作数是对象、数值或布尔值，则调用它们的"),a("code",[e._v("toString()")]),e._v("方法以获取字符串，然后再应用前面的关于字符串的规则。对于"),a("code",[e._v("undefined")]),e._v("和"),a("code",[e._v("null")]),e._v("，则调用"),a("code",[e._v("String()")]),e._v("函数，分别获取"),a("code",[e._v('"undefined"')]),e._v("和"),a("code",[e._v('"null"')]),e._v("。")]),e._v(" "),a("p",[e._v("看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result1 = 5 + 5;        // 两个数值\nconsole.log(result1);       // 10\nlet result2 = 5 + "5";      // 一个数值和一个字符串\nconsole.log(result2);       // "55"\n')])])]),a("p",[e._v("以上代码展示了加法操作符的两种运算模式。正常情况下，"),a("code",[e._v("5 + 5")]),e._v("等于 10（数值），如前两行代码所示。但是，如果将一个操作数改为字符串，比如"),a("code",[e._v('"5"')]),e._v("，则相加的结果就变成了"),a("code",[e._v('"55"')]),e._v("（原始字符串值），因为第一个操作数也会被转换为字符串。")]),e._v(" "),a("p",[e._v("ECMAScript 中最常犯的一个错误，就是忽略加法操作中涉及的数据类型。比如下面这个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = 5;\nlet num2 = 10;\nlet message = "The sum of 5 and 10 is " + num1 + num2;\nconsole.log(message);  // "The sum of 5 and 10 is 510"\n')])])]),a("p",[e._v("这里，变量"),a("code",[e._v("message")]),e._v("中保存的是一个字符串，是执行两次加法操作之后的结果。有人可能会认为最终得到的字符串是"),a("code",[e._v('"The sum of 5 and 10 is 15"')]),e._v("。可是，实际上得到的是"),a("code",[e._v('"The sum of 5 and 10 is 510"')]),e._v("。这是因为每次加法运算都是独立完成的。第一次加法的操作数是一个字符串和一个数值（5），结果还是一个字符串。第二次加法仍然是用一个字符串去加一个数值（10），同样也会得到一个字符串。如果想真正执行数学计算，然后把结果追加到字符串末尾，只要使用一对括号即可：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num1 = 5;\nlet num2 = 10;\nlet message = "The sum of 5 and 10 is " + (num1 + num2);\nconsole.log(message); // "The sum of 5 and 10 is 15"\n')])])]),a("p",[e._v("在此，我们用括号把两个数值变量括了起来，意思是让解释器先执行两个数值的加法，然后再把结果追加给字符串。因此，最终得到的字符串变成了"),a("code",[e._v('"The sum of 5 and 10 is 15"')]),e._v("。")])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("减法操作符")])]),e._v(" "),a("p",[e._v("减法操作符（"),a("code",[e._v("-")]),e._v("）也是使用很频繁的一种操作符，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result = 2 - 1;\n")])])]),a("p",[e._v("与加法操作符一样，减法操作符也有一组规则用于处理 ECMAScript 中不同类型之间的转换。")]),e._v(" "),a("ul",[a("li",[e._v("如果两个操作数都是数值，则执行数学减法运算并返回结果。")]),e._v(" "),a("li",[e._v("如果有任一操作数是"),a("code",[e._v("NaN")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("减"),a("code",[e._v("Infinity")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("-Infinity")]),e._v("减"),a("code",[e._v("-Infinity")]),e._v("，则返回"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("Infinity")]),e._v("减"),a("code",[e._v("-Infinity")]),e._v("，则返回"),a("code",[e._v("Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("-Infinity")]),e._v("减"),a("code",[e._v("Infinity")]),e._v("，则返回"),a("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("+0")]),e._v("减"),a("code",[e._v("+0")]),e._v("，则返回"),a("code",[e._v("+0")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("+0")]),e._v("减"),a("code",[e._v("-0")]),e._v("，则返回"),a("code",[e._v("-0")]),e._v("。")]),e._v(" "),a("li",[e._v("如果是"),a("code",[e._v("-0")]),e._v("减"),a("code",[e._v("-0")]),e._v("，则返回"),a("code",[e._v("+0")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有任一操作数是字符串、布尔值、"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("，则先在后台使用"),a("code",[e._v("Number()")]),e._v("将其转换为数值，然后再根据前面的规则执行数学运算。如果转换结果是"),a("code",[e._v("NaN")]),e._v("，则减法计算的结果是"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果有任一操作数是对象，则调用其"),a("code",[e._v("valueOf()")]),e._v("方法取得表示它的数值。如果该值是"),a("code",[e._v("NaN")]),e._v("，则减法计算的结果是"),a("code",[e._v("NaN")]),e._v("。如果对象没有"),a("code",[e._v("valueOf()")]),e._v("方法，则调用其"),a("code",[e._v("toString()")]),e._v("方法，然后再将得到的字符串转换为数值。")])]),e._v(" "),a("p",[e._v("以下示例演示了上面的规则：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result1 = 5 - true; // true被转换为1，所以结果是4\nlet result2 = NaN - 1;  // NaN\nlet result3 = 5 - 3;    // 2\nlet result4 = 5 - "";   // ""被转换为0，所以结果是5\nlet result5 = 5 - "2";  // "2"被转换为2，所以结果是3\nlet result6 = 5 - null; // null被转换为0，所以结果是5\n')])])])])]),e._v(" "),a("h3",{attrs:{id:"_3-5-7-关系操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-7-关系操作符"}},[e._v("#")]),e._v(" 3.5.7 　关系操作符")]),e._v(" "),a("p",[e._v("关系操作符执行比较两个值的操作，包括小于（"),a("code",[e._v("<")]),e._v("）、大于（"),a("code",[e._v(">")]),e._v("）、小于等于（"),a("code",[e._v("<=")]),e._v("）和大于等于（"),a("code",[e._v(">=")]),e._v("），用法跟数学课上学的一样。这几个操作符都返回布尔值，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result1 = 5 > 3; // true\nlet result2 = 5 < 3; // false\n")])])]),a("p",[e._v("与 ECMAScript 中的其他操作符一样，在将它们应用到不同数据类型时也会发生类型转换和其他行为。")]),e._v(" "),a("ul",[a("li",[e._v("如果操作数都是数值，则执行数值比较。")]),e._v(" "),a("li",[e._v("如果操作数都是字符串，则逐个比较字符串中对应字符的编码。")]),e._v(" "),a("li",[e._v("如果有任一操作数是数值，则将另一个操作数转换为数值，执行数值比较。")]),e._v(" "),a("li",[e._v("如果有任一操作数是对象，则调用其"),a("code",[e._v("valueOf()")]),e._v("方法，取得结果后再根据前面的规则执行比较。如果没有"),a("code",[e._v("valueOf()")]),e._v("操作符，则调用"),a("code",[e._v("toString()")]),e._v("方法，取得结果后再根据前面的规则执行比较。")]),e._v(" "),a("li",[e._v("如果有任一操作数是布尔值，则将其转换为数值再执行比较。")])]),e._v(" "),a("p",[e._v("在使用关系操作符比较两个字符串时，会发生一个有趣的现象。很多人认为小于意味着“字母顺序靠前”，而大于意味着“字母顺序靠后”，实际上不是这么回事。对字符串而言，关系操作符会比较字符串中对应字符的编码，而这些编码是数值。比较完之后，会返回布尔值。问题的关键在于，大写字母的编码都小于小写字母的编码，因此以下这种情况就会发生：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result = "Brick" < "alphabet"; // true\n')])])]),a("p",[e._v("在这里，字符串"),a("code",[e._v('"Brick"')]),e._v("被认为小于字符串"),a("code",[e._v('"alphabet"')]),e._v("，因为字母 B 的编码的 66，字母 a 的编码是 97。要得到确实按字母顺序比较的结果，就必须把两者都转换为相同的大小写形式（全大写或全小写），然后再比较：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result = "Brick".toLowerCase() < "alphabet".toLowerCase(); // false\n')])])]),a("p",[e._v("将两个操作数都转换为小写，就能保证按照字母表顺序判定"),a("code",[e._v('"alphabet"')]),e._v("在"),a("code",[e._v('"Brick"')]),e._v("前头。")]),e._v(" "),a("p",[e._v("另一个奇怪的现象是在比较两个数值字符串的时候，比如下面这个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result = "23" < "3"; // true\n')])])]),a("p",[e._v("这里在比较字符串"),a("code",[e._v('"23"')]),e._v("和"),a("code",[e._v('"3"')]),e._v("时返回"),a("code",[e._v("true")]),e._v("。因为两个操作数都是字符串，所以会逐个比较它们的字符编码（字符"),a("code",[e._v('"2"')]),e._v("的编码是 50，而字符"),a("code",[e._v('"3"')]),e._v("的编码是 51）。不过，如果有一个操作数是数值，那么比较的结果就对了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result = "23" < 3; // false\n')])])]),a("p",[e._v("因为这次会将字符串"),a("code",[e._v('"23"')]),e._v("转换为数值 23，然后再跟 3 比较，结果当然对了。只要是数值和字符串比较，字符串就会先被转换为数值，然后进行数值比较。对于数值字符串而言，这样能保证结果正确。但如果字符串不能转换成数值呢？比如下面这个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result = "a" < 3; // 因为"a"会转换为NaN，所以结果是false\n')])])]),a("p",[e._v("因为字符"),a("code",[e._v('"a"')]),e._v("不能转换成任何有意义的数值，所以只能转换为"),a("code",[e._v("NaN")]),e._v("。这里有一个规则，即任何关系操作符在涉及比较"),a("code",[e._v("NaN")]),e._v("时都返回"),a("code",[e._v("false")]),e._v("。这样一来，下面的例子有趣了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let result1 = NaN < 3;  // false\nlet result2 = NaN >= 3; // false\n")])])]),a("p",[e._v("在大多数比较的场景中，如果一个值不小于另一个值，那就一定大于或等于它。但在比较"),a("code",[e._v("NaN")]),e._v("时，无论是小于还是大于等于，比较的结果都会返回"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"_3-5-8-相等操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-8-相等操作符"}},[e._v("#")]),e._v(" 3.5.8 　相等操作符")]),e._v(" "),a("p",[e._v("判断两个变量是否相等是编程中最重要的操作之一。在比较字符串、数值和布尔值是否相等时，过程都很直观。但是在比较两个对象是否相等时，情形就比较复杂了。ECMAScript 中的相等和不相等操作符，原本在比较之前会执行类型转换，但很快就有人质疑这种转换是否应该发生。最终，ECMAScript 提供了两组操作符。第一组是"),a("strong",[e._v("等于")]),e._v("和"),a("strong",[e._v("不等于")]),e._v("，它们在比较之前执行转换。第二组是"),a("strong",[e._v("全等")]),e._v("和"),a("strong",[e._v("不全等")]),e._v("，它们在比较之前不执行转换。")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("等于和不等于")])]),e._v(" "),a("p",[e._v("ECMAScript 中的等于操作符用两个等于号（"),a("code",[e._v("==")]),e._v("）表示，如果操作数相等，则会返回"),a("code",[e._v("true")]),e._v("。不等于操作符用叹号和等于号（"),a("code",[e._v("!=")]),e._v("）表示，如果两个操作数不相等，则会返回"),a("code",[e._v("true")]),e._v("。这两个操作符都会先进行类型转换（通常称为"),a("strong",[e._v("强制类型转换")]),e._v("）再确定操作数是否相等。")]),e._v(" "),a("p",[e._v("在转换操作数的类型时，相等和不相等操作符遵循如下规则。")]),e._v(" "),a("ul",[a("li",[e._v("如果任一操作数是布尔值，则将其转换为数值再比较是否相等。"),a("code",[e._v("false")]),e._v("转换为 0，"),a("code",[e._v("true")]),e._v("转换为 1。")]),e._v(" "),a("li",[e._v("如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等。")]),e._v(" "),a("li",[e._v("如果一个操作数是对象，另一个操作数不是，则调用对象的"),a("code",[e._v("valueOf()")]),e._v("方法取得其原始值，再根据前面的规则进行比较。")])]),e._v(" "),a("p",[e._v("在进行比较时，这两个操作符会遵循如下规则。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("相等。")]),e._v(" "),a("li",[a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("不能转换为其他类型的值再进行比较。")]),e._v(" "),a("li",[e._v("如果有任一操作数是"),a("code",[e._v("NaN")]),e._v("，则相等操作符返回"),a("code",[e._v("false")]),e._v("，不相等操作符返回"),a("code",[e._v("true")]),e._v("。记住：即使两个操作数都是"),a("code",[e._v("NaN")]),e._v("，相等操作符也返回"),a("code",[e._v("false")]),e._v("，因为按照规则，"),a("code",[e._v("NaN")]),e._v("不等于"),a("code",[e._v("NaN")]),e._v("。")]),e._v(" "),a("li",[e._v("如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回"),a("code",[e._v("true")]),e._v("。否则，两者不相等。")])]),e._v(" "),a("p",[e._v("下表总结了一些特殊情况及比较的结果。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[e._v("表达式")]),e._v(" "),a("th",{staticStyle:{"text-align":"left"}},[e._v("结果")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("null == undefined")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('"NaN" == NaN')])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("5 == NaN")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("NaN == NaN")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("NaN != NaN")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false == 0")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true == 1")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true == 2")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("undefined == 0")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("null == 0")])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("false")])])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v('"5" == 5')])]),e._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[e._v("true")])])])])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[e._v("全等和不全等")])]),e._v(" "),a("p",[e._v("全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号（"),a("code",[e._v("===")]),e._v("）表示，只有两个操作数在不转换的前提下相等才返回"),a("code",[e._v("true")]),e._v("，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result1 = ("55" == 55);   // true，转换后相等\nlet result2 = ("55" === 55);  // false，不相等，因为数据类型不同\n')])])]),a("p",[e._v("在这个例子中，第一个比较使用相等操作符，比较的是字符串"),a("code",[e._v('"55"')]),e._v("和数值"),a("code",[e._v("55")]),e._v("。如前所述，因为字符串"),a("code",[e._v('"55"')]),e._v("会被转换为数值 55，然后再与数值 55 进行比较，所以返回"),a("code",[e._v("true")]),e._v("。第二个比较使用全等操作符，因为没有转换，字符串和数值当然不能相等，所以返回"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("p",[e._v("不全等操作符用一个叹号和两个等于号（"),a("code",[e._v("!==")]),e._v("）表示，只有两个操作数在不转换的前提下不相等才返回"),a("code",[e._v("true")]),e._v("。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let result1 = ("55" != 55);  // false，转换后相等\nlet result2 = ("55" !== 55); // true，不相等，因为数据类型不同\n')])])]),a("p",[e._v("这一次，第一个比较使用不相等操作符，它会把字符串"),a("code",[e._v('"55"')]),e._v("转换为数值"),a("code",[e._v("55")]),e._v("，跟第二个操作数相等。既然转换后两个值相等，那就返回"),a("code",[e._v("false")]),e._v("。第二个比较使用不全等操作符。这时候可以这么问：“字符串 55 和数值 55 有区别吗？”答案是“有”（"),a("code",[e._v("true")]),e._v("）。")]),e._v(" "),a("p",[e._v("另外，虽然"),a("code",[e._v("null == undefined")]),e._v("是"),a("code",[e._v("true")]),e._v("（因为这两个值类似），但"),a("code",[e._v("null === undefined")]),e._v("是"),a("code",[e._v("false")]),e._v("，因为它们不是相同的数据类型。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　由于相等和不相等操作符存在类型转换问题，因此推荐使用全等和不全等操作符。这样有助于在代码中保持数据类型的完整性。")])])])]),e._v(" "),a("h3",{attrs:{id:"_3-5-9-条件操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-9-条件操作符"}},[e._v("#")]),e._v(" 3.5.9 　条件操作符")]),e._v(" "),a("p",[e._v("条件操作符是 ECMAScript 中用途最为广泛的操作符之一，语法跟 Java 中一样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("variable = boolean_expression ? true_value : false_value;\n")])])]),a("p",[e._v("上面的代码执行了条件赋值操作，即根据条件表达式"),a("code",[e._v("boolean_expression")]),e._v("的值决定将哪个值赋给变量"),a("code",[e._v("variable")]),e._v("。如果"),a("code",[e._v("boolean_expression")]),e._v("是"),a("code",[e._v("true")]),e._v("，则赋值"),a("code",[e._v("true_value")]),e._v("；如果"),a("code",[e._v("boolean_expression")]),e._v("是"),a("code",[e._v("false")]),e._v("，则赋值"),a("code",[e._v("false_value")]),e._v("。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let max = (num1 > num2) ? num1 : num2;\n")])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("max")]),e._v("将被赋予一个最大值。这个表达式的意思是，如果"),a("code",[e._v("num1")]),e._v("大于"),a("code",[e._v("num2")]),e._v("（条件表达式为"),a("code",[e._v("true")]),e._v("），则将"),a("code",[e._v("num1")]),e._v("赋给"),a("code",[e._v("max")]),e._v("。否则，如果"),a("code",[e._v("num1")]),e._v("小于"),a("code",[e._v("num2")]),e._v("（条件表达式为"),a("code",[e._v("false")]),e._v("），则将"),a("code",[e._v("num2")]),e._v("赋给"),a("code",[e._v("max")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"_3-5-10-赋值操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-10-赋值操作符"}},[e._v("#")]),e._v(" 3.5.10 　赋值操作符")]),e._v(" "),a("p",[e._v("简单赋值用等于号（"),a("code",[e._v("=")]),e._v("）表示，将右手边的值赋给左手边的变量，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 10;\n")])])]),a("p",[e._v("复合赋值使用乘性、加性或位操作符后跟等于号（"),a("code",[e._v("=")]),e._v("）表示。这些赋值操作符是类似如下常见赋值操作的简写形式：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 10;\nnum = num + 10;\n")])])]),a("p",[e._v("以上代码的第二行可以通过复合赋值来完成：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 10;\nnum += 10;\n")])])]),a("p",[e._v("每个数学操作符以及其他一些操作符都有对应的复合赋值操作符：")]),e._v(" "),a("ul",[a("li",[e._v("乘后赋值（"),a("code",[e._v("*=")]),e._v("）")]),e._v(" "),a("li",[e._v("除后赋值（"),a("code",[e._v("/=")]),e._v("）")]),e._v(" "),a("li",[e._v("取模后赋值（"),a("code",[e._v("%=")]),e._v("）")]),e._v(" "),a("li",[e._v("加后赋值（"),a("code",[e._v("+=")]),e._v("）")]),e._v(" "),a("li",[e._v("减后赋值（"),a("code",[e._v("-=")]),e._v("）")]),e._v(" "),a("li",[e._v("左移后赋值（"),a("code",[e._v("<<=")]),e._v("）")]),e._v(" "),a("li",[e._v("右移后赋值（"),a("code",[e._v(">>=")]),e._v("）")]),e._v(" "),a("li",[e._v("无符号右移后赋值（"),a("code",[e._v(">>>=")]),e._v("）")])]),e._v(" "),a("p",[e._v("这些操作符仅仅是简写语法，使用它们不会提升性能。")]),e._v(" "),a("h3",{attrs:{id:"_3-5-11-逗号操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-11-逗号操作符"}},[e._v("#")]),e._v(" 3.5.11 　逗号操作符")]),e._v(" "),a("p",[e._v("逗号操作符可以用来在一条语句中执行多个操作，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num1 = 1, num2 = 2, num3 = 3;\n")])])]),a("p",[e._v("在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = (5, 1, 4, 8, 0); // num的值为0\n")])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("num")]),e._v("将被赋值为 0，因为 0 是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。")]),e._v(" "),a("h2",{attrs:{id:"_3-6-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-语句"}},[e._v("#")]),e._v(" 3.6 　语句")]),e._v(" "),a("p",[e._v("ECMA-262 描述了一些语句（也称为"),a("strong",[e._v("流控制语句")]),e._v("），而 ECMAScript 中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。")]),e._v(" "),a("h3",{attrs:{id:"_3-6-1-if语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-1-if语句"}},[e._v("#")]),e._v(" 3.6.1 　"),a("code",[e._v("if")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("if")]),e._v("语句是使用最频繁的语句之一，语法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (condition) statement1 else statement2\n")])])]),a("p",[e._v("这里的条件（"),a("code",[e._v("condition")]),e._v("）可以是任何表达式，并且求值结果不一定是布尔值。ECMAScript 会自动调用"),a("code",[e._v("Boolean()")]),e._v("函数将这个表达式的值转换为布尔值。如果条件求值为"),a("code",[e._v("true")]),e._v("，则执行语句"),a("code",[e._v("statement1")]),e._v("；如果条件求值为"),a("code",[e._v("false")]),e._v("，则执行语句"),a("code",[e._v("statement2")]),e._v("。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。来看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (i > 25)\n  console.log("Greater than 25."); // 只有一行代码的语句\nelse {\n  console.log("Less than or equal to 25."); // 一个语句块\n}\n')])])]),a("p",[e._v("这里的最佳实践是使用语句块，即使只有一行代码要执行也是如此。这是因为语句块可以避免对什么条件下执行什么产生困惑。")]),e._v(" "),a("p",[e._v("可以像这样连续使用多个"),a("code",[e._v("if")]),e._v("语句：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (condition1) statement1 else if (condition2) statement2 else statement3\n")])])]),a("p",[e._v("下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (i > 25) {\n  console.log("Greater than 25.");\n} else if (i < 0) {\n  console.log("Less than 0.");\n} else {\n  console.log("Between 0 and 25, inclusive.");\n}\n')])])]),a("h3",{attrs:{id:"_3-6-2-do-while语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-2-do-while语句"}},[e._v("#")]),e._v(" 3.6.2 　"),a("code",[e._v("do-while")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("do-while")]),e._v("语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。"),a("code",[e._v("do-while")]),e._v("的语法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  statement\n} while (expression);\n")])])]),a("p",[e._v("下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let i = 0;\ndo {\n  i += 2;\n} while (i < 10);\n")])])]),a("p",[e._v("在这个例子中，只要"),a("code",[e._v("i")]),e._v("小于 10，循环就会重复执行。"),a("code",[e._v("i")]),e._v("从 0 开始，每次循环递增 2。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　后测试循环经常用于这种情形：循环体内代码在退出前至少要执行一次。")])]),e._v(" "),a("h3",{attrs:{id:"_3-6-3-while语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-3-while语句"}},[e._v("#")]),e._v(" 3.6.3 　"),a("code",[e._v("while")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("while")]),e._v("语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，"),a("code",[e._v("while")]),e._v("循环体内的代码有可能不会执行。下面是"),a("code",[e._v("while")]),e._v("循环的语法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("while(expression) statement\n")])])]),a("p",[e._v("这是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let i = 0;\nwhile (i < 10) {\n  i += 2;\n}\n")])])]),a("p",[e._v("在这个例子中，变量"),a("code",[e._v("i")]),e._v("从 0 开始，每次循环递增 2。只要"),a("code",[e._v("i")]),e._v("小于 10，循环就会继续。")]),e._v(" "),a("h3",{attrs:{id:"_3-6-4-for语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-4-for语句"}},[e._v("#")]),e._v(" 3.6.4 　"),a("code",[e._v("for")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("for")]),e._v("语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式，语法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (initialization; expression; post-loop-expression) statement\n")])])]),a("p",[e._v("下面是一个用例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let count = 10;\nfor (let i = 0; i < count; i++) {\n  console.log(i);\n}\n")])])]),a("p",[e._v("以上代码在循环开始前定义了变量"),a("code",[e._v("i")]),e._v("的初始值为 0。然后求值条件表达式，如果求值结果为"),a("code",[e._v("true")]),e._v("（"),a("code",[e._v("i < count")]),e._v("），则执行循环体。因此循环体也可能不会被执行。如果循环体被执行了，则循环后表达式也会执行，以便递增变量"),a("code",[e._v("i")]),e._v("。"),a("code",[e._v("for")]),e._v("循环跟下面的"),a("code",[e._v("while")]),e._v("循环是一样的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let count = 10;\nlet i = 0;\nwhile (i < count) {\n  console.log(i);\n  i++;\n}\n")])])]),a("p",[e._v("无法通过"),a("code",[e._v("while")]),e._v("循环实现的逻辑，同样也无法使用"),a("code",[e._v("for")]),e._v("循环实现。因此"),a("code",[e._v("for")]),e._v("循环只是将循环相关的代码封装在了一起而已。")]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("for")]),e._v("循环的初始化代码中，其实是可以不使用变量声明关键字的。不过，初始化定义的迭代器变量在循环执行完成后几乎不可能再用到了。因此，最清晰的写法是使用"),a("code",[e._v("let")]),e._v("声明迭代器变量，这样就可以将这个变量的作用域限定在循环中。")]),e._v(" "),a("p",[e._v("初始化、条件表达式和循环后表达式都不是必需的。因此，下面这种写法可以创建一个无穷循环：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (;;) { // 无穷循环\n  doSomething();\n}\n")])])]),a("p",[e._v("如果只包含条件表达式，那么"),a("code",[e._v("for")]),e._v("循环实际上就变成了"),a("code",[e._v("while")]),e._v("循环：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let count = 10;\nlet i = 0;\nfor (; i < count; ) {\n  console.log(i);\n  i++;\n}\n")])])]),a("p",[e._v("这种多功能性使得"),a("code",[e._v("for")]),e._v("语句在这门语言中使用非常广泛。")]),e._v(" "),a("h3",{attrs:{id:"_3-6-5-for-in语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-5-for-in语句"}},[e._v("#")]),e._v(" 3.6.5 　"),a("code",[e._v("for-in")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("for-in")]),e._v("语句是一种严格的迭代语句，用于枚举对象中的非符号键属性，语法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (property in expression) statement\n")])])]),a("p",[e._v("下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (const propName in window) {\n  document.write(propName);\n}\n")])])]),a("p",[e._v("这个例子使用"),a("code",[e._v("for-in")]),e._v("循环显示了 BOM 对象"),a("code",[e._v("window")]),e._v("的所有属性。每次执行循环，都会给变量"),a("code",[e._v("propName")]),e._v("赋予一个"),a("code",[e._v("window")]),e._v("对象的属性作为值，直到"),a("code",[e._v("window")]),e._v("的所有属性都被枚举一遍。与"),a("code",[e._v("for")]),e._v("循环一样，这里控制语句中的"),a("code",[e._v("const")]),e._v("也不是必需的。但为了确保这个局部变量不被修改，推荐使用"),a("code",[e._v("const")]),e._v("。")]),e._v(" "),a("p",[e._v("ECMAScript 中对象的属性是无序的，因此"),a("code",[e._v("for-in")]),e._v("语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。")]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("for-in")]),e._v("循环要迭代的变量是"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("，则不执行循环体。")]),e._v(" "),a("h3",{attrs:{id:"_3-6-6-for-of语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-6-for-of语句"}},[e._v("#")]),e._v(" 3.6.6 　"),a("code",[e._v("for-of")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("for-of")]),e._v("语句是一种严格的迭代语句，用于遍历可迭代对象的元素，语法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (property of expression) statement\n")])])]),a("p",[e._v("下面是示例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (const el of [2,4,6,8]) {\n  document.write(el);\n}\n")])])]),a("p",[e._v("在这个例子中，我们使用"),a("code",[e._v("for-of")]),e._v("语句显示了一个包含 4 个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与"),a("code",[e._v("for")]),e._v("循环一样，这里控制语句中的"),a("code",[e._v("const")]),e._v("也不是必需的。但为了确保这个局部变量不被修改，推荐使用"),a("code",[e._v("const")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("for-of")]),e._v("循环会按照可迭代对象的"),a("code",[e._v("next()")]),e._v("方法产生值的顺序迭代元素。关于可迭代对象，本书将在第 7 章详细介绍。")]),e._v(" "),a("p",[e._v("如果尝试迭代的变量不支持迭代，则"),a("code",[e._v("for-of")]),e._v("语句会抛出错误。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　 ES2018 对"),a("code",[e._v("for-of")]),e._v("语句进行了扩展，增加了"),a("code",[e._v("for-await-of")]),e._v("循环，以支持生成期约（promise）的异步可迭代对象。相关内容将在附录 A 介绍。")])]),e._v(" "),a("h3",{attrs:{id:"_3-6-7-标签语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-7-标签语句"}},[e._v("#")]),e._v(" 3.6.7 　标签语句")]),e._v(" "),a("p",[e._v("标签语句用于给语句加标签，语法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("label: statement\n")])])]),a("p",[e._v("下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("start: for (let i = 0; i < count; i++) {\n  console.log(i);\n}\n")])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("start")]),e._v("是一个标签，可以在后面通过"),a("code",[e._v("break")]),e._v("或"),a("code",[e._v("continue")]),e._v("语句引用。标签语句的典型应用场景是嵌套循环。")]),e._v(" "),a("h3",{attrs:{id:"_3-6-8-break和continue语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-8-break和continue语句"}},[e._v("#")]),e._v(" 3.6.8 　"),a("code",[e._v("break")]),e._v("和"),a("code",[e._v("continue")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("break")]),e._v("和"),a("code",[e._v("continue")]),e._v("语句为执行循环代码提供了更严格的控制手段。其中，"),a("code",[e._v("break")]),e._v("语句用于立即退出循环，强制执行循环后的下一条语句。而"),a("code",[e._v("continue")]),e._v("语句也用于立即退出循环，但会再次从循环顶部开始执行。下面看一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 0;\n\nfor (let i = 1; i < 10; i++) {\n  if (i % 5 == 0) {\n    break;\n  }\n  num++;\n}\n\nconsole.log(num); // 4\n")])])]),a("p",[e._v("在上面的代码中，"),a("code",[e._v("for")]),e._v("循环会将变量"),a("code",[e._v("i")]),e._v("由 1 递增到 10。而在循环体内，有一个"),a("code",[e._v("if")]),e._v("语句用于检查"),a("code",[e._v("i")]),e._v("能否被 5 整除（使用取模操作符）。如果是，则执行"),a("code",[e._v("break")]),e._v("语句，退出循环。变量"),a("code",[e._v("num")]),e._v("的初始值为 0，表示循环在退出前执行了多少次。当"),a("code",[e._v("break")]),e._v("语句执行后，下一行执行的代码是"),a("code",[e._v("console.log(num)")]),e._v("，显示 4。之所以循环执行了 4 次，是因为当"),a("code",[e._v("i")]),e._v("等于 5 时，"),a("code",[e._v("break")]),e._v("语句会导致循环退出，该次循环不会执行递增"),a("code",[e._v("num")]),e._v("的代码。如果将"),a("code",[e._v("break")]),e._v("换成"),a("code",[e._v("continue")]),e._v("，则会出现不同的效果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 0;\n\nfor (let i = 1; i < 10; i++) {\n  if (i % 5 == 0) {\n    continue;\n  }\n  num++;\n}\n\nconsole.log(num); // 8\n")])])]),a("p",[e._v("这一次，"),a("code",[e._v("console.log")]),e._v("显示 8，即循环被完整执行了 8 次。当"),a("code",[e._v("i")]),e._v("等于 5 时，循环会在递增"),a("code",[e._v("num")]),e._v("之前退出，但会执行下一次迭代，此时"),a("code",[e._v("i")]),e._v("是 6。然后，循环会一直执行到自然结束，即"),a("code",[e._v("i")]),e._v("等于 10。最终"),a("code",[e._v("num")]),e._v("的值是 8 而不是 9，是因为"),a("code",[e._v("continue")]),e._v("语句导致它少递增了一次。")]),e._v(" "),a("p",[a("code",[e._v("break")]),e._v("和"),a("code",[e._v("continue")]),e._v("都可以与标签语句一起使用，返回代码中特定的位置。这通常是在嵌套循环中，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 0;\n\noutermost:\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    if (i == 5 && j == 5) {\n      break outermost;\n    }\n    num++;\n  }\n}\n\nconsole.log(num); // 55\n")])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("outermost")]),e._v("标签标识的是第一个"),a("code",[e._v("for")]),e._v("语句。正常情况下，每个循环执行 10 次，意味着"),a("code",[e._v("num++")]),e._v("语句会执行 100 次，而循环结束时"),a("code",[e._v("console.log")]),e._v("的结果应该是 100。但是，"),a("code",[e._v("break")]),e._v("语句带来了一个变数，即要退出到的标签。添加标签不仅让"),a("code",[e._v("break")]),e._v("退出（使用变量"),a("code",[e._v("j")]),e._v("的）内部循环，也会退出（使用变量"),a("code",[e._v("i")]),e._v("）的外部循环。当执行到"),a("code",[e._v("i")]),e._v("和"),a("code",[e._v("j")]),e._v("都等于 5 时，循环停止执行，此时"),a("code",[e._v("num")]),e._v("的值是 55。"),a("code",[e._v("continue")]),e._v("语句也可以使用标签，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let num = 0;\n\noutermost:\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    if (i == 5 && j == 5) {\n      continue outermost;\n    }\n    num++;\n  }\n}\n\nconsole.log(num); // 95\n")])])]),a("p",[e._v("这一次，"),a("code",[e._v("continue")]),e._v("语句会强制循环继续执行，但不是继续执行内部循环，而是继续执行外部循环。当"),a("code",[e._v("i")]),e._v("和"),a("code",[e._v("j")]),e._v("都等于 5 时，会执行"),a("code",[e._v("continue")]),e._v("，跳到外部循环继续执行，从而导致内部循环少执行 5 次，结果"),a("code",[e._v("num")]),e._v("等于 95。")]),e._v(" "),a("p",[e._v("组合使用标签语句和"),a("code",[e._v("break")]),e._v("、"),a("code",[e._v("continue")]),e._v("能实现复杂的逻辑，但也容易出错。注意标签要使用描述性强的文本，而嵌套也不要太深。")]),e._v(" "),a("h3",{attrs:{id:"_3-6-9-with语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-9-with语句"}},[e._v("#")]),e._v(" 3.6.9 　"),a("code",[e._v("with")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("with")]),e._v("语句的用途是将代码作用域设置为特定的对象，其语法是：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("with (expression) statement;\n")])])]),a("p",[e._v("使用"),a("code",[e._v("with")]),e._v("语句的主要场景是针对一个对象反复操作，这时候将代码作用域设置为该对象能提供便利，如下面的例子所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let qs = location.search.substring(1);\nlet hostName = location.hostname;\nlet url = location.href;\n")])])]),a("p",[e._v("上面代码中的每一行都用到了"),a("code",[e._v("location")]),e._v("对象。如果使用"),a("code",[e._v("with")]),e._v("语句，就可以少写一些代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("with(location) {\n  let qs = search.substring(1);\n  let hostName = hostname;\n  let url = href;\n}\n")])])]),a("p",[e._v("这里，"),a("code",[e._v("with")]),e._v("语句用于连接"),a("code",[e._v("location")]),e._v("对象。这意味着在这个语句内部，每个变量首先会被认为是一个局部变量。如果没有找到该局部变量，则会搜索"),a("code",[e._v("location")]),e._v("对象，看它是否有一个同名的属性。如果有，则该变量会被求值为"),a("code",[e._v("location")]),e._v("对象的属性。")]),e._v(" "),a("p",[e._v("严格模式不允许使用"),a("code",[e._v("with")]),e._v("语句，否则会抛出错误。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("警告")]),e._v("　由于"),a("code",[e._v("with")]),e._v("语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用"),a("code",[e._v("with")]),e._v("语句。")])]),e._v(" "),a("h3",{attrs:{id:"_3-6-10-switch语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-10-switch语句"}},[e._v("#")]),e._v(" 3.6.10 　"),a("code",[e._v("switch")]),e._v("语句")]),e._v(" "),a("p",[a("code",[e._v("switch")]),e._v("语句是与"),a("code",[e._v("if")]),e._v("语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript 中"),a("code",[e._v("switch")]),e._v("语句跟 C 语言中"),a("code",[e._v("switch")]),e._v("语句的语法非常相似，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("switch (expression) {\n  case value1:\n    statement\n    break;\n  case value2:\n    statement\n    break;\n  case value3:\n    statement\n    break;\n  case value4:\n    statement\n    break;\n  default:\n    statement\n}\n")])])]),a("p",[e._v("这里的每个"),a("code",[e._v("case")]),e._v("（条件/分支）相当于：“如果表达式等于后面的值，则执行下面的语句。”"),a("code",[e._v("break")]),e._v("关键字会导致代码执行跳出"),a("code",[e._v("switch")]),e._v("语句。如果没有"),a("code",[e._v("break")]),e._v("，则代码会继续匹配下一个条件。"),a("code",[e._v("default")]),e._v("关键字用于在任何条件都没有满足时指定默认执行的语句（相当于"),a("code",[e._v("else")]),e._v("语句）。")]),e._v(" "),a("p",[e._v("有了"),a("code",[e._v("switch")]),e._v("语句，开发者就用不着写类似这样的代码了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (i == 25) {\n  console.log("25");\n} else if (i == 35) {\n  console.log("35");\n} else if (i == 45) {\n  console.log("45");\n} else {\n  console.log("Other");\n}\n')])])]),a("p",[e._v("而是可以这样写：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('switch (i) {\n  case 25:\n    console.log("25");\n    break;\n  case 35:\n    console.log("35");\n    break;\n  case 45:\n    console.log("45");\n    break;\n  default:\n    console.log("Other");\n}\n')])])]),a("p",[e._v("为避免不必要的条件判断，最好给每个条件后面都加上"),a("code",[e._v("break")]),e._v("语句。如果确实需要连续匹配几个条件，那么推荐写个注释表明是故意忽略了"),a("code",[e._v("break")]),e._v("，如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('switch (i) {\n  case 25:\n    /*跳过*/\n  case 35:\n    console.log("25 or 35");\n    break;\n  case 45:\n    console.log("45");\n    break;\n  default:\n    console.log("Other");\n}\n')])])]),a("p",[e._v("虽然"),a("code",[e._v("switch")]),e._v("语句是从其他语言借鉴过来的，但 ECMAScript 为它赋予了一些独有的特性。首先，"),a("code",[e._v("switch")]),e._v("语句可以用于所有数据类型（在很多语言中，它只能用于数值），因此可以使用字符串甚至对象。其次，条件的值不需要是常量，也可以是变量或表达式。看下面的例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('switch ("hello world") {\n  case "hello" + " world":\n    console.log("Greeting was found.");\n    break;\n  case "goodbye":\n    console.log("Closing was found.");\n    break;\n  default:\n    console.log("Unexpected message was found.");\n}\n')])])]),a("p",[e._v("这个例子在"),a("code",[e._v("switch")]),e._v("语句中使用了字符串。第一个条件实际上使用的是表达式，求值为两个字符串拼接后的结果。因为拼接后的结果等于"),a("code",[e._v("switch")]),e._v("的参数，所以"),a("code",[e._v("console.log")]),e._v("会输出"),a("code",[e._v('"Greeting was found."')]),e._v("。能够在条件判断中使用表达式，就可以在判断中加入更多逻辑：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let num = 25;\nswitch (true) {\n  case num < 0:\n    console.log("Less than 0.");\n    break;\n  case num >= 0 && num <= 10:\n    console.log("Between 0 and 10.");\n    break;\n  case num > 10 && num <= 20:\n    console.log("Between 10 and 20.");\n    break;\n  default:\n    console.log("More than 20.");\n}\n')])])]),a("p",[e._v("上面的代码首先在外部定义了变量"),a("code",[e._v("num")]),e._v("，而传给"),a("code",[e._v("switch")]),e._v("语句的参数之所以是"),a("code",[e._v("true")]),e._v("，就是因为每个条件的表达式都会返回布尔值。条件的表达式分别被求值，直到有表达式返回"),a("code",[e._v("true")]),e._v("；否则，就会一直跳到"),a("code",[e._v("default")]),e._v("语句（这个例子正是如此）。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v(" "),a("code",[e._v("switch")]),e._v("语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串"),a("code",[e._v('"10"')]),e._v("不等于数值 10）。")])]),e._v(" "),a("h2",{attrs:{id:"_3-7-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-函数"}},[e._v("#")]),e._v(" 3.7 　函数")]),e._v(" "),a("p",[e._v("函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript 中的函数使用"),a("code",[e._v("function")]),e._v("关键字声明，后跟一组参数，然后是函数体。")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　第 10 章会更详细地介绍函数。")])]),e._v(" "),a("p",[e._v("以下是函数的基本语法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function functionName(arg0, arg1,...,argN) {\n  statements\n}\n")])])]),a("p",[e._v("下面是一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function sayHi(name, message) {\n  console.log("Hello " + name + ", " + message);\n}\n')])])]),a("p",[e._v("可以通过函数名来调用函数，要传给函数的参数放在括号里（如果有多个参数，则用逗号隔开）。下面是调用函数"),a("code",[e._v("sayHi()")]),e._v("的示例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('sayHi("Nicholas", "how are you today?");\n')])])]),a("p",[e._v("调用这个函数的输出结果是"),a("code",[e._v('"Hello Nicholas, how are you today?"')]),e._v("。参数"),a("code",[e._v("name")]),e._v("和"),a("code",[e._v("message")]),e._v("在函数内部作为字符串被拼接在了一起，最终通过"),a("code",[e._v("console.log")]),e._v("输出到控制台。")]),e._v(" "),a("p",[e._v("ECMAScript 中的函数不需要指定是否返回值。任何函数在任何时间都可以使用"),a("code",[e._v("return")]),e._v("语句来返回函数的值，用法是后跟要返回的值。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function sum(num1, num2) {\n  return num1 + num2;\n}\n")])])]),a("p",[e._v("函数"),a("code",[e._v("sum()")]),e._v("会将两个值相加并返回结果。注意，除了"),a("code",[e._v("return")]),e._v("语句之外没有任何特殊声明表明该函数有返回值。然后就可以这样调用它：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const result = sum(5, 10);\n")])])]),a("p",[e._v("要注意的是，只要碰到"),a("code",[e._v("return")]),e._v("语句，函数就会立即停止执行并退出。因此，"),a("code",[e._v("return")]),e._v("语句后面的代码不会被执行。比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function sum(num1, num2) {\n  return num1 + num2;\n  console.log("Hello world");  // 不会执行\n}\n')])])]),a("p",[e._v("在这个例子中，"),a("code",[e._v("console.log")]),e._v("不会执行，因为它在"),a("code",[e._v("return")]),e._v("语句后面。")]),e._v(" "),a("p",[e._v("一个函数里也可以有多个"),a("code",[e._v("return")]),e._v("语句，像这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function diff(num1, num2) {\n  if (num1 < num2) {\n    return num2 - num1;\n  } else {\n    return num1 - num2;\n  }\n}\n")])])]),a("p",[e._v("这个"),a("code",[e._v("diff()")]),e._v("函数用于计算两个数值的差。如果第一个数值小于第二个，则用第二个减第一个；否则，就用第一个减第二个。代码中每个分支都有自己的"),a("code",[e._v("return")]),e._v("语句，返回正确的差值。")]),e._v(" "),a("p",[a("code",[e._v("return")]),e._v("语句也可以不带返回值。这时候，函数会立即停止执行并返回"),a("code",[e._v("undefined")]),e._v("。这种用法最常用于提前终止函数执行，并不是为了返回值。比如在下面的例子中，"),a("code",[e._v("console.log")]),e._v("不会执行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function sayHi(name, message) {\n  return;\n  console.log("Hello " + name + ", " + message); // 不会执行\n}\n')])])]),a("blockquote",[a("p",[a("strong",[e._v("注意")]),e._v("　最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。")])]),e._v(" "),a("p",[e._v("严格模式对函数也有一些限制：")]),e._v(" "),a("ul",[a("li",[e._v("函数不能以"),a("code",[e._v("eval")]),e._v("或"),a("code",[e._v("arguments")]),e._v("作为名称；")]),e._v(" "),a("li",[e._v("函数的参数不能叫"),a("code",[e._v("eval")]),e._v("或"),a("code",[e._v("arguments")]),e._v("；")]),e._v(" "),a("li",[e._v("两个函数的参数不能叫同一个名称。")])]),e._v(" "),a("p",[e._v("如果违反上述规则，则会导致语法错误，代码也不会执行。")]),e._v(" "),a("h2",{attrs:{id:"_3-8-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-小结"}},[e._v("#")]),e._v(" 3.8 　小结")]),e._v(" "),a("p",[e._v("JavaScript 的核心语言特性在 ECMA-262 中以伪语言 ECMAScript 的形式来定义。ECMAScript 包含所有基本语法、操作符、数据类型和对象，能完成基本的计算任务，但没有提供获得输入和产生输出的机制。理解 ECMAScript 及其复杂的细节是完全理解浏览器中 JavaScript 的关键。下面总结一下 ECMAScript 中的基本元素。")]),e._v(" "),a("ul",[a("li",[e._v("ECMAScript 中的基本数据类型包括"),a("code",[e._v("Undefined")]),e._v("、"),a("code",[e._v("Null")]),e._v("、"),a("code",[e._v("Boolean")]),e._v("、"),a("code",[e._v("Number")]),e._v("、"),a("code",[e._v("String")]),e._v("和"),a("code",[e._v("Symbol")]),e._v("。")]),e._v(" "),a("li",[e._v("与其他语言不同，ECMAScript 不区分整数和浮点值，只有"),a("code",[e._v("Number")]),e._v("一种数值数据类型。")]),e._v(" "),a("li",[a("code",[e._v("Object")]),e._v("是一种复杂数据类型，它是这门语言中所有对象的基类。")]),e._v(" "),a("li",[e._v("严格模式为这门语言中某些容易出错的部分施加了限制。")]),e._v(" "),a("li",[e._v("ECMAScript 提供了 C 语言和类 C 语言中常见的很多基本操作符，包括数学操作符、布尔操作符、关系操作符、相等操作符和赋值操作符等。")]),e._v(" "),a("li",[e._v("这门语言中的流控制语句大多是从其他语言中借鉴而来的，比如"),a("code",[e._v("if")]),e._v("语句、"),a("code",[e._v("for")]),e._v("语句和"),a("code",[e._v("switch")]),e._v("语句等。")])]),e._v(" "),a("p",[e._v("ECMAScript 中的函数与其他语言中的函数不一样。")]),e._v(" "),a("ul",[a("li",[e._v("不需要指定函数的返回值，因为任何函数可以在任何时候返回任何值。")]),e._v(" "),a("li",[e._v("不指定返回值的函数实际上会返回特殊值"),a("code",[e._v("undefined")]),e._v("。")])])])}),[],!1,null,null,null);t.default=_.exports}}]);